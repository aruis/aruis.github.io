{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/media/15315228604634.jpg","path":"media/15315228604634.jpg","modified":1,"renderable":0},{"_id":"source/media/15316574043348.jpg","path":"media/15316574043348.jpg","modified":1,"renderable":0},{"_id":"source/media/15317042937460.jpg","path":"media/15317042937460.jpg","modified":1,"renderable":0},{"_id":"source/media/15317044049926.jpg","path":"media/15317044049926.jpg","modified":1,"renderable":0},{"_id":"source/media/15317048391668.jpg","path":"media/15317048391668.jpg","modified":1,"renderable":0},{"_id":"source/media/15317809896046.jpg","path":"media/15317809896046.jpg","modified":1,"renderable":0},{"_id":"source/media/15319616591142.jpg","path":"media/15319616591142.jpg","modified":1,"renderable":0},{"_id":"source/media/15319617008516.jpg","path":"media/15319617008516.jpg","modified":1,"renderable":0},{"_id":"source/media/15319627604059.jpg","path":"media/15319627604059.jpg","modified":1,"renderable":0},{"_id":"source/media/屏幕快照 2018-04-27 11.41.45.png","path":"media/屏幕快照 2018-04-27 11.41.45.png","modified":1,"renderable":0},{"_id":"source/media/屏幕快照 2018-07-16 09.22.56.png","path":"media/屏幕快照 2018-07-16 09.22.56.png","modified":1,"renderable":0},{"_id":"source/media/屏幕快照 2018-07-19 08.53.26.png","path":"media/屏幕快照 2018-07-19 08.53.26.png","modified":1,"renderable":0},{"_id":"source/media/DSC04458.jpg","path":"media/DSC04458.jpg","modified":1,"renderable":0},{"_id":"source/media/屏幕快照 2018-07-16 09.20.59.png","path":"media/屏幕快照 2018-07-16 09.20.59.png","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":1,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b48c4f7d61a5928be717d4bd654481ff1eab36ee","modified":1531878109754},{"_id":"themes/maupassant/README.md","hash":"a3dcfa9b646980ee5811ec03b4c5786618b85ff9","modified":1531720604399},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1531720604398},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1531720604398},{"_id":"themes/maupassant/_config.yml","hash":"3e5a8976dddb70e523bc765b932680e47f4a2faf","modified":1532308152181},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1531720604406},{"_id":"source/.MWebMetaData/setting.json","hash":"78d0118bf10ff6987e1b75c1cca0e73e42c00dbe","modified":1531724698562},{"_id":"source/_posts/CentOS系统使用Shadowsocks搭建代理服务.md","hash":"08ae75538703d6ab53eea5a090791d4dbeb00688","modified":1531962946383},{"_id":"source/_posts/IntelliJ-IDEA在Winodws下Gradle乱码问题.md","hash":"f1a6e8ac331c8b648f9b1c09833f20c2cc522685","modified":1532307410143},{"_id":"source/_posts/PostgreSQL数组类型数据一条sql实现翻译.md","hash":"b7f03197eaf23af5b6368d78efb54086143a2913","modified":1531745592843},{"_id":"source/_posts/PostgreSQL里一条SQL统计合计与小计.md","hash":"6afdb97aab6f7120f82d0fe711b638fddcf6f58c","modified":1532255529866},{"_id":"source/_posts/Vert-x异步方法转同步.md","hash":"8fe48a7cf60ef594b7081cc9ae11f516be1e0fe2","modified":1532129277345},{"_id":"source/_posts/linux挂载新磁盘（适用阿里云、华为云）.md","hash":"0bba7c5055c6f73e453e8685f7c799e4f3c723e1","modified":1531745538799},{"_id":"source/_posts/如何在cas登录成功页面显示用户名.md","hash":"d1e8134fab34febb09774c433348cfeb5114afad","modified":1532049127703},{"_id":"source/_posts/小诗一首.md","hash":"7ab8d61398354e3e3477f1a25b62e5c10676e44b","modified":1532391689705},{"_id":"source/_posts/用Gradle打包Vue前端程序.md","hash":"df26c98e6b03bc15d89f286cd180280d98f8cbd8","modified":1531878148765},{"_id":"source/_posts/用Gradle自动发布程序至Linux服务器.md","hash":"0baa33d6a5020a24e3734fedbaa21be1efb2186d","modified":1531880848407},{"_id":"source/_posts/用JMH做简单的JVM性能测试.md","hash":"21aacf11c167192a787af68eb86ff030c706645d","modified":1531745592839},{"_id":"source/_posts/用了docker之后性能损耗多少.md","hash":"cf42ebcb01d609fb25ea35aaebcf1dc0a197f20e","modified":1531745592834},{"_id":"source/media/15315228604634.jpg","hash":"9347ca20df0e5f73eb8cd1a647a233d738aea884","modified":1532394768388},{"_id":"source/media/15316574043348.jpg","hash":"a05a47030c203ce8a4aae47bf947bd5b21215fa7","modified":1532394768052},{"_id":"source/media/15317042937460.jpg","hash":"0d72a946895acbfe839b45cbd02d9d7dc8ec4432","modified":1532394772986},{"_id":"source/about/index.md","hash":"65888cafb48b6d10999f31407d3c2b4b47881fc4","modified":1531903275223},{"_id":"source/media/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1531784688101},{"_id":"source/media/15317044049926.jpg","hash":"8b4a7136e2d3637d0ac19331324e5d4f079952b4","modified":1532394773190},{"_id":"source/media/15317048391668.jpg","hash":"4c7c90e196fcf6cf2e7f580e3440c29b4f938427","modified":1532394767931},{"_id":"source/media/15317809896046.jpg","hash":"fd4d15b1dab93ab35a8b61a9cfe92922043f0076","modified":1532394772895},{"_id":"source/media/15319616591142.jpg","hash":"2d25d7e207a480c5ad326b37b3951f4cc367f1c1","modified":1532394767930},{"_id":"source/media/15319617008516.jpg","hash":"4b231a1e789abb48d403832d8a4b721c4087e186","modified":1532394773291},{"_id":"source/media/15319627604059.jpg","hash":"fac9953c6787990ba056be2ba2e2949621eb68ad","modified":1532394767989},{"_id":"source/media/屏幕快照 2018-04-27 11.41.45.png","hash":"03306b8e3b4b575cbd2445d6ef476ef1f6862f7f","modified":1532394787580},{"_id":"source/media/屏幕快照 2018-07-16 09.22.56.png","hash":"80b124d2e120cead704697e1708d15a6c0187971","modified":1532394778167},{"_id":"source/media/屏幕快照 2018-07-19 08.53.26.png","hash":"592eb2b93bb3fa0f485fb8ef9fbbca2622c2716b","modified":1532394778263},{"_id":"source/media/DSC04458.jpg","hash":"2a2210b14567b45e9da2c82ab9e6fa86902babbc","modified":1532392406702},{"_id":"source/media/屏幕快照 2018-07-16 09.20.59.png","hash":"c47c644a546de183845a61278d13bd644ed0d0a1","modified":1532394779241},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1531720604393},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1531720604391},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1531720590021},{"_id":"themes/maupassant/.git/COMMIT_EDITMSG","hash":"0d304ade5a0b131586e4d5be234245da860dc946","modified":1531734584736},{"_id":"themes/maupassant/.git/packed-refs","hash":"af879af1afdc3423352746eef12e7698c689fa99","modified":1531720604389},{"_id":"themes/maupassant/.git/index","hash":"def97908fb474b59c76d692c6f46f535c7689d46","modified":1531903125126},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1531720604400},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1531720604400},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1531720604400},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1531720604401},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1531720604401},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1531720604401},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1531720604401},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1531720604401},{"_id":"themes/maupassant/layout/archive.pug","hash":"665582bb4092fcd81bfaf4d08fc1689abee1e6c4","modified":1531720604405},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1531720604405},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1531720604405},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1531720604405},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1531903103124},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1531720604406},{"_id":"themes/maupassant/layout/single-column.pug","hash":"2db6d479c52c7dbb9674b419629aea74f627d55c","modified":1531903263806},{"_id":"themes/maupassant/layout/post.pug","hash":"ead043c9083507b919f5c504b89a50f90d928e57","modified":1531901249231},{"_id":"themes/maupassant/source/.DS_Store","hash":"0756f86316408c61cf9ff3bfe0c2a0aa1407f8e1","modified":1531913468658},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1531720590024},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1531720590021},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1531720590026},{"_id":"themes/maupassant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1531720590025},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1531720590023},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1531720590026},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1531720590022},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1531720590027},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1531720590025},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1531720590025},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1531720590019},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1531720590027},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"749e2cd19f1b73567992faddd85cc2c79839a047","modified":1531734584738},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"bf5e24891d18c19b31ef7887cd22ae2a74f9ad4b","modified":1531720604402},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"69fa52eac8dfcf8073db7e540a4b0e87f41654f6","modified":1531720604402},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1531720604402},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"e672914a8451b269c1033cd8c55e026beb3a9135","modified":1531720604402},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1531720604402},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"e3a5e2d44ac261e3168a0b10e968f9a57bc5a237","modified":1531720604402},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"75cfa2cda3ff0681d03bbe89326818b824e5e524","modified":1531720604403},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1531720604403},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1531720604403},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1531720604403},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1531720604403},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1531720604404},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1531720604404},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1531720604404},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1531720604404},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1531720604404},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1531720604405},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1531720604405},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1531720604407},{"_id":"themes/maupassant/source/css/donate.css","hash":"164e0214c2a666066f7072deb6399c0f5ea18168","modified":1531902183387},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"b091770a242d7536938f31ec688aa7b09bea8ab0","modified":1531903358213},{"_id":"themes/maupassant/source/css/style.scss","hash":"b44da192f0875e144bf7990a99b42e31e986e099","modified":1531720604408},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1531720604410},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"bccb719b254fa2f4ed3521d55b843fdb9ee66062","modified":1531903365867},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1531720604410},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1531720604411},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1531720604411},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1531720604412},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1531720604412},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1531720604412},{"_id":"themes/maupassant/source/donate/index.html","hash":"bd5cbe475b7bce89a8c96375c56c8e3e188d6afc","modified":1531720604409},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1531720604413},{"_id":"themes/maupassant/source/js/donate.js","hash":"40b91d5db48bad8a349e2e7ef1d54e3add6a5e91","modified":1531902523356},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1531720604413},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1531720604416},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1531720604415},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1531720604415},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1531720604416},{"_id":"themes/maupassant/.git/objects/1e/f0277e7e75357a90e0eb31c5661dc1682443ad","hash":"27a6632c071adab5aa08f95441977abaa4eaf38f","modified":1531724560000},{"_id":"themes/maupassant/.git/objects/42/eff141a8500390cda82c2f526a4234f5a5a67f","hash":"7afcab4a683c246280a505295cbf53adb27739f8","modified":1531724560915},{"_id":"themes/maupassant/.git/objects/ed/90834d848ed9ba39aec6c41e0fd5ee94f8c4b0","hash":"75b8c420a84f361ea659324536073d643c50d8b6","modified":1531724560000},{"_id":"themes/maupassant/.git/objects/8c/766135c8afcc3a8b777552aa698e205dfb05ef","hash":"1766fa1bb82c297bc85c7f5b24a7aea69aca1ab9","modified":1531734584000},{"_id":"themes/maupassant/.git/objects/4f/f0cd5002c82db390efce2e1d37f17570c30098","hash":"54aa361271802f1f8ba7db4a02802e689ae6fd23","modified":1531734584737},{"_id":"themes/maupassant/.git/objects/a0/6d00f2f1c4643951923c03a36b821f3c92a82b","hash":"4a72f78be13584110543bc105bbf1477f6df0014","modified":1531734584000},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"5e09d0755a0accf207817b7c1d635c5ef488f0ae","modified":1531734584738},{"_id":"themes/maupassant/.git/objects/pack/pack-128dedba2b117c52a7999caa023cf040eeee1d3a.idx","hash":"807d55910eefd5198469bf31a4fff770da5657b3","modified":1531720604373},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1531720604415},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"749e2cd19f1b73567992faddd85cc2c79839a047","modified":1531734584739},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1531720604391},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"045b04cfcd46ad9adfd902b2c48fcdb521759650","modified":1531720604391},{"_id":"themes/maupassant/.git/objects/pack/pack-128dedba2b117c52a7999caa023cf040eeee1d3a.pack","hash":"67a83157a5f97053470d4bcf562eb12e581b8add","modified":1531720604372},{"_id":"public/search.xml","hash":"62c8b05a4f07993740421b2e6f647b8dd88abfee","modified":1532394823146},{"_id":"public/about/index.html","hash":"944021683caebcf486dae594504d8c40a1ec5d12","modified":1532394823158},{"_id":"public/2018/07/24/小诗一首/index.html","hash":"dd4254ad03afb4622edc1edd543280093d966225","modified":1532394823158},{"_id":"public/2018/07/23/IntelliJ-IDEA在Winodws下Gradle乱码问题/index.html","hash":"5dc3f590841dde67406c2b90defbbd0f29c30599","modified":1532394823158},{"_id":"public/2018/07/22/PostgreSQL里一条SQL统计合计与小计/index.html","hash":"fb1e86b02ffaef90025b244075947fb8a7656e14","modified":1532394823159},{"_id":"public/2018/07/21/Vert-x异步方法转同步/index.html","hash":"0290ab1c0ea15ac5d7ac4f88a6ce14aa7f68d578","modified":1532394823159},{"_id":"public/2018/07/20/如何在cas登录成功页面显示用户名/index.html","hash":"1b6421a9882ce1d16b206fceea963c9704d3c05e","modified":1532394823159},{"_id":"public/2018/07/19/CentOS系统使用Shadowsocks搭建代理服务/index.html","hash":"5eed6571173ff78164ba527af620945112eaf229","modified":1532394823159},{"_id":"public/2018/07/17/用Gradle打包Vue前端程序/index.html","hash":"a6e9d2a69c009120396c3bf44e84b0acb83ff899","modified":1532394823159},{"_id":"public/2018/07/16/linux挂载新磁盘（适用阿里云、华为云）/index.html","hash":"a38afc0e0d32a7764f8052d4a5ae48144a54fcb9","modified":1532394823159},{"_id":"public/2018/07/15/用了docker之后性能损耗多少/index.html","hash":"32df5ed4ad6e17dca4f91d85210d5458d1ae37ab","modified":1532394823159},{"_id":"public/2018/07/13/PostgreSQL数组类型数据一条sql实现翻译/index.html","hash":"117e582132566146160c9decb4ec388f4c4e75b8","modified":1532394823159},{"_id":"public/archives/index.html","hash":"61d73c6836e892b85674a44d5aee5f418be5bf95","modified":1532394823159},{"_id":"public/archives/page/2/index.html","hash":"4542eed2ec9ded577f60f5a7b240069e3b606202","modified":1532394823159},{"_id":"public/archives/2018/index.html","hash":"aad56aa29977d2bd24650be36921719b2f19f6b4","modified":1532394823159},{"_id":"public/archives/2018/page/2/index.html","hash":"e1fd5055922e29c5a44c676d54be1848d0fbaaa7","modified":1532394823159},{"_id":"public/archives/2018/07/index.html","hash":"5a0da5470f6f140c700ce928016a793c54aafafb","modified":1532394823159},{"_id":"public/archives/2018/07/page/2/index.html","hash":"304be1aa810d059294329bc25bf6f0858b2b7a63","modified":1532394823159},{"_id":"public/categories/实用技巧/index.html","hash":"1afb93e0f1451a3c9f410f46948b8718463fcc31","modified":1532394823159},{"_id":"public/categories/程序人生/index.html","hash":"e9801ef069a0b0c8b442c32cb4a592626592c547","modified":1532394823160},{"_id":"public/categories/文艺中年/index.html","hash":"4c96adecb14e74a067ee353518c44066def8293c","modified":1532394823160},{"_id":"public/tags/代理/index.html","hash":"f237ef8a8bbf4e541844779197e9b358098d7b17","modified":1532394823160},{"_id":"public/tags/gradle/index.html","hash":"caebefcd26b2220a7f9678a3b73db011f85ebe69","modified":1532394823160},{"_id":"public/tags/PostgreSQL/index.html","hash":"bf14f5af16cb9c21761798ab4fca0854cea110fe","modified":1532394823160},{"_id":"public/tags/Vert-x/index.html","hash":"f66b4c7426ce85b6d8eae8448f1b99712bfe0708","modified":1532394823161},{"_id":"public/tags/Linux/index.html","hash":"a961eb01ab56558bac8a2f8a691e059c2c389165","modified":1532394823161},{"_id":"public/tags/cas/index.html","hash":"d5b31eba0d34e3d2f4c621de224a1465a7799c42","modified":1532394823161},{"_id":"public/tags/前端/index.html","hash":"702f85d6ec9cfc28ce911b7e0a75e46daeaeca52","modified":1532394823161},{"_id":"public/tags/vue/index.html","hash":"aaa4f7b40a353be1abe67f6817e01090a65fd7a0","modified":1532394823161},{"_id":"public/tags/Java/index.html","hash":"214cf21a93518a3c87e2f49ee1692abc8d8b3a60","modified":1532394823161},{"_id":"public/tags/Docker/index.html","hash":"a5f03a273bcc4500276db82898113adb3caea24b","modified":1532394823161},{"_id":"public/2018/07/18/用Gradle自动发布程序至Linux服务器/index.html","hash":"4799001ec87d86d35f4a420ff09dd3f4eac5fbf0","modified":1532394823161},{"_id":"public/2018/07/14/用JMH做简单的JVM性能测试/index.html","hash":"0935af555c0bef2ddf7bfa9cb26aa05a37cabfb5","modified":1532394823161},{"_id":"public/index.html","hash":"f5c8e236ff00ddb305fae144eb408ebef2af53d0","modified":1532394823161},{"_id":"public/page/2/index.html","hash":"414520ec392dd82a4514ddf389360127f3fd79e8","modified":1532394823162},{"_id":"public/media/15316574043348.jpg","hash":"a05a47030c203ce8a4aae47bf947bd5b21215fa7","modified":1532394823173},{"_id":"public/media/15315228604634.jpg","hash":"9347ca20df0e5f73eb8cd1a647a233d738aea884","modified":1532394823173},{"_id":"public/media/15317042937460.jpg","hash":"0d72a946895acbfe839b45cbd02d9d7dc8ec4432","modified":1532394823173},{"_id":"public/media/15317044049926.jpg","hash":"8b4a7136e2d3637d0ac19331324e5d4f079952b4","modified":1532394823173},{"_id":"public/media/15317048391668.jpg","hash":"4c7c90e196fcf6cf2e7f580e3440c29b4f938427","modified":1532394823173},{"_id":"public/media/15317809896046.jpg","hash":"fd4d15b1dab93ab35a8b61a9cfe92922043f0076","modified":1532394823173},{"_id":"public/media/15319616591142.jpg","hash":"2d25d7e207a480c5ad326b37b3951f4cc367f1c1","modified":1532394823173},{"_id":"public/media/15319617008516.jpg","hash":"4b231a1e789abb48d403832d8a4b721c4087e186","modified":1532394823173},{"_id":"public/media/15319627604059.jpg","hash":"fac9953c6787990ba056be2ba2e2949621eb68ad","modified":1532394823173},{"_id":"public/media/屏幕快照 2018-04-27 11.41.45.png","hash":"03306b8e3b4b575cbd2445d6ef476ef1f6862f7f","modified":1532394823173},{"_id":"public/media/屏幕快照 2018-07-16 09.22.56.png","hash":"80b124d2e120cead704697e1708d15a6c0187971","modified":1532394823174},{"_id":"public/media/屏幕快照 2018-07-19 08.53.26.png","hash":"592eb2b93bb3fa0f485fb8ef9fbbca2622c2716b","modified":1532394823174},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1532394823174},{"_id":"public/img/AliPayQR.png","hash":"b091770a242d7536938f31ec688aa7b09bea8ab0","modified":1532394823174},{"_id":"public/img/WeChatQR.png","hash":"bccb719b254fa2f4ed3521d55b843fdb9ee66062","modified":1532394823174},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1532394823174},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1532394823174},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1532394823174},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1532394823175},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1532394823175},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1532394823175},{"_id":"public/media/屏幕快照 2018-07-16 09.20.59.png","hash":"c47c644a546de183845a61278d13bd644ed0d0a1","modified":1532394823232},{"_id":"public/media/DSC04458.jpg","hash":"2a2210b14567b45e9da2c82ab9e6fa86902babbc","modified":1532394823233},{"_id":"public/css/donate.css","hash":"164e0214c2a666066f7072deb6399c0f5ea18168","modified":1532394823239},{"_id":"public/donate/index.html","hash":"bd5cbe475b7bce89a8c96375c56c8e3e188d6afc","modified":1532394823239},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1532394823239},{"_id":"public/js/donate.js","hash":"40b91d5db48bad8a349e2e7ef1d54e3add6a5e91","modified":1532394823239},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1532394823239},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1532394823240},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1532394823240},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1532394823240},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1532394823240},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1532394823240},{"_id":"public/css/style.css","hash":"773ad46efbd957c22bbbc2900521908f81c04d7a","modified":1532394823240},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1532394823240}],"Category":[{"name":"实用技巧","_id":"cjjz0b74t0002ioxveix4cj4n"},{"name":"程序人生","_id":"cjjz0b74z0007ioxvl0kkndwe"},{"name":"文艺中年","_id":"cjjz0b75j000xioxvf6pwec48"}],"Data":[],"Page":[{"title":"关于","layout":"single-column","comments":0,"donate":true,"_content":"徜徉代码海洋十年，乐此不疲。\n\n### 爱好\n* 中国史\n* 红楼梦\n* 各种编程\n* 上世纪末期的PC游戏\n\n### 教育\n* 2006-2010 中国矿业大学·计算机科学与技术\n\n### 代码会说话\n* Github: [aruis](https://github.com/aruis)\n* 贡献过的项目\n    * [Vert.x](https://github.com/eclipse/vert.x)\n    * [pac4j](https://github.com/pac4j/vertx-pac4j)\n    * [jodconverter](https://github.com/sbraconnier/jodconverter)","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: single-column\ncomments: false\ndonate: true\n---\n徜徉代码海洋十年，乐此不疲。\n\n### 爱好\n* 中国史\n* 红楼梦\n* 各种编程\n* 上世纪末期的PC游戏\n\n### 教育\n* 2006-2010 中国矿业大学·计算机科学与技术\n\n### 代码会说话\n* Github: [aruis](https://github.com/aruis)\n* 贡献过的项目\n    * [Vert.x](https://github.com/eclipse/vert.x)\n    * [pac4j](https://github.com/pac4j/vertx-pac4j)\n    * [jodconverter](https://github.com/sbraconnier/jodconverter)","date":"2018-07-18T08:41:15.223Z","updated":"2018-07-18T08:41:15.223Z","path":"about/index.html","_id":"cjjz0b760001jioxv8h8kc0cm","content":"<p>徜徉代码海洋十年，乐此不疲。</p>\n<h3 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h3><ul>\n<li>中国史</li>\n<li>红楼梦</li>\n<li>各种编程</li>\n<li>上世纪末期的PC游戏</li>\n</ul>\n<h3 id=\"教育\"><a href=\"#教育\" class=\"headerlink\" title=\"教育\"></a>教育</h3><ul>\n<li>2006-2010 中国矿业大学·计算机科学与技术</li>\n</ul>\n<h3 id=\"代码会说话\"><a href=\"#代码会说话\" class=\"headerlink\" title=\"代码会说话\"></a>代码会说话</h3><ul>\n<li>Github: <a href=\"https://github.com/aruis\" target=\"_blank\" rel=\"noopener\">aruis</a></li>\n<li>贡献过的项目<ul>\n<li><a href=\"https://github.com/eclipse/vert.x\" target=\"_blank\" rel=\"noopener\">Vert.x</a></li>\n<li><a href=\"https://github.com/pac4j/vertx-pac4j\" target=\"_blank\" rel=\"noopener\">pac4j</a></li>\n<li><a href=\"https://github.com/sbraconnier/jodconverter\" target=\"_blank\" rel=\"noopener\">jodconverter</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>徜徉代码海洋十年，乐此不疲。</p>\n<h3 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h3><ul>\n<li>中国史</li>\n<li>红楼梦</li>\n<li>各种编程</li>\n<li>上世纪末期的PC游戏</li>\n</ul>\n<h3 id=\"教育\"><a href=\"#教育\" class=\"headerlink\" title=\"教育\"></a>教育</h3><ul>\n<li>2006-2010 中国矿业大学·计算机科学与技术</li>\n</ul>\n<h3 id=\"代码会说话\"><a href=\"#代码会说话\" class=\"headerlink\" title=\"代码会说话\"></a>代码会说话</h3><ul>\n<li>Github: <a href=\"https://github.com/aruis\" target=\"_blank\" rel=\"noopener\">aruis</a></li>\n<li>贡献过的项目<ul>\n<li><a href=\"https://github.com/eclipse/vert.x\" target=\"_blank\" rel=\"noopener\">Vert.x</a></li>\n<li><a href=\"https://github.com/pac4j/vertx-pac4j\" target=\"_blank\" rel=\"noopener\">pac4j</a></li>\n<li><a href=\"https://github.com/sbraconnier/jodconverter\" target=\"_blank\" rel=\"noopener\">jodconverter</a></li>\n</ul>\n</li>\n</ul>\n"}],"Post":[{"title":"CentOS系统使用Shadowsocks搭建代理服务","date":"2018-07-19T00:48:00.000Z","_content":"1. 确认pip是否安装，命令`pip help`，返回如图信息，说明已安装\n![](/media/15319616591142.jpg)\n如果返回下图，说明未安装\n![](/media/15319617008516.jpg)\n未安装需要执行以下子步骤：\n    * `yum -y install epel-release`\n    * `yum install python-pip`\n2. 通过pip安装shadowsocks，命令`pip install shadowsocks`\n3. 准备shadowsocks的配置文件，找个地方放就行，比如`/root/shadowsocks.json`，文件内容如下：\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 1988,\n  \"local_address\": \"0.0.0.0\",\n  \"local_port\": 1080,\n  \"password\": “xyz\",\n  \"timeout\": 300,\n  \"method\": \"aes-256-cfb\",\n  \"fast_open\": false,\n  \"workers\": 5\n}\n```\n    其中`server_port`、`passoword`、`method`三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。\n4. 准备好配置文件之后，就可以启动shadowsocks服务了，命令为`ssserver -c /root/shadowsocks.json -d start`，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。\n5. 客户端下载地址在都在github上，这里给出最常用的mac版和windows版\n    * [mac](https://github.com/shadowsocks/ShadowsocksX-NG/releases)\n    * [windows](https://github.com/shadowsocks/shadowsocks-windows/releases)\n6. 客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：\n    ![](/media/15319627604059.jpg)\n地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。\n7. 确定shadowsocks client是启动状态，就可以享受不一样的网络了。","source":"_posts/CentOS系统使用Shadowsocks搭建代理服务.md","raw":"---\ntitle: CentOS系统使用Shadowsocks搭建代理服务\ndate: 2018-07-19 08:48:00\ncategories: 实用技巧\ntags: \n - 代理\n---\n1. 确认pip是否安装，命令`pip help`，返回如图信息，说明已安装\n![](/media/15319616591142.jpg)\n如果返回下图，说明未安装\n![](/media/15319617008516.jpg)\n未安装需要执行以下子步骤：\n    * `yum -y install epel-release`\n    * `yum install python-pip`\n2. 通过pip安装shadowsocks，命令`pip install shadowsocks`\n3. 准备shadowsocks的配置文件，找个地方放就行，比如`/root/shadowsocks.json`，文件内容如下：\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 1988,\n  \"local_address\": \"0.0.0.0\",\n  \"local_port\": 1080,\n  \"password\": “xyz\",\n  \"timeout\": 300,\n  \"method\": \"aes-256-cfb\",\n  \"fast_open\": false,\n  \"workers\": 5\n}\n```\n    其中`server_port`、`passoword`、`method`三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。\n4. 准备好配置文件之后，就可以启动shadowsocks服务了，命令为`ssserver -c /root/shadowsocks.json -d start`，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。\n5. 客户端下载地址在都在github上，这里给出最常用的mac版和windows版\n    * [mac](https://github.com/shadowsocks/ShadowsocksX-NG/releases)\n    * [windows](https://github.com/shadowsocks/shadowsocks-windows/releases)\n6. 客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：\n    ![](/media/15319627604059.jpg)\n地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。\n7. 确定shadowsocks client是启动状态，就可以享受不一样的网络了。","slug":"CentOS系统使用Shadowsocks搭建代理服务","published":1,"updated":"2018-07-19T01:15:46.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b74n0000ioxvbqzqr1at","content":"<ol>\n<li>确认pip是否安装，命令<code>pip help</code>，返回如图信息，说明已安装<br><img src=\"/media/15319616591142.jpg\" alt=\"\"><br>如果返回下图，说明未安装<br><img src=\"/media/15319617008516.jpg\" alt=\"\"><br>未安装需要执行以下子步骤：<ul>\n<li><code>yum -y install epel-release</code></li>\n<li><code>yum install python-pip</code></li>\n</ul>\n</li>\n<li>通过pip安装shadowsocks，命令<code>pip install shadowsocks</code></li>\n<li><p>准备shadowsocks的配置文件，找个地方放就行，比如<code>/root/shadowsocks.json</code>，文件内容如下：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"server\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"server_port\"</span>: <span class=\"number\">1988</span>,</span><br><span class=\"line\">  <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"local_port\"</span>: <span class=\"number\">1080</span>,</span><br><span class=\"line\">  <span class=\"string\">\"password\"</span>: “xyz<span class=\"string\">\",</span></span><br><span class=\"line\">  <span class=\"string\">\"timeout\"</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"string\">\"method\"</span>: <span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"fast_open\"</span>: false,</span><br><span class=\"line\">  <span class=\"string\">\"workers\"</span>: <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 其中<code>server_port</code>、<code>passoword</code>、<code>method</code>三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。</p>\n</li>\n<li>准备好配置文件之后，就可以启动shadowsocks服务了，命令为<code>ssserver -c /root/shadowsocks.json -d start</code>，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。</li>\n<li>客户端下载地址在都在github上，这里给出最常用的mac版和windows版<ul>\n<li><a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases\" target=\"_blank\" rel=\"noopener\">mac</a></li>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">windows</a></li>\n</ul>\n</li>\n<li>客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：<br> <img src=\"/media/15319627604059.jpg\" alt=\"\"><br>地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。</li>\n<li>确定shadowsocks client是启动状态，就可以享受不一样的网络了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>确认pip是否安装，命令<code>pip help</code>，返回如图信息，说明已安装<br><img src=\"/media/15319616591142.jpg\" alt=\"\"><br>如果返回下图，说明未安装<br><img src=\"/media/15319617008516.jpg\" alt=\"\"><br>未安装需要执行以下子步骤：<ul>\n<li><code>yum -y install epel-release</code></li>\n<li><code>yum install python-pip</code></li>\n</ul>\n</li>\n<li>通过pip安装shadowsocks，命令<code>pip install shadowsocks</code></li>\n<li><p>准备shadowsocks的配置文件，找个地方放就行，比如<code>/root/shadowsocks.json</code>，文件内容如下：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"server\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"server_port\"</span>: <span class=\"number\">1988</span>,</span><br><span class=\"line\">  <span class=\"string\">\"local_address\"</span>: <span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"local_port\"</span>: <span class=\"number\">1080</span>,</span><br><span class=\"line\">  <span class=\"string\">\"password\"</span>: “xyz<span class=\"string\">\",</span></span><br><span class=\"line\">  <span class=\"string\">\"timeout\"</span>: <span class=\"number\">300</span>,</span><br><span class=\"line\">  <span class=\"string\">\"method\"</span>: <span class=\"string\">\"aes-256-cfb\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"fast_open\"</span>: false,</span><br><span class=\"line\">  <span class=\"string\">\"workers\"</span>: <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 其中<code>server_port</code>、<code>passoword</code>、<code>method</code>三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。</p>\n</li>\n<li>准备好配置文件之后，就可以启动shadowsocks服务了，命令为<code>ssserver -c /root/shadowsocks.json -d start</code>，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。</li>\n<li>客户端下载地址在都在github上，这里给出最常用的mac版和windows版<ul>\n<li><a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases\" target=\"_blank\" rel=\"noopener\">mac</a></li>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">windows</a></li>\n</ul>\n</li>\n<li>客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：<br> <img src=\"/media/15319627604059.jpg\" alt=\"\"><br>地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。</li>\n<li>确定shadowsocks client是启动状态，就可以享受不一样的网络了。</li>\n</ol>\n"},{"title":"IntelliJ IDEA在Winodws下Gradle乱码问题","date":"2018-07-23T00:19:25.000Z","_content":"恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成`UTF-8`就不会踩坑。可是现实是残酷的。\n比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。\n需要在`File | Settings | Build, Execution, Deployment | Gradle`下，找到`Gradle VM options`，然后填入配置`-Dfile.encoding=UTF-8`\n还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，`GRADLE_HOME`下的`bin`目录，找到`set DEFAULT_JVM_OPTS=`修改为`set DEFAULT_JVM_OPTS=\"-Dfile.encoding=UTF-8\"`即可。","source":"_posts/IntelliJ-IDEA在Winodws下Gradle乱码问题.md","raw":"---\ntitle: IntelliJ IDEA在Winodws下Gradle乱码问题\ndate: 2018-07-23 08:19:25\ncategories: 程序人生\ntags:\n    - gradle\n---\n恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成`UTF-8`就不会踩坑。可是现实是残酷的。\n比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。\n需要在`File | Settings | Build, Execution, Deployment | Gradle`下，找到`Gradle VM options`，然后填入配置`-Dfile.encoding=UTF-8`\n还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，`GRADLE_HOME`下的`bin`目录，找到`set DEFAULT_JVM_OPTS=`修改为`set DEFAULT_JVM_OPTS=\"-Dfile.encoding=UTF-8\"`即可。","slug":"IntelliJ-IDEA在Winodws下Gradle乱码问题","published":1,"updated":"2018-07-23T00:56:50.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b74r0001ioxvliiy8w3l","content":"<p>恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成<code>UTF-8</code>就不会踩坑。可是现实是残酷的。<br>比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。<br>需要在<code>File | Settings | Build, Execution, Deployment | Gradle</code>下，找到<code>Gradle VM options</code>，然后填入配置<code>-Dfile.encoding=UTF-8</code><br>还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，<code>GRADLE_HOME</code>下的<code>bin</code>目录，找到<code>set DEFAULT_JVM_OPTS=</code>修改为<code>set DEFAULT_JVM_OPTS=&quot;-Dfile.encoding=UTF-8&quot;</code>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成<code>UTF-8</code>就不会踩坑。可是现实是残酷的。<br>比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。<br>需要在<code>File | Settings | Build, Execution, Deployment | Gradle</code>下，找到<code>Gradle VM options</code>，然后填入配置<code>-Dfile.encoding=UTF-8</code><br>还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，<code>GRADLE_HOME</code>下的<code>bin</code>目录，找到<code>set DEFAULT_JVM_OPTS=</code>修改为<code>set DEFAULT_JVM_OPTS=&quot;-Dfile.encoding=UTF-8&quot;</code>即可。</p>\n"},{"title":"PostgreSQL数组类型数据一条sql实现翻译","date":"2018-07-13T05:32:18.000Z","_content":"PostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放`1,3,5`这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。\n接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是`{1,3,5}`，关联查询后，希望看到`{红,黄,蓝}`\n话不多说，直接上sql\n```\nselect distinct app_message.id,app_message.ids_at_auth_user__to,\n  array_agg(auth_user.v_username) over (partition by app_message.id) as av_username_at_auth_user\nfrom app_message\n  join auth_user on auth_user.id = ANY (ids_at_auth_user__to)\n```\n`app_message`是个收发消息表，里面`ids_at_auth_user__to`字段是个ARRAY，存储了`auth_user`表的若干个id，代表收件箱的人（多人）\n![屏幕快照 2018-04-27 11.41.45](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png)\n\n","source":"_posts/PostgreSQL数组类型数据一条sql实现翻译.md","raw":"---\ntitle: PostgreSQL数组类型数据一条sql实现翻译\ndate: 2018-07-13 13:32:18\ncategories: 程序人生\ntags: PostgreSQL\n---\nPostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放`1,3,5`这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。\n接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是`{1,3,5}`，关联查询后，希望看到`{红,黄,蓝}`\n话不多说，直接上sql\n```\nselect distinct app_message.id,app_message.ids_at_auth_user__to,\n  array_agg(auth_user.v_username) over (partition by app_message.id) as av_username_at_auth_user\nfrom app_message\n  join auth_user on auth_user.id = ANY (ids_at_auth_user__to)\n```\n`app_message`是个收发消息表，里面`ids_at_auth_user__to`字段是个ARRAY，存储了`auth_user`表的若干个id，代表收件箱的人（多人）\n![屏幕快照 2018-04-27 11.41.45](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png)\n\n","slug":"PostgreSQL数组类型数据一条sql实现翻译","published":1,"updated":"2018-07-16T12:53:12.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b74v0004ioxvqclll6e9","content":"<p>PostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放<code>1,3,5</code>这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。<br>接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是<code>{1,3,5}</code>，关联查询后，希望看到<code>{红,黄,蓝}</code><br>话不多说，直接上sql<br><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> app_message.id,app_message.ids_at_auth_user__to,</span><br><span class=\"line\">  <span class=\"built_in\">array_agg</span>(auth_user.v_username) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app_message.id) <span class=\"keyword\">as</span> av_username_at_auth_user</span><br><span class=\"line\"><span class=\"keyword\">from</span> app_message</span><br><span class=\"line\">  <span class=\"keyword\">join</span> auth_user <span class=\"keyword\">on</span> auth_user.id = <span class=\"keyword\">ANY</span> (ids_at_auth_user__to)</span><br></pre></td></tr></table></figure></p>\n<p><code>app_message</code>是个收发消息表，里面<code>ids_at_auth_user__to</code>字段是个ARRAY，存储了<code>auth_user</code>表的若干个id，代表收件箱的人（多人）<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png\" alt=\"屏幕快照 2018-04-27 11.41.45\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>PostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放<code>1,3,5</code>这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。<br>接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是<code>{1,3,5}</code>，关联查询后，希望看到<code>{红,黄,蓝}</code><br>话不多说，直接上sql<br><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> app_message.id,app_message.ids_at_auth_user__to,</span><br><span class=\"line\">  <span class=\"built_in\">array_agg</span>(auth_user.v_username) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app_message.id) <span class=\"keyword\">as</span> av_username_at_auth_user</span><br><span class=\"line\"><span class=\"keyword\">from</span> app_message</span><br><span class=\"line\">  <span class=\"keyword\">join</span> auth_user <span class=\"keyword\">on</span> auth_user.id = <span class=\"keyword\">ANY</span> (ids_at_auth_user__to)</span><br></pre></td></tr></table></figure></p>\n<p><code>app_message</code>是个收发消息表，里面<code>ids_at_auth_user__to</code>字段是个ARRAY，存储了<code>auth_user</code>表的若干个id，代表收件箱的人（多人）<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png\" alt=\"屏幕快照 2018-04-27 11.41.45\"></p>\n"},{"title":"PostgreSQL里一条SQL统计合计与小计","date":"2018-07-22T10:30:31.000Z","_content":"```\nSELECT\n  CASE WHEN GROUPING(student) = 1\n    THEN '合计'\n  ELSE student END,\n  CASE WHEN  GROUPING(student) <> 1 and GROUPING(course) = 1\n    THEN '小计'\n  ELSE course END,\n  sum(score.score)\nFROM score\nGROUP BY ROLLUP (student, course)\nORDER BY GROUPING(student) DESC ,student DESC, GROUPING(course) DESC ,course DESC;\n```","source":"_posts/PostgreSQL里一条SQL统计合计与小计.md","raw":"---\ntitle: PostgreSQL里一条SQL统计合计与小计\ndate: 2018-07-22 18:30:31\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n```\nSELECT\n  CASE WHEN GROUPING(student) = 1\n    THEN '合计'\n  ELSE student END,\n  CASE WHEN  GROUPING(student) <> 1 and GROUPING(course) = 1\n    THEN '小计'\n  ELSE course END,\n  sum(score.score)\nFROM score\nGROUP BY ROLLUP (student, course)\nORDER BY GROUPING(student) DESC ,student DESC, GROUPING(course) DESC ,course DESC;\n```","slug":"PostgreSQL里一条SQL统计合计与小计","published":1,"updated":"2018-07-22T10:32:09.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b74w0005ioxvxjb7a48b","content":"<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"keyword\">GROUPING</span>(student) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">'合计'</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> student <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span>  <span class=\"keyword\">GROUPING</span>(student) &lt;&gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">GROUPING</span>(course) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">'小计'</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> course <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(score.score)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> score</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">ROLLUP</span> (student, course)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">GROUPING</span>(student) <span class=\"keyword\">DESC</span> ,student <span class=\"keyword\">DESC</span>, <span class=\"keyword\">GROUPING</span>(course) <span class=\"keyword\">DESC</span> ,course <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> <span class=\"keyword\">GROUPING</span>(student) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">'合计'</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> student <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span>  <span class=\"keyword\">GROUPING</span>(student) &lt;&gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"keyword\">GROUPING</span>(course) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">'小计'</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> course <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  <span class=\"keyword\">sum</span>(score.score)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> score</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">ROLLUP</span> (student, course)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">GROUPING</span>(student) <span class=\"keyword\">DESC</span> ,student <span class=\"keyword\">DESC</span>, <span class=\"keyword\">GROUPING</span>(course) <span class=\"keyword\">DESC</span> ,course <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>"},{"title":"Vert.x异步方法转同步","date":"2018-07-20T23:16:12.000Z","_content":"以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。\n后来在使用`vertx-pac4j`的时候，无意中看到它源码中，也有我上面说的场景使用。就在`org.pac4j.vertx.context.session.VertxSessionStore`类的这一段：\n```\n @Override\n    public Session getSession(String sessionId) {\n        final CompletableFuture<io.vertx.ext.web.Session> vertxSessionFuture = new CompletableFuture<>();\n        sessionStore.get(sessionId, asyncResult -> {\n            if (asyncResult.succeeded()) {\n                vertxSessionFuture.complete(asyncResult.result());\n            } else {\n                vertxSessionFuture.completeExceptionally(asyncResult.cause());\n            }\n        });\n        final CompletableFuture<Session> pac4jSessionFuture = vertxSessionFuture.thenApply(session -> {\n            if (session != null) {\n                return new VertxSession(session);\n            } else {\n                return null;\n            }\n        });\n        try {\n            return pac4jSessionFuture.get();\n        } catch (InterruptedException|ExecutionException e) {\n            throw new TechnicalException(e);\n        }\n    }\n```\n可以明显看到`sessionStore.get`是的常规的Vert.x异步调用。\n基于这种应用方式，我尝试用`groovy`模仿写了一下，效果显著，代码如下：\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\n\nString sayHello() {\n\n    def future = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(3000, {\n        future.complete(\"hello world\")\n    })\n\n    return future.thenApply({\n        return it\n    }).get()\n}\n\nprintln(sayHello())\n```\n上面这种写法，主要还是依赖了java1.8的`CompletableFuture`类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。","source":"_posts/Vert-x异步方法转同步.md","raw":"---\ntitle: Vert.x异步方法转同步\ndate: 2018-07-21 07:16:12\ncategories: 程序人生\ntags:\n    - Vert.x\n---\n以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。\n后来在使用`vertx-pac4j`的时候，无意中看到它源码中，也有我上面说的场景使用。就在`org.pac4j.vertx.context.session.VertxSessionStore`类的这一段：\n```\n @Override\n    public Session getSession(String sessionId) {\n        final CompletableFuture<io.vertx.ext.web.Session> vertxSessionFuture = new CompletableFuture<>();\n        sessionStore.get(sessionId, asyncResult -> {\n            if (asyncResult.succeeded()) {\n                vertxSessionFuture.complete(asyncResult.result());\n            } else {\n                vertxSessionFuture.completeExceptionally(asyncResult.cause());\n            }\n        });\n        final CompletableFuture<Session> pac4jSessionFuture = vertxSessionFuture.thenApply(session -> {\n            if (session != null) {\n                return new VertxSession(session);\n            } else {\n                return null;\n            }\n        });\n        try {\n            return pac4jSessionFuture.get();\n        } catch (InterruptedException|ExecutionException e) {\n            throw new TechnicalException(e);\n        }\n    }\n```\n可以明显看到`sessionStore.get`是的常规的Vert.x异步调用。\n基于这种应用方式，我尝试用`groovy`模仿写了一下，效果显著，代码如下：\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\n\nString sayHello() {\n\n    def future = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(3000, {\n        future.complete(\"hello world\")\n    })\n\n    return future.thenApply({\n        return it\n    }).get()\n}\n\nprintln(sayHello())\n```\n上面这种写法，主要还是依赖了java1.8的`CompletableFuture`类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。","slug":"Vert-x异步方法转同步","published":1,"updated":"2018-07-20T23:27:57.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b74y0006ioxvu9wk2c86","content":"<p>以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。<br>后来在使用<code>vertx-pac4j</code>的时候，无意中看到它源码中，也有我上面说的场景使用。就在<code>org.pac4j.vertx.context.session.VertxSessionStore</code>类的这一段：<br><figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Session getSession(<span class=\"keyword\">String</span> sessionId) &#123;</span><br><span class=\"line\">       final CompletableFuture&lt;io.vertx.ext.web.Session&gt; vertxSessionFuture = <span class=\"keyword\">new</span> <span class=\"type\">CompletableFuture</span>&lt;&gt;();</span><br><span class=\"line\">       sessionStore.<span class=\"keyword\">get</span>(sessionId, asyncResult -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (asyncResult.succeeded()) &#123;</span><br><span class=\"line\">               vertxSessionFuture.complete(asyncResult.result());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               vertxSessionFuture.completeExceptionally(asyncResult.cause());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       final CompletableFuture&lt;Session&gt; pac4jSessionFuture = vertxSessionFuture.thenApply(session -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">VertxSession</span>(session);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> pac4jSessionFuture.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException|ExecutionException e) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">TechnicalException</span>(e);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以明显看到<code>sessionStore.get</code>是的常规的Vert.x异步调用。<br>基于这种应用方式，我尝试用<code>groovy</code>模仿写了一下，效果显著，代码如下：<br><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.Vertx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CompletableFuture</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">String</span> sayHello() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    def future = <span class=\"keyword\">new</span> CompletableFuture()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx.vertx()</span><br><span class=\"line\">    vertx.setTimer(<span class=\"number\">3000</span>, &#123;</span><br><span class=\"line\">        future.complete(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> future.thenApply(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> it</span><br><span class=\"line\">    &#125;).<span class=\"built_in\">get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println</span>(sayHello())</span><br></pre></td></tr></table></figure></p>\n<p>上面这种写法，主要还是依赖了java1.8的<code>CompletableFuture</code>类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。<br>后来在使用<code>vertx-pac4j</code>的时候，无意中看到它源码中，也有我上面说的场景使用。就在<code>org.pac4j.vertx.context.session.VertxSessionStore</code>类的这一段：<br><figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Session getSession(<span class=\"keyword\">String</span> sessionId) &#123;</span><br><span class=\"line\">       final CompletableFuture&lt;io.vertx.ext.web.Session&gt; vertxSessionFuture = <span class=\"keyword\">new</span> <span class=\"type\">CompletableFuture</span>&lt;&gt;();</span><br><span class=\"line\">       sessionStore.<span class=\"keyword\">get</span>(sessionId, asyncResult -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (asyncResult.succeeded()) &#123;</span><br><span class=\"line\">               vertxSessionFuture.complete(asyncResult.result());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               vertxSessionFuture.completeExceptionally(asyncResult.cause());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       final CompletableFuture&lt;Session&gt; pac4jSessionFuture = vertxSessionFuture.thenApply(session -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">VertxSession</span>(session);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> pac4jSessionFuture.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException|ExecutionException e) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">TechnicalException</span>(e);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以明显看到<code>sessionStore.get</code>是的常规的Vert.x异步调用。<br>基于这种应用方式，我尝试用<code>groovy</code>模仿写了一下，效果显著，代码如下：<br><figure class=\"highlight arduino\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.Vertx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CompletableFuture</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">String</span> sayHello() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    def future = <span class=\"keyword\">new</span> CompletableFuture()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx.vertx()</span><br><span class=\"line\">    vertx.setTimer(<span class=\"number\">3000</span>, &#123;</span><br><span class=\"line\">        future.complete(<span class=\"string\">\"hello world\"</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">return</span> future.thenApply(&#123;</span><br><span class=\"line\">        <span class=\"built_in\">return</span> it</span><br><span class=\"line\">    &#125;).<span class=\"built_in\">get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">println</span>(sayHello())</span><br></pre></td></tr></table></figure></p>\n<p>上面这种写法，主要还是依赖了java1.8的<code>CompletableFuture</code>类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。</p>\n"},{"title":"linux挂载新磁盘（适用阿里云、华为云）","date":"2018-07-16T00:39:04.000Z","front-matter":{"toc":true,"layout":"single-column"},"_content":"公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址[Linux 格式化和挂载数据盘](https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz)\n\n1. `fdisk -l`查看服务器是否识别到新硬盘的接入，一般会在最后，返回\n```\n磁盘 /dev/xvde：536.9 GB, 536870912000 字节，1048576000 个扇区\nUnits = 扇区 of 1 * 512 = 512 bytes\n扇区大小(逻辑/物理)：512 字节 / 512 字节\nI/O 大小(最小/最佳)：512 字节 / 512 字节\n```\n说明识别到一个500多G的硬盘，记录下这个硬盘设备号`/dev/xvde`(这是个变量，你那里不一定跟我一样)\n2. `fdisk /dev/xvde`对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入`n`，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：![屏幕快照 2018-07-16 09.20.59](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png)\n此时输入`wq`将分区表写入磁盘，并退出。会收到提示：\n![屏幕快照 2018-07-16 09.22.56](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png)\n3. `fdisk -l`再次执行此命令，可以看到新分区信息（一般在最后）\n![](/media/15317042937460.jpg)\n4. `mkfs.ext4 /dev/xvde1`将这个分区格式化成ext4文件系统。如图：\n![](/media/15317044049926.jpg)\n5. `mount /dev/xvde1 /mnt`挂载分区\n6. `df -h`可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步\n7. 保险起见，先备份`fstab`，执行命令`cp /etc/fstab /etc/fstab.bak`，然后执行`echo /dev/xvde1 /mnt ext4 defaults 0 0 >> /etc/fstab`。之后即使重启，分区也会自动挂载喽。可以通过`df -h`看到效果：\n![](/media/15317048391668.jpg)\n","source":"_posts/linux挂载新磁盘（适用阿里云、华为云）.md","raw":"---\ntitle: linux挂载新磁盘（适用阿里云、华为云）\ndate: 2018-07-16 08:39:04\ncategories: 程序人生\ntags: Linux\nfront-matter: \n    toc: true\n    layout: single-column\n---\n公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址[Linux 格式化和挂载数据盘](https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz)\n\n1. `fdisk -l`查看服务器是否识别到新硬盘的接入，一般会在最后，返回\n```\n磁盘 /dev/xvde：536.9 GB, 536870912000 字节，1048576000 个扇区\nUnits = 扇区 of 1 * 512 = 512 bytes\n扇区大小(逻辑/物理)：512 字节 / 512 字节\nI/O 大小(最小/最佳)：512 字节 / 512 字节\n```\n说明识别到一个500多G的硬盘，记录下这个硬盘设备号`/dev/xvde`(这是个变量，你那里不一定跟我一样)\n2. `fdisk /dev/xvde`对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入`n`，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：![屏幕快照 2018-07-16 09.20.59](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png)\n此时输入`wq`将分区表写入磁盘，并退出。会收到提示：\n![屏幕快照 2018-07-16 09.22.56](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png)\n3. `fdisk -l`再次执行此命令，可以看到新分区信息（一般在最后）\n![](/media/15317042937460.jpg)\n4. `mkfs.ext4 /dev/xvde1`将这个分区格式化成ext4文件系统。如图：\n![](/media/15317044049926.jpg)\n5. `mount /dev/xvde1 /mnt`挂载分区\n6. `df -h`可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步\n7. 保险起见，先备份`fstab`，执行命令`cp /etc/fstab /etc/fstab.bak`，然后执行`echo /dev/xvde1 /mnt ext4 defaults 0 0 >> /etc/fstab`。之后即使重启，分区也会自动挂载喽。可以通过`df -h`看到效果：\n![](/media/15317048391668.jpg)\n","slug":"linux挂载新磁盘（适用阿里云、华为云）","published":1,"updated":"2018-07-16T12:52:18.799Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b750000aioxv2az0zta2","content":"<p>公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址<a href=\"https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz\" target=\"_blank\" rel=\"noopener\">Linux 格式化和挂载数据盘</a></p>\n<ol>\n<li><code>fdisk -l</code>查看服务器是否识别到新硬盘的接入，一般会在最后，返回<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">磁盘 /dev/xvde：<span class=\"number\">536.9</span> GB, <span class=\"number\">536870912000</span> 字节，<span class=\"number\">1048576000</span> 个扇区</span><br><span class=\"line\">Units = 扇区 of <span class=\"number\">1</span> * <span class=\"number\">512</span> = <span class=\"number\">512</span> bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：<span class=\"number\">512</span> 字节 / <span class=\"number\">512</span> 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：<span class=\"number\">512</span> 字节 / <span class=\"number\">512</span> 字节</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>说明识别到一个500多G的硬盘，记录下这个硬盘设备号<code>/dev/xvde</code>(这是个变量，你那里不一定跟我一样)</p>\n<ol start=\"2\">\n<li><code>fdisk /dev/xvde</code>对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入<code>n</code>，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：<img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png\" alt=\"屏幕快照 2018-07-16 09.20.59\"><br>此时输入<code>wq</code>将分区表写入磁盘，并退出。会收到提示：<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png\" alt=\"屏幕快照 2018-07-16 09.22.56\"></li>\n<li><code>fdisk -l</code>再次执行此命令，可以看到新分区信息（一般在最后）<br><img src=\"/media/15317042937460.jpg\" alt=\"\"></li>\n<li><code>mkfs.ext4 /dev/xvde1</code>将这个分区格式化成ext4文件系统。如图：<br><img src=\"/media/15317044049926.jpg\" alt=\"\"></li>\n<li><code>mount /dev/xvde1 /mnt</code>挂载分区</li>\n<li><code>df -h</code>可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步</li>\n<li>保险起见，先备份<code>fstab</code>，执行命令<code>cp /etc/fstab /etc/fstab.bak</code>，然后执行<code>echo /dev/xvde1 /mnt ext4 defaults 0 0 &gt;&gt; /etc/fstab</code>。之后即使重启，分区也会自动挂载喽。可以通过<code>df -h</code>看到效果：<br><img src=\"/media/15317048391668.jpg\" alt=\"\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址<a href=\"https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz\" target=\"_blank\" rel=\"noopener\">Linux 格式化和挂载数据盘</a></p>\n<ol>\n<li><code>fdisk -l</code>查看服务器是否识别到新硬盘的接入，一般会在最后，返回<figure class=\"highlight lsl\"><table><tr><td class=\"code\"><pre><span class=\"line\">磁盘 /dev/xvde：<span class=\"number\">536.9</span> GB, <span class=\"number\">536870912000</span> 字节，<span class=\"number\">1048576000</span> 个扇区</span><br><span class=\"line\">Units = 扇区 of <span class=\"number\">1</span> * <span class=\"number\">512</span> = <span class=\"number\">512</span> bytes</span><br><span class=\"line\">扇区大小(逻辑/物理)：<span class=\"number\">512</span> 字节 / <span class=\"number\">512</span> 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：<span class=\"number\">512</span> 字节 / <span class=\"number\">512</span> 字节</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>说明识别到一个500多G的硬盘，记录下这个硬盘设备号<code>/dev/xvde</code>(这是个变量，你那里不一定跟我一样)</p>\n<ol start=\"2\">\n<li><code>fdisk /dev/xvde</code>对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入<code>n</code>，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：<img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png\" alt=\"屏幕快照 2018-07-16 09.20.59\"><br>此时输入<code>wq</code>将分区表写入磁盘，并退出。会收到提示：<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png\" alt=\"屏幕快照 2018-07-16 09.22.56\"></li>\n<li><code>fdisk -l</code>再次执行此命令，可以看到新分区信息（一般在最后）<br><img src=\"/media/15317042937460.jpg\" alt=\"\"></li>\n<li><code>mkfs.ext4 /dev/xvde1</code>将这个分区格式化成ext4文件系统。如图：<br><img src=\"/media/15317044049926.jpg\" alt=\"\"></li>\n<li><code>mount /dev/xvde1 /mnt</code>挂载分区</li>\n<li><code>df -h</code>可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步</li>\n<li>保险起见，先备份<code>fstab</code>，执行命令<code>cp /etc/fstab /etc/fstab.bak</code>，然后执行<code>echo /dev/xvde1 /mnt ext4 defaults 0 0 &gt;&gt; /etc/fstab</code>。之后即使重启，分区也会自动挂载喽。可以通过<code>df -h</code>看到效果：<br><img src=\"/media/15317048391668.jpg\" alt=\"\"></li>\n</ol>\n"},{"title":"如何在cas登录成功页面显示用户名","date":"2018-07-20T00:14:24.000Z","_content":"[CAS](https://www.apereo.org/projects/cas)这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。\n领导说，想再cas成功后的欢迎页，也就是`casGenericSuccess.jsp`页面，可以显示`欢迎:xxx`的字样。\n不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是[google groups](https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko)上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。\n现在给出我的思路：\n1. 在`deployerConfigContext.xml`文件中，找到`authenticationHandlers`参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。\n2. 然后在那个类里的`authenticate`方法，可以通过追加`HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession`这么一行，获取到`session`，这就嗨皮了。\n3. 可以在`authenticate`方法需要返回`true`的时候，之前增加一行`session.setAttribute(\"username\",balabala);`，这样我们就顺利把username塞到`session`里的\n4. 最后，修改`casGenericSuccess.jsp`，在需要显示用户名的地方，加入`<%=session.getAttribute(\"username\")%>`，就可以实现在登录成功页面显示用户名了\n5. 如果想显示更复杂数据内容，可以留意下`deployerConfigContext.xml`里面的`credentialsToPrincipalResolvers`所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。\n","source":"_posts/如何在cas登录成功页面显示用户名.md","raw":"---\ntitle: 如何在cas登录成功页面显示用户名\ndate: 2018-07-20 08:14:24\ncategories: 程序人生\ntags:\n    - cas\n---\n[CAS](https://www.apereo.org/projects/cas)这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。\n领导说，想再cas成功后的欢迎页，也就是`casGenericSuccess.jsp`页面，可以显示`欢迎:xxx`的字样。\n不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是[google groups](https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko)上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。\n现在给出我的思路：\n1. 在`deployerConfigContext.xml`文件中，找到`authenticationHandlers`参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。\n2. 然后在那个类里的`authenticate`方法，可以通过追加`HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession`这么一行，获取到`session`，这就嗨皮了。\n3. 可以在`authenticate`方法需要返回`true`的时候，之前增加一行`session.setAttribute(\"username\",balabala);`，这样我们就顺利把username塞到`session`里的\n4. 最后，修改`casGenericSuccess.jsp`，在需要显示用户名的地方，加入`<%=session.getAttribute(\"username\")%>`，就可以实现在登录成功页面显示用户名了\n5. 如果想显示更复杂数据内容，可以留意下`deployerConfigContext.xml`里面的`credentialsToPrincipalResolvers`所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。\n","slug":"如何在cas登录成功页面显示用户名","published":1,"updated":"2018-07-20T01:12:07.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b752000bioxvn5hu6zue","content":"<p><a href=\"https://www.apereo.org/projects/cas\" target=\"_blank\" rel=\"noopener\">CAS</a>这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。<br>领导说，想再cas成功后的欢迎页，也就是<code>casGenericSuccess.jsp</code>页面，可以显示<code>欢迎:xxx</code>的字样。<br>不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是<a href=\"https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko\" target=\"_blank\" rel=\"noopener\">google groups</a>上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。<br>现在给出我的思路：</p>\n<ol>\n<li>在<code>deployerConfigContext.xml</code>文件中，找到<code>authenticationHandlers</code>参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。</li>\n<li>然后在那个类里的<code>authenticate</code>方法，可以通过追加<code>HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession</code>这么一行，获取到<code>session</code>，这就嗨皮了。</li>\n<li>可以在<code>authenticate</code>方法需要返回<code>true</code>的时候，之前增加一行<code>session.setAttribute(&quot;username&quot;,balabala);</code>，这样我们就顺利把username塞到<code>session</code>里的</li>\n<li>最后，修改<code>casGenericSuccess.jsp</code>，在需要显示用户名的地方，加入<code>&lt;%=session.getAttribute(&quot;username&quot;)%&gt;</code>，就可以实现在登录成功页面显示用户名了</li>\n<li>如果想显示更复杂数据内容，可以留意下<code>deployerConfigContext.xml</code>里面的<code>credentialsToPrincipalResolvers</code>所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.apereo.org/projects/cas\" target=\"_blank\" rel=\"noopener\">CAS</a>这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。<br>领导说，想再cas成功后的欢迎页，也就是<code>casGenericSuccess.jsp</code>页面，可以显示<code>欢迎:xxx</code>的字样。<br>不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是<a href=\"https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko\" target=\"_blank\" rel=\"noopener\">google groups</a>上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。<br>现在给出我的思路：</p>\n<ol>\n<li>在<code>deployerConfigContext.xml</code>文件中，找到<code>authenticationHandlers</code>参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。</li>\n<li>然后在那个类里的<code>authenticate</code>方法，可以通过追加<code>HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession</code>这么一行，获取到<code>session</code>，这就嗨皮了。</li>\n<li>可以在<code>authenticate</code>方法需要返回<code>true</code>的时候，之前增加一行<code>session.setAttribute(&quot;username&quot;,balabala);</code>，这样我们就顺利把username塞到<code>session</code>里的</li>\n<li>最后，修改<code>casGenericSuccess.jsp</code>，在需要显示用户名的地方，加入<code>&lt;%=session.getAttribute(&quot;username&quot;)%&gt;</code>，就可以实现在登录成功页面显示用户名了</li>\n<li>如果想显示更复杂数据内容，可以留意下<code>deployerConfigContext.xml</code>里面的<code>credentialsToPrincipalResolvers</code>所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。</li>\n</ol>\n"},{"title":"小诗一首","date":"2018-07-24T00:16:47.000Z","_content":"![](/media/DSC04458.jpg)\n### 都谓彭城多霾日，\n### 落笔春城溅靛青。\n### 天公莫要惜颜色，\n### 几许蔚蓝伴我行。\n#### ——戊戌年六月偶瞥于徐州\n\n","source":"_posts/小诗一首.md","raw":"---\ntitle: 小诗一首\ndate: 2018-07-24 08:16:47\ncategories: 文艺中年\ntags:\n---\n![](/media/DSC04458.jpg)\n### 都谓彭城多霾日，\n### 落笔春城溅靛青。\n### 天公莫要惜颜色，\n### 几许蔚蓝伴我行。\n#### ——戊戌年六月偶瞥于徐州\n\n","slug":"小诗一首","published":1,"updated":"2018-07-24T00:21:29.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b755000fioxvckeilaxy","content":"<p><img src=\"/media/DSC04458.jpg\" alt=\"\"></p>\n<h3 id=\"都谓彭城多霾日，\"><a href=\"#都谓彭城多霾日，\" class=\"headerlink\" title=\"都谓彭城多霾日，\"></a>都谓彭城多霾日，</h3><h3 id=\"落笔春城溅靛青。\"><a href=\"#落笔春城溅靛青。\" class=\"headerlink\" title=\"落笔春城溅靛青。\"></a>落笔春城溅靛青。</h3><h3 id=\"天公莫要惜颜色，\"><a href=\"#天公莫要惜颜色，\" class=\"headerlink\" title=\"天公莫要惜颜色，\"></a>天公莫要惜颜色，</h3><h3 id=\"几许蔚蓝伴我行。\"><a href=\"#几许蔚蓝伴我行。\" class=\"headerlink\" title=\"几许蔚蓝伴我行。\"></a>几许蔚蓝伴我行。</h3><h4 id=\"——戊戌年六月偶瞥于徐州\"><a href=\"#——戊戌年六月偶瞥于徐州\" class=\"headerlink\" title=\"——戊戌年六月偶瞥于徐州\"></a>——戊戌年六月偶瞥于徐州</h4>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/media/DSC04458.jpg\" alt=\"\"></p>\n<h3 id=\"都谓彭城多霾日，\"><a href=\"#都谓彭城多霾日，\" class=\"headerlink\" title=\"都谓彭城多霾日，\"></a>都谓彭城多霾日，</h3><h3 id=\"落笔春城溅靛青。\"><a href=\"#落笔春城溅靛青。\" class=\"headerlink\" title=\"落笔春城溅靛青。\"></a>落笔春城溅靛青。</h3><h3 id=\"天公莫要惜颜色，\"><a href=\"#天公莫要惜颜色，\" class=\"headerlink\" title=\"天公莫要惜颜色，\"></a>天公莫要惜颜色，</h3><h3 id=\"几许蔚蓝伴我行。\"><a href=\"#几许蔚蓝伴我行。\" class=\"headerlink\" title=\"几许蔚蓝伴我行。\"></a>几许蔚蓝伴我行。</h3><h4 id=\"——戊戌年六月偶瞥于徐州\"><a href=\"#——戊戌年六月偶瞥于徐州\" class=\"headerlink\" title=\"——戊戌年六月偶瞥于徐州\"></a>——戊戌年六月偶瞥于徐州</h4>"},{"title":"用Gradle打包Vue前端程序","date":"2018-07-16T22:26:30.000Z","_content":"我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。\n其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样\n```\nmyproject\n├── build.gradle\n├── frontend\n│   ├── build\n│   ├── index.html\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── javaweb\n│   ├── build\n│   ├── build.gradle\n│   ├── out\n│   └── src\n└── settings.gradle\n```\n其中`frontend`文件夹就是`vue`项目的存放路径，我们先在此文件夹中，追加文件`build.gradle`，放至在package.json隔壁。填上很简单的内容：\n```\nplugins {\n  id \"com.palantir.npm-run\" version \"0.5.0\"\n}\n```\n代表这个项目要用到gradle-npm-run的插件\n然后修改settings.gradle，追加一行\n`include 'frontend'`，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task\n![-w148](/media/15317809896046.jpg)\n其中`build`就可以实现通过`gradle frontend:build`的命令，实现gradle对vue项目的打包了。\n明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。\n","source":"_posts/用Gradle打包Vue前端程序.md","raw":"---\ntitle: 用Gradle打包Vue前端程序\ndate: 2018-07-17 06:26:30\ncategories: 程序人生\ntags: \n    - 前端\n    - vue\n    - gradle\n---\n我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。\n其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样\n```\nmyproject\n├── build.gradle\n├── frontend\n│   ├── build\n│   ├── index.html\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── javaweb\n│   ├── build\n│   ├── build.gradle\n│   ├── out\n│   └── src\n└── settings.gradle\n```\n其中`frontend`文件夹就是`vue`项目的存放路径，我们先在此文件夹中，追加文件`build.gradle`，放至在package.json隔壁。填上很简单的内容：\n```\nplugins {\n  id \"com.palantir.npm-run\" version \"0.5.0\"\n}\n```\n代表这个项目要用到gradle-npm-run的插件\n然后修改settings.gradle，追加一行\n`include 'frontend'`，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task\n![-w148](/media/15317809896046.jpg)\n其中`build`就可以实现通过`gradle frontend:build`的命令，实现gradle对vue项目的打包了。\n明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。\n","slug":"用Gradle打包Vue前端程序","published":1,"updated":"2018-07-18T01:42:28.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b758000hioxvagslg0ya","content":"<p>我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。<br>其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样<br><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">myproject</span><br><span class=\"line\">├── build.gradle</span><br><span class=\"line\">├── frontend</span><br><span class=\"line\">│   ├── build</span><br><span class=\"line\">│   ├── index.html</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── javaweb</span><br><span class=\"line\">│   ├── build</span><br><span class=\"line\">│   ├── build.gradle</span><br><span class=\"line\">│   ├── out</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── settings.gradle</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>frontend</code>文件夹就是<code>vue</code>项目的存放路径，我们先在此文件夹中，追加文件<code>build.gradle</code>，放至在package.json隔壁。填上很简单的内容：<br><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span> <span class=\"string\">\"com.palantir.npm-run\"</span> <span class=\"built_in\">version</span> <span class=\"string\">\"0.5.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代表这个项目要用到gradle-npm-run的插件<br>然后修改settings.gradle，追加一行<br><code>include &#39;frontend&#39;</code>，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task<br><img src=\"/media/15317809896046.jpg\" alt=\"-w148\"><br>其中<code>build</code>就可以实现通过<code>gradle frontend:build</code>的命令，实现gradle对vue项目的打包了。<br>明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。<br>其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样<br><figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">myproject</span><br><span class=\"line\">├── build.gradle</span><br><span class=\"line\">├── frontend</span><br><span class=\"line\">│   ├── build</span><br><span class=\"line\">│   ├── index.html</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.json</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">├── javaweb</span><br><span class=\"line\">│   ├── build</span><br><span class=\"line\">│   ├── build.gradle</span><br><span class=\"line\">│   ├── out</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── settings.gradle</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>frontend</code>文件夹就是<code>vue</code>项目的存放路径，我们先在此文件夹中，追加文件<code>build.gradle</code>，放至在package.json隔壁。填上很简单的内容：<br><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span> <span class=\"string\">\"com.palantir.npm-run\"</span> <span class=\"built_in\">version</span> <span class=\"string\">\"0.5.0\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代表这个项目要用到gradle-npm-run的插件<br>然后修改settings.gradle，追加一行<br><code>include &#39;frontend&#39;</code>，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task<br><img src=\"/media/15317809896046.jpg\" alt=\"-w148\"><br>其中<code>build</code>就可以实现通过<code>gradle frontend:build</code>的命令，实现gradle对vue项目的打包了。<br>明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。</p>\n"},{"title":"用Gradle自动发布程序至Linux服务器","date":"2018-07-18T01:41:26.000Z","_content":"你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上`jenkins`，先拿`gradle`救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的[用Gradle打包Vue前端程序](http://www.kankanzhijian.com/2018/07/17/用Gradle打包Vue前端程序/)保持一定的连贯性。当然本帖拿来发布`war`包也是ok的。\n* 首先追加gradle插件，参考写法\n\n```\nplugins {\n    id 'org.hidetake.ssh' version '2.9.0'\n}\n```\n或者\n```\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'\n  }\n}\napply plugin: 'org.hidetake.ssh'\n```\n* 配置插件\n\n```\nremotes {\n    webServer {\n        host = '192.168.1.100'\n        user = 'develop'\n        port = 22\n        password = 'xyz'\n    }\n}\n```\n如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用`identity = file('id_rsa')`代替掉`password = 'xyz'`\n\n* 配置完Gradle SSH Plugin，就可以自己写`task`实现上传文件了。下面贴段我的\n\n```\ntask deployPortal {\n    group = 'release'\n    dependsOn zipPortal\n    doLast {\n        ssh.run {\n            session(remotes.webServer) {\n                put from: \"$buildDir/portal.zip\", into: \"/home/develop/\"\n                def result = execute 'unzip -o  /home/develop/portal.zip -d /home/develop/portal/'\n                println(result)\n            }\n        }\n    }\n}\n```\n这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句`put from: \"本地文件\", into: \"服务器路径\"`，实现文件上传功能。第二句`execute '执行shell命令'`，实现通过shell命令，解压缩文件。\n* 至于中间那句`dependsOn zipPortal`表示执行发布task之前，先要把文件准备好，这个`zipPortal`task我是这么写的\n    ```\n    task zipPortal(type: Zip) {\n        dependsOn(':portal:build')\n        from 'portal/www'\n        archiveName 'portal.zip'\n        destinationDir buildDir\n    }\n    ```\n*  换句话说，如果你是要上传`war`包的话，可能就不是`dependsOn zipPortal`而是`dependsOn war`了。其他的地方，大同小异。","source":"_posts/用Gradle自动发布程序至Linux服务器.md","raw":"---\ntitle: 用Gradle自动发布程序至Linux服务器\ndate: 2018-07-18 09:41:26\ncategories: 程序人生\ntags:\n    - gradle\n---\n你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上`jenkins`，先拿`gradle`救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的[用Gradle打包Vue前端程序](http://www.kankanzhijian.com/2018/07/17/用Gradle打包Vue前端程序/)保持一定的连贯性。当然本帖拿来发布`war`包也是ok的。\n* 首先追加gradle插件，参考写法\n\n```\nplugins {\n    id 'org.hidetake.ssh' version '2.9.0'\n}\n```\n或者\n```\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'\n  }\n}\napply plugin: 'org.hidetake.ssh'\n```\n* 配置插件\n\n```\nremotes {\n    webServer {\n        host = '192.168.1.100'\n        user = 'develop'\n        port = 22\n        password = 'xyz'\n    }\n}\n```\n如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用`identity = file('id_rsa')`代替掉`password = 'xyz'`\n\n* 配置完Gradle SSH Plugin，就可以自己写`task`实现上传文件了。下面贴段我的\n\n```\ntask deployPortal {\n    group = 'release'\n    dependsOn zipPortal\n    doLast {\n        ssh.run {\n            session(remotes.webServer) {\n                put from: \"$buildDir/portal.zip\", into: \"/home/develop/\"\n                def result = execute 'unzip -o  /home/develop/portal.zip -d /home/develop/portal/'\n                println(result)\n            }\n        }\n    }\n}\n```\n这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句`put from: \"本地文件\", into: \"服务器路径\"`，实现文件上传功能。第二句`execute '执行shell命令'`，实现通过shell命令，解压缩文件。\n* 至于中间那句`dependsOn zipPortal`表示执行发布task之前，先要把文件准备好，这个`zipPortal`task我是这么写的\n    ```\n    task zipPortal(type: Zip) {\n        dependsOn(':portal:build')\n        from 'portal/www'\n        archiveName 'portal.zip'\n        destinationDir buildDir\n    }\n    ```\n*  换句话说，如果你是要上传`war`包的话，可能就不是`dependsOn zipPortal`而是`dependsOn war`了。其他的地方，大同小异。","slug":"用Gradle自动发布程序至Linux服务器","published":1,"updated":"2018-07-18T02:27:28.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b75b000lioxvtp9f5mbh","content":"<p>你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上<code>jenkins</code>，先拿<code>gradle</code>救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的<a href=\"http://www.kankanzhijian.com/2018/07/17/用Gradle打包Vue前端程序/\">用Gradle打包Vue前端程序</a>保持一定的连贯性。当然本帖拿来发布<code>war</code>包也是ok的。</p>\n<ul>\n<li>首先追加gradle插件，参考写法</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">plugins</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">id</span> <span class=\"string\">'org.hidetake.ssh'</span> version <span class=\"string\">'2.9.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'org.hidetake:gradle-ssh-plugin:2.9.0'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply plugin: <span class=\"string\">'org.hidetake.ssh'</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>配置插件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">remotes</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">webServer</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">host</span> = <span class=\"string\">'192.168.1.100'</span></span><br><span class=\"line\">        user = <span class=\"string\">'develop'</span></span><br><span class=\"line\">        port = <span class=\"number\">22</span></span><br><span class=\"line\">        password = <span class=\"string\">'xyz'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用<code>identity = file(&#39;id_rsa&#39;)</code>代替掉<code>password = &#39;xyz&#39;</code></p>\n<ul>\n<li>配置完Gradle SSH Plugin，就可以自己写<code>task</code>实现上传文件了。下面贴段我的</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> deployPortal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">group</span> = <span class=\"string\">'release'</span></span><br><span class=\"line\">    dependsOn zipPortal</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        ssh.run &#123;</span><br><span class=\"line\">            session(remotes.webServer) &#123;</span><br><span class=\"line\">                put <span class=\"keyword\">from</span>: <span class=\"string\">\"$buildDir/portal.zip\"</span>, <span class=\"keyword\">into</span>: <span class=\"string\">\"/home/develop/\"</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> result = execute <span class=\"string\">'unzip -o  /home/develop/portal.zip -d /home/develop/portal/'</span></span><br><span class=\"line\">                <span class=\"keyword\">println</span>(result)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句<code>put from: &quot;本地文件&quot;, into: &quot;服务器路径&quot;</code>，实现文件上传功能。第二句<code>execute &#39;执行shell命令&#39;</code>，实现通过shell命令，解压缩文件。</p>\n<ul>\n<li><p>至于中间那句<code>dependsOn zipPortal</code>表示执行发布task之前，先要把文件准备好，这个<code>zipPortal</code>task我是这么写的</p>\n  <figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> zipPortal(type: Zip) &#123;</span><br><span class=\"line\">    dependsOn(<span class=\"string\">':portal:build'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">'portal/www'</span></span><br><span class=\"line\">    archiveName <span class=\"string\">'portal.zip'</span></span><br><span class=\"line\">    <span class=\"keyword\">destinationDir</span> buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>换句话说，如果你是要上传<code>war</code>包的话，可能就不是<code>dependsOn zipPortal</code>而是<code>dependsOn war</code>了。其他的地方，大同小异。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上<code>jenkins</code>，先拿<code>gradle</code>救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的<a href=\"http://www.kankanzhijian.com/2018/07/17/用Gradle打包Vue前端程序/\">用Gradle打包Vue前端程序</a>保持一定的连贯性。当然本帖拿来发布<code>war</code>包也是ok的。</p>\n<ul>\n<li>首先追加gradle插件，参考写法</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">plugins</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">id</span> <span class=\"string\">'org.hidetake.ssh'</span> version <span class=\"string\">'2.9.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">'org.hidetake:gradle-ssh-plugin:2.9.0'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply plugin: <span class=\"string\">'org.hidetake.ssh'</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>配置插件</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">remotes</span> &#123;</span><br><span class=\"line\">    <span class=\"section\">webServer</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">host</span> = <span class=\"string\">'192.168.1.100'</span></span><br><span class=\"line\">        user = <span class=\"string\">'develop'</span></span><br><span class=\"line\">        port = <span class=\"number\">22</span></span><br><span class=\"line\">        password = <span class=\"string\">'xyz'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用<code>identity = file(&#39;id_rsa&#39;)</code>代替掉<code>password = &#39;xyz&#39;</code></p>\n<ul>\n<li>配置完Gradle SSH Plugin，就可以自己写<code>task</code>实现上传文件了。下面贴段我的</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> deployPortal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">group</span> = <span class=\"string\">'release'</span></span><br><span class=\"line\">    dependsOn zipPortal</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        ssh.run &#123;</span><br><span class=\"line\">            session(remotes.webServer) &#123;</span><br><span class=\"line\">                put <span class=\"keyword\">from</span>: <span class=\"string\">\"$buildDir/portal.zip\"</span>, <span class=\"keyword\">into</span>: <span class=\"string\">\"/home/develop/\"</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> result = execute <span class=\"string\">'unzip -o  /home/develop/portal.zip -d /home/develop/portal/'</span></span><br><span class=\"line\">                <span class=\"keyword\">println</span>(result)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句<code>put from: &quot;本地文件&quot;, into: &quot;服务器路径&quot;</code>，实现文件上传功能。第二句<code>execute &#39;执行shell命令&#39;</code>，实现通过shell命令，解压缩文件。</p>\n<ul>\n<li><p>至于中间那句<code>dependsOn zipPortal</code>表示执行发布task之前，先要把文件准备好，这个<code>zipPortal</code>task我是这么写的</p>\n  <figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> zipPortal(type: Zip) &#123;</span><br><span class=\"line\">    dependsOn(<span class=\"string\">':portal:build'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">'portal/www'</span></span><br><span class=\"line\">    archiveName <span class=\"string\">'portal.zip'</span></span><br><span class=\"line\">    <span class=\"keyword\">destinationDir</span> buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>换句话说，如果你是要上传<code>war</code>包的话，可能就不是<code>dependsOn zipPortal</code>而是<code>dependsOn war</code>了。其他的地方，大同小异。</p>\n</li>\n</ul>\n"},{"title":"用JMH做简单的JVM性能测试","date":"2018-07-13T22:39:47.000Z","_content":"写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印`new Date()`计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会`System.out.println()`打印调试没什么区别。\n这次被人安利`JMH`，说来惭愧，是我在Twitter上质疑`Vert.x`采用了效率不高的Json序列化库，影响了其在[techempower](https://www.techempower.com/benchmarks/)的成绩。结果[@julienviet](https://twitter.com/julienviet)神回复我说\"you should make a JMH microbenchmark to find out\"，所以才有了这篇，利用JMH做Json序列化速度对比的文章。\n这是测试结果：\n![-w783](/media/15315228604634.jpg)\n可以看到`Vert.x`的Json序列化速度还是出类拔萃的，当然，其本质还是实用的`jackson`\n上代码：\n```java\npackage com.aruistar.benchmark;\n\nimport com.aruistar.benchmark.model.User;\nimport com.jsoniter.output.JsonStream;\nimport groovy.json.JsonBuilder;\nimport groovy.json.JsonOutput;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\n\npublic class JsonToStringBenchmark {\n\n    public static void main(String[] args) throws RunnerException {\n\n        Options opt = new OptionsBuilder()\n                .include(JsonToStringBenchmark.class.getSimpleName())\n                .forks(1)\n                .warmupIterations(2)\n                .measurementIterations(3)\n                .build();\n\n        new Runner(opt).run();\n    }\n\n\n    //    @Benchmark\n    public void testJsonObjectToBuffer() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toBuffer();\n    }\n\n    @Benchmark\n    public void testJsonObjectToString() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toString();\n    }\n\n\n    @Benchmark\n    public void testJsonBuilder() {\n        new JsonBuilder(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap()).toString();\n    }\n\n    @Benchmark\n    public void testJsonOutput() {\n        JsonOutput.toJson(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n    @Benchmark\n    public void testJsoniter() {\n        JsonStream.serialize(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n\n}\n\n```\n\n```java\npackage com.aruistar.benchmark.model;\n\n\nimport io.vertx.core.json.JsonObject;\n\npublic class User extends JsonObject {\n\n\n    public User(String name, String username, int age, String title, boolean bool) {\n        put(\"name\", name);\n        put(\"age\", age);\n        put(\"title\", title);\n        put(\"bool\", bool);\n    }\n\n\n}\n\n```\n\n源码地址，[https://github.com/aruis/somebenchmark](https://github.com/aruis/somebenchmark)\n\n需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤\n```\nDo you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?\nIf yes, is annotation processing enabled in your IDE? You can find the checkbox under\nPreferences -> Build, Execution, Deployment -> Compiler -> Annotation Processors\n```\n* 参考[https://github.com/artyushov/idea-jmh-plugin/issues/13]","source":"_posts/用JMH做简单的JVM性能测试.md","raw":"---\ntitle: 用JMH做简单的JVM性能测试\ndate: 2018-07-14 06:39:47\ncategories: 程序人生\ntags: Java\n---\n写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印`new Date()`计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会`System.out.println()`打印调试没什么区别。\n这次被人安利`JMH`，说来惭愧，是我在Twitter上质疑`Vert.x`采用了效率不高的Json序列化库，影响了其在[techempower](https://www.techempower.com/benchmarks/)的成绩。结果[@julienviet](https://twitter.com/julienviet)神回复我说\"you should make a JMH microbenchmark to find out\"，所以才有了这篇，利用JMH做Json序列化速度对比的文章。\n这是测试结果：\n![-w783](/media/15315228604634.jpg)\n可以看到`Vert.x`的Json序列化速度还是出类拔萃的，当然，其本质还是实用的`jackson`\n上代码：\n```java\npackage com.aruistar.benchmark;\n\nimport com.aruistar.benchmark.model.User;\nimport com.jsoniter.output.JsonStream;\nimport groovy.json.JsonBuilder;\nimport groovy.json.JsonOutput;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\n\npublic class JsonToStringBenchmark {\n\n    public static void main(String[] args) throws RunnerException {\n\n        Options opt = new OptionsBuilder()\n                .include(JsonToStringBenchmark.class.getSimpleName())\n                .forks(1)\n                .warmupIterations(2)\n                .measurementIterations(3)\n                .build();\n\n        new Runner(opt).run();\n    }\n\n\n    //    @Benchmark\n    public void testJsonObjectToBuffer() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toBuffer();\n    }\n\n    @Benchmark\n    public void testJsonObjectToString() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toString();\n    }\n\n\n    @Benchmark\n    public void testJsonBuilder() {\n        new JsonBuilder(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap()).toString();\n    }\n\n    @Benchmark\n    public void testJsonOutput() {\n        JsonOutput.toJson(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n    @Benchmark\n    public void testJsoniter() {\n        JsonStream.serialize(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n\n}\n\n```\n\n```java\npackage com.aruistar.benchmark.model;\n\n\nimport io.vertx.core.json.JsonObject;\n\npublic class User extends JsonObject {\n\n\n    public User(String name, String username, int age, String title, boolean bool) {\n        put(\"name\", name);\n        put(\"age\", age);\n        put(\"title\", title);\n        put(\"bool\", bool);\n    }\n\n\n}\n\n```\n\n源码地址，[https://github.com/aruis/somebenchmark](https://github.com/aruis/somebenchmark)\n\n需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤\n```\nDo you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?\nIf yes, is annotation processing enabled in your IDE? You can find the checkbox under\nPreferences -> Build, Execution, Deployment -> Compiler -> Annotation Processors\n```\n* 参考[https://github.com/artyushov/idea-jmh-plugin/issues/13]","slug":"用JMH做简单的JVM性能测试","published":1,"updated":"2018-07-16T12:53:12.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b75d000oioxv25bym3s8","content":"<p>写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印<code>new Date()</code>计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会<code>System.out.println()</code>打印调试没什么区别。<br>这次被人安利<code>JMH</code>，说来惭愧，是我在Twitter上质疑<code>Vert.x</code>采用了效率不高的Json序列化库，影响了其在<a href=\"https://www.techempower.com/benchmarks/\" target=\"_blank\" rel=\"noopener\">techempower</a>的成绩。结果<a href=\"https://twitter.com/julienviet\" target=\"_blank\" rel=\"noopener\">@julienviet</a>神回复我说”you should make a JMH microbenchmark to find out”，所以才有了这篇，利用JMH做Json序列化速度对比的文章。<br>这是测试结果：<br><img src=\"/media/15315228604634.jpg\" alt=\"-w783\"><br>可以看到<code>Vert.x</code>的Json序列化速度还是出类拔萃的，当然，其本质还是实用的<code>jackson</code><br>上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aruistar.benchmark.model.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jsoniter.output.JsonStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonOutput;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.annotations.Benchmark;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonToStringBenchmark</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RunnerException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Options opt = <span class=\"keyword\">new</span> OptionsBuilder()</span><br><span class=\"line\">                .include(JsonToStringBenchmark.class.getSimpleName())</span><br><span class=\"line\">                .forks(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .warmupIterations(<span class=\"number\">2</span>)</span><br><span class=\"line\">                .measurementIterations(<span class=\"number\">3</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runner(opt).run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    @Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonObjectToBuffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).toBuffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonObjectToString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> JsonBuilder(<span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).getMap()).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonOutput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JsonOutput.toJson(<span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsoniter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JsonStream.serialize(<span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark.model;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.json.JsonObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name, String username, <span class=\"keyword\">int</span> age, String title, <span class=\"keyword\">boolean</span> bool)</span> </span>&#123;</span><br><span class=\"line\">        put(<span class=\"string\">\"name\"</span>, name);</span><br><span class=\"line\">        put(<span class=\"string\">\"age\"</span>, age);</span><br><span class=\"line\">        put(<span class=\"string\">\"title\"</span>, title);</span><br><span class=\"line\">        put(<span class=\"string\">\"bool\"</span>, bool);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码地址，<a href=\"https://github.com/aruis/somebenchmark\" target=\"_blank\" rel=\"noopener\">https://github.com/aruis/somebenchmark</a></p>\n<p>需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤<br><figure class=\"highlight xl\"><table><tr><td class=\"code\"><pre><span class=\"line\">Do you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?</span><br><span class=\"line\">If yes, <span class=\"keyword\">is</span> annotation processing enabled <span class=\"built_in\">in</span> your IDE? You can find the checkbox under</span><br><span class=\"line\">P<span class=\"function\"><span class=\"title\">references</span> -&gt;</span> B<span class=\"function\"><span class=\"title\">uild</span>, Execution, Deployment -&gt;</span> C<span class=\"function\"><span class=\"title\">ompiler</span> -&gt;</span> Annotation Processors</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>参考[<a href=\"https://github.com/artyushov/idea-jmh-plugin/issues/13]\" target=\"_blank\" rel=\"noopener\">https://github.com/artyushov/idea-jmh-plugin/issues/13]</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印<code>new Date()</code>计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会<code>System.out.println()</code>打印调试没什么区别。<br>这次被人安利<code>JMH</code>，说来惭愧，是我在Twitter上质疑<code>Vert.x</code>采用了效率不高的Json序列化库，影响了其在<a href=\"https://www.techempower.com/benchmarks/\" target=\"_blank\" rel=\"noopener\">techempower</a>的成绩。结果<a href=\"https://twitter.com/julienviet\" target=\"_blank\" rel=\"noopener\">@julienviet</a>神回复我说”you should make a JMH microbenchmark to find out”，所以才有了这篇，利用JMH做Json序列化速度对比的文章。<br>这是测试结果：<br><img src=\"/media/15315228604634.jpg\" alt=\"-w783\"><br>可以看到<code>Vert.x</code>的Json序列化速度还是出类拔萃的，当然，其本质还是实用的<code>jackson</code><br>上代码：<br><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aruistar.benchmark.model.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jsoniter.output.JsonStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonOutput;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.annotations.Benchmark;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsonToStringBenchmark</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RunnerException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Options opt = <span class=\"keyword\">new</span> OptionsBuilder()</span><br><span class=\"line\">                .include(JsonToStringBenchmark.class.getSimpleName())</span><br><span class=\"line\">                .forks(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .warmupIterations(<span class=\"number\">2</span>)</span><br><span class=\"line\">                .measurementIterations(<span class=\"number\">3</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Runner(opt).run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    @Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonObjectToBuffer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).toBuffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonObjectToString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonBuilder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> JsonBuilder(<span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).getMap()).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsonOutput</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JsonOutput.toJson(<span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testJsoniter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        JsonStream.serialize(<span class=\"keyword\">new</span> User(<span class=\"string\">\"Hello, World!\"</span>, <span class=\"string\">\"tomcat\"</span>, <span class=\"number\">10</span>, <span class=\"string\">\"angular\"</span>, <span class=\"keyword\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark.model;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.json.JsonObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> <span class=\"keyword\">extends</span> <span class=\"title\">JsonObject</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">(String name, String username, <span class=\"keyword\">int</span> age, String title, <span class=\"keyword\">boolean</span> bool)</span> </span>&#123;</span><br><span class=\"line\">        put(<span class=\"string\">\"name\"</span>, name);</span><br><span class=\"line\">        put(<span class=\"string\">\"age\"</span>, age);</span><br><span class=\"line\">        put(<span class=\"string\">\"title\"</span>, title);</span><br><span class=\"line\">        put(<span class=\"string\">\"bool\"</span>, bool);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>源码地址，<a href=\"https://github.com/aruis/somebenchmark\" target=\"_blank\" rel=\"noopener\">https://github.com/aruis/somebenchmark</a></p>\n<p>需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤<br><figure class=\"highlight xl\"><table><tr><td class=\"code\"><pre><span class=\"line\">Do you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?</span><br><span class=\"line\">If yes, <span class=\"keyword\">is</span> annotation processing enabled <span class=\"built_in\">in</span> your IDE? You can find the checkbox under</span><br><span class=\"line\">P<span class=\"function\"><span class=\"title\">references</span> -&gt;</span> B<span class=\"function\"><span class=\"title\">uild</span>, Execution, Deployment -&gt;</span> C<span class=\"function\"><span class=\"title\">ompiler</span> -&gt;</span> Annotation Processors</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>参考[<a href=\"https://github.com/artyushov/idea-jmh-plugin/issues/13]\" target=\"_blank\" rel=\"noopener\">https://github.com/artyushov/idea-jmh-plugin/issues/13]</a></li>\n</ul>\n"},{"title":"用了docker之后性能损耗多少？","date":"2018-07-15T12:15:08.000Z","_content":"Docker的一大优势，就是拥有微乎其微的性能损耗，换来良好的硬件资源隔离效果。虽然各大厂商都在主要业务领域使用了Docker，已经从侧面表明Docker的性能损耗不是个什么问题。但是较真的同学，肯定还是想知道Docker到底有没有损耗呢，损耗多少。\n这里我用PostgreSQL数据库做个简单的对比测试。分别在同一台服务器的Docker内外个各装一个10.3版本的PostgreSQL。然后执行同一个SQL。SQL如下：\n```\nwith cte as ( select *\nFROM\n  (\n    VALUES (uuid_generate_v4(), 'xiaoming',10, '语文'),\n      (uuid_generate_v4(), 'xiaohong',12, '数学'),\n      (uuid_generate_v4(), 'xiaoli',11, '英语'),\n      (uuid_generate_v4(), 'xiaozhi',11, '英语'),\n      (uuid_generate_v4(), 'xiaoxin',11, '英语')\n  )\n    AS tmp (id, name,age, fav))\n\nselect array_to_json(array_agg(row_to_json(cte)))\nfrom cte;\n```\n因为不是从硬盘IO，所以这条SQL更贴近于CPU密集型的场景。压测功能是依托JMH开发的，源码已经上传至[https://github.com/aruis/somebenchmark/tree/sqlbench](https://github.com/aruis/somebenchmark/tree/sqlbench)，下面直接看结果：\n![-w567](/media/15316574043348.jpg)\n可以看到第一行的吞吐量，大概是第二行的95%，亦即是说，在我这个应用场景下，Docker有5%的性能损耗。\n应该可以给大家做个参考。","source":"_posts/用了docker之后性能损耗多少.md","raw":"---\ntitle: 用了docker之后性能损耗多少？\ndate: 2018-07-15 20:15:08\ncategories: 程序人生\ntags: \n    - Docker\n    - PostgreSQL\n---\nDocker的一大优势，就是拥有微乎其微的性能损耗，换来良好的硬件资源隔离效果。虽然各大厂商都在主要业务领域使用了Docker，已经从侧面表明Docker的性能损耗不是个什么问题。但是较真的同学，肯定还是想知道Docker到底有没有损耗呢，损耗多少。\n这里我用PostgreSQL数据库做个简单的对比测试。分别在同一台服务器的Docker内外个各装一个10.3版本的PostgreSQL。然后执行同一个SQL。SQL如下：\n```\nwith cte as ( select *\nFROM\n  (\n    VALUES (uuid_generate_v4(), 'xiaoming',10, '语文'),\n      (uuid_generate_v4(), 'xiaohong',12, '数学'),\n      (uuid_generate_v4(), 'xiaoli',11, '英语'),\n      (uuid_generate_v4(), 'xiaozhi',11, '英语'),\n      (uuid_generate_v4(), 'xiaoxin',11, '英语')\n  )\n    AS tmp (id, name,age, fav))\n\nselect array_to_json(array_agg(row_to_json(cte)))\nfrom cte;\n```\n因为不是从硬盘IO，所以这条SQL更贴近于CPU密集型的场景。压测功能是依托JMH开发的，源码已经上传至[https://github.com/aruis/somebenchmark/tree/sqlbench](https://github.com/aruis/somebenchmark/tree/sqlbench)，下面直接看结果：\n![-w567](/media/15316574043348.jpg)\n可以看到第一行的吞吐量，大概是第二行的95%，亦即是说，在我这个应用场景下，Docker有5%的性能损耗。\n应该可以给大家做个参考。","slug":"用了docker之后性能损耗多少","published":1,"updated":"2018-07-16T12:53:12.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjjz0b75g000tioxvl5tea1y6","content":"<p>Docker的一大优势，就是拥有微乎其微的性能损耗，换来良好的硬件资源隔离效果。虽然各大厂商都在主要业务领域使用了Docker，已经从侧面表明Docker的性能损耗不是个什么问题。但是较真的同学，肯定还是想知道Docker到底有没有损耗呢，损耗多少。<br>这里我用PostgreSQL数据库做个简单的对比测试。分别在同一台服务器的Docker内外个各装一个10.3版本的PostgreSQL。然后执行同一个SQL。SQL如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">with cte as ( <span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  (</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (uuid_generate_v4(), <span class=\"string\">'xiaoming'</span>,<span class=\"number\">10</span>, <span class=\"string\">'语文'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaohong'</span>,<span class=\"number\">12</span>, <span class=\"string\">'数学'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaoli'</span>,<span class=\"number\">11</span>, <span class=\"string\">'英语'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaozhi'</span>,<span class=\"number\">11</span>, <span class=\"string\">'英语'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaoxin'</span>,<span class=\"number\">11</span>, <span class=\"string\">'英语'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">    <span class=\"keyword\">AS</span> tmp (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>,age, fav))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> array_to_json(array_agg(row_to_json(cte)))</span><br><span class=\"line\"><span class=\"keyword\">from</span> cte;</span><br></pre></td></tr></table></figure></p>\n<p>因为不是从硬盘IO，所以这条SQL更贴近于CPU密集型的场景。压测功能是依托JMH开发的，源码已经上传至<a href=\"https://github.com/aruis/somebenchmark/tree/sqlbench\" target=\"_blank\" rel=\"noopener\">https://github.com/aruis/somebenchmark/tree/sqlbench</a>，下面直接看结果：<br><img src=\"/media/15316574043348.jpg\" alt=\"-w567\"><br>可以看到第一行的吞吐量，大概是第二行的95%，亦即是说，在我这个应用场景下，Docker有5%的性能损耗。<br>应该可以给大家做个参考。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Docker的一大优势，就是拥有微乎其微的性能损耗，换来良好的硬件资源隔离效果。虽然各大厂商都在主要业务领域使用了Docker，已经从侧面表明Docker的性能损耗不是个什么问题。但是较真的同学，肯定还是想知道Docker到底有没有损耗呢，损耗多少。<br>这里我用PostgreSQL数据库做个简单的对比测试。分别在同一台服务器的Docker内外个各装一个10.3版本的PostgreSQL。然后执行同一个SQL。SQL如下：<br><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">with cte as ( <span class=\"keyword\">select</span> *</span><br><span class=\"line\"><span class=\"keyword\">FROM</span></span><br><span class=\"line\">  (</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (uuid_generate_v4(), <span class=\"string\">'xiaoming'</span>,<span class=\"number\">10</span>, <span class=\"string\">'语文'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaohong'</span>,<span class=\"number\">12</span>, <span class=\"string\">'数学'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaoli'</span>,<span class=\"number\">11</span>, <span class=\"string\">'英语'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaozhi'</span>,<span class=\"number\">11</span>, <span class=\"string\">'英语'</span>),</span><br><span class=\"line\">      (uuid_generate_v4(), <span class=\"string\">'xiaoxin'</span>,<span class=\"number\">11</span>, <span class=\"string\">'英语'</span>)</span><br><span class=\"line\">  )</span><br><span class=\"line\">    <span class=\"keyword\">AS</span> tmp (<span class=\"keyword\">id</span>, <span class=\"keyword\">name</span>,age, fav))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> array_to_json(array_agg(row_to_json(cte)))</span><br><span class=\"line\"><span class=\"keyword\">from</span> cte;</span><br></pre></td></tr></table></figure></p>\n<p>因为不是从硬盘IO，所以这条SQL更贴近于CPU密集型的场景。压测功能是依托JMH开发的，源码已经上传至<a href=\"https://github.com/aruis/somebenchmark/tree/sqlbench\" target=\"_blank\" rel=\"noopener\">https://github.com/aruis/somebenchmark/tree/sqlbench</a>，下面直接看结果：<br><img src=\"/media/15316574043348.jpg\" alt=\"-w567\"><br>可以看到第一行的吞吐量，大概是第二行的95%，亦即是说，在我这个应用场景下，Docker有5%的性能损耗。<br>应该可以给大家做个参考。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjjz0b74n0000ioxvbqzqr1at","category_id":"cjjz0b74t0002ioxveix4cj4n","_id":"cjjz0b753000cioxvq1pxf65v"},{"post_id":"cjjz0b750000aioxv2az0zta2","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b759000iioxvfsr8695a"},{"post_id":"cjjz0b74r0001ioxvliiy8w3l","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75d000mioxvvoymk083"},{"post_id":"cjjz0b752000bioxvn5hu6zue","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75e000pioxv230me0ay"},{"post_id":"cjjz0b74v0004ioxvqclll6e9","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75i000uioxvf3ur3ohk"},{"post_id":"cjjz0b758000hioxvagslg0ya","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75i000wioxv5s60cu99"},{"post_id":"cjjz0b75b000lioxvtp9f5mbh","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75k000zioxv9jiur45t"},{"post_id":"cjjz0b74w0005ioxvxjb7a48b","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75l0011ioxvy3du58hf"},{"post_id":"cjjz0b75d000oioxv25bym3s8","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75l0012ioxvv99ets2w"},{"post_id":"cjjz0b75g000tioxvl5tea1y6","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75m0015ioxv071chab0"},{"post_id":"cjjz0b74y0006ioxvu9wk2c86","category_id":"cjjz0b74z0007ioxvl0kkndwe","_id":"cjjz0b75m0016ioxvxz8mymcs"},{"post_id":"cjjz0b755000fioxvckeilaxy","category_id":"cjjz0b75j000xioxvf6pwec48","_id":"cjjz0b75n0018ioxvg13cvlda"}],"PostTag":[{"post_id":"cjjz0b74n0000ioxvbqzqr1at","tag_id":"cjjz0b74v0003ioxvdsxqld2e","_id":"cjjz0b7500009ioxvnj8g2e0c"},{"post_id":"cjjz0b74r0001ioxvliiy8w3l","tag_id":"cjjz0b74z0008ioxvt231ts9a","_id":"cjjz0b756000gioxvbyapa9co"},{"post_id":"cjjz0b74v0004ioxvqclll6e9","tag_id":"cjjz0b754000eioxvvx5m11gp","_id":"cjjz0b75d000nioxv1ge2p793"},{"post_id":"cjjz0b75b000lioxvtp9f5mbh","tag_id":"cjjz0b74z0008ioxvt231ts9a","_id":"cjjz0b75g000sioxvzu9pat55"},{"post_id":"cjjz0b74w0005ioxvxjb7a48b","tag_id":"cjjz0b754000eioxvvx5m11gp","_id":"cjjz0b75i000vioxvhgw1r8f1"},{"post_id":"cjjz0b74y0006ioxvu9wk2c86","tag_id":"cjjz0b75f000rioxvhp74uc2m","_id":"cjjz0b75k0010ioxv2lphfa1o"},{"post_id":"cjjz0b750000aioxv2az0zta2","tag_id":"cjjz0b75k000yioxvuu3ip41o","_id":"cjjz0b75m0014ioxvy2ywxcxq"},{"post_id":"cjjz0b752000bioxvn5hu6zue","tag_id":"cjjz0b75l0013ioxvqhtwtm9h","_id":"cjjz0b75n0019ioxvuis2j438"},{"post_id":"cjjz0b758000hioxvagslg0ya","tag_id":"cjjz0b75m0017ioxvwhwz61v6","_id":"cjjz0b75o001cioxvajcw8l0n"},{"post_id":"cjjz0b758000hioxvagslg0ya","tag_id":"cjjz0b75n001aioxvg3e8otzk","_id":"cjjz0b75p001dioxvsue6pptd"},{"post_id":"cjjz0b758000hioxvagslg0ya","tag_id":"cjjz0b74z0008ioxvt231ts9a","_id":"cjjz0b75p001fioxvn7rq0iu4"},{"post_id":"cjjz0b75d000oioxv25bym3s8","tag_id":"cjjz0b75o001bioxvbhfslu2p","_id":"cjjz0b75p001gioxv4fnbum8d"},{"post_id":"cjjz0b75g000tioxvl5tea1y6","tag_id":"cjjz0b75p001eioxvceqoi1z9","_id":"cjjz0b75q001hioxvd1qg67ye"},{"post_id":"cjjz0b75g000tioxvl5tea1y6","tag_id":"cjjz0b754000eioxvvx5m11gp","_id":"cjjz0b75q001iioxvxl970mjr"}],"Tag":[{"name":"代理","_id":"cjjz0b74v0003ioxvdsxqld2e"},{"name":"gradle","_id":"cjjz0b74z0008ioxvt231ts9a"},{"name":"PostgreSQL","_id":"cjjz0b754000eioxvvx5m11gp"},{"name":"Vert.x","_id":"cjjz0b75f000rioxvhp74uc2m"},{"name":"Linux","_id":"cjjz0b75k000yioxvuu3ip41o"},{"name":"cas","_id":"cjjz0b75l0013ioxvqhtwtm9h"},{"name":"前端","_id":"cjjz0b75m0017ioxvwhwz61v6"},{"name":"vue","_id":"cjjz0b75n001aioxvg3e8otzk"},{"name":"Java","_id":"cjjz0b75o001bioxvbhfslu2p"},{"name":"Docker","_id":"cjjz0b75p001eioxvceqoi1z9"}]}}