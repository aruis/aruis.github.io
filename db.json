{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copyright.js","path":"js/copyright.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/copycode.js","path":"js/copycode.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/love.js","path":"js/love.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copycode.css","path":"css/copycode.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/search.css","path":"css/search.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/copyright.css","path":"css/copyright.css","modified":0,"renderable":1},{"_id":"source/media/15315228604634.jpg","path":"media/15315228604634.jpg","modified":0,"renderable":0},{"_id":"source/media/15316574043348.jpg","path":"media/15316574043348.jpg","modified":0,"renderable":0},{"_id":"source/media/15317042937460.jpg","path":"media/15317042937460.jpg","modified":0,"renderable":0},{"_id":"source/media/15317044049926.jpg","path":"media/15317044049926.jpg","modified":0,"renderable":0},{"_id":"source/media/15317048391668.jpg","path":"media/15317048391668.jpg","modified":0,"renderable":0},{"_id":"source/media/15317809896046.jpg","path":"media/15317809896046.jpg","modified":0,"renderable":0},{"_id":"source/media/15319616591142.jpg","path":"media/15319616591142.jpg","modified":0,"renderable":0},{"_id":"source/media/15319617008516.jpg","path":"media/15319617008516.jpg","modified":0,"renderable":0},{"_id":"source/media/15319627604059.jpg","path":"media/15319627604059.jpg","modified":0,"renderable":0},{"_id":"source/media/15326512660951.jpg","path":"media/15326512660951.jpg","modified":0,"renderable":0},{"_id":"source/media/15329969004233.jpg","path":"media/15329969004233.jpg","modified":0,"renderable":0},{"_id":"source/media/15329972711011.jpg","path":"media/15329972711011.jpg","modified":0,"renderable":0},{"_id":"source/media/15329976430336.jpg","path":"media/15329976430336.jpg","modified":0,"renderable":0},{"_id":"source/media/15329978378217.jpg","path":"media/15329978378217.jpg","modified":0,"renderable":0},{"_id":"source/media/15329983218004.jpg","path":"media/15329983218004.jpg","modified":0,"renderable":0},{"_id":"source/media/15329984643618.jpg","path":"media/15329984643618.jpg","modified":0,"renderable":0},{"_id":"source/media/15329985590089.jpg","path":"media/15329985590089.jpg","modified":0,"renderable":0},{"_id":"source/media/15329987110873.jpg","path":"media/15329987110873.jpg","modified":0,"renderable":0},{"_id":"source/media/15330845808519.jpg","path":"media/15330845808519.jpg","modified":0,"renderable":0},{"_id":"source/media/15329990816786.jpg","path":"media/15329990816786.jpg","modified":0,"renderable":0},{"_id":"source/media/15330848868005.jpg","path":"media/15330848868005.jpg","modified":0,"renderable":0},{"_id":"source/media/15329989448215.jpg","path":"media/15329989448215.jpg","modified":0,"renderable":0},{"_id":"source/media/15330861199315.jpg","path":"media/15330861199315.jpg","modified":0,"renderable":0},{"_id":"source/media/15330878032471.jpg","path":"media/15330878032471.jpg","modified":0,"renderable":0},{"_id":"source/media/15331709707728.jpg","path":"media/15331709707728.jpg","modified":0,"renderable":0},{"_id":"source/media/15330876281185.jpg","path":"media/15330876281185.jpg","modified":0,"renderable":0},{"_id":"source/media/15331719609935.jpg","path":"media/15331719609935.jpg","modified":0,"renderable":0},{"_id":"source/media/15331926156740.jpg","path":"media/15331926156740.jpg","modified":0,"renderable":0},{"_id":"source/media/15331926585276.jpg","path":"media/15331926585276.jpg","modified":0,"renderable":0},{"_id":"source/media/15331929892802.jpg","path":"media/15331929892802.jpg","modified":0,"renderable":0},{"_id":"source/media/15331930513697.jpg","path":"media/15331930513697.jpg","modified":0,"renderable":0},{"_id":"source/media/15331709094483.jpg","path":"media/15331709094483.jpg","modified":0,"renderable":0},{"_id":"source/media/15331936413004.jpg","path":"media/15331936413004.jpg","modified":0,"renderable":0},{"_id":"source/media/15345735455740.jpg","path":"media/15345735455740.jpg","modified":0,"renderable":0},{"_id":"source/media/15331936107582.jpg","path":"media/15331936107582.jpg","modified":0,"renderable":0},{"_id":"source/media/15345741245811.jpg","path":"media/15345741245811.jpg","modified":0,"renderable":0},{"_id":"source/media/15354179433179.jpg","path":"media/15354179433179.jpg","modified":0,"renderable":0},{"_id":"source/media/15361965426250.jpg","path":"media/15361965426250.jpg","modified":0,"renderable":0},{"_id":"source/media/15361968542946.jpg","path":"media/15361968542946.jpg","modified":0,"renderable":0},{"_id":"source/media/15363162820957.jpg","path":"media/15363162820957.jpg","modified":0,"renderable":0},{"_id":"source/media/15363168799795.jpg","path":"media/15363168799795.jpg","modified":0,"renderable":0},{"_id":"source/media/15363698300629.jpg","path":"media/15363698300629.jpg","modified":0,"renderable":0},{"_id":"source/media/15363701562662.jpg","path":"media/15363701562662.jpg","modified":0,"renderable":0},{"_id":"source/media/15364987364827.jpg","path":"media/15364987364827.jpg","modified":0,"renderable":0},{"_id":"source/media/15364989242348.jpg","path":"media/15364989242348.jpg","modified":0,"renderable":0},{"_id":"source/media/15363701237412.jpg","path":"media/15363701237412.jpg","modified":0,"renderable":0},{"_id":"source/media/15365022296404.jpg","path":"media/15365022296404.jpg","modified":0,"renderable":0},{"_id":"source/media/15375090092852.jpg","path":"media/15375090092852.jpg","modified":0,"renderable":0},{"_id":"source/media/15375096548094.jpg","path":"media/15375096548094.jpg","modified":0,"renderable":0},{"_id":"source/media/15380151275481.jpg","path":"media/15380151275481.jpg","modified":0,"renderable":0},{"_id":"source/media/15380172675854.jpg","path":"media/15380172675854.jpg","modified":0,"renderable":0},{"_id":"source/media/15380173560777.jpg","path":"media/15380173560777.jpg","modified":0,"renderable":0},{"_id":"source/media/15363699317160.jpg","path":"media/15363699317160.jpg","modified":0,"renderable":0},{"_id":"source/media/15380174874853.jpg","path":"media/15380174874853.jpg","modified":0,"renderable":0},{"_id":"source/media/15380177660522.jpg","path":"media/15380177660522.jpg","modified":0,"renderable":0},{"_id":"source/media/15380180870297.jpg","path":"media/15380180870297.jpg","modified":0,"renderable":0},{"_id":"source/media/15380182351986.jpg","path":"media/15380182351986.jpg","modified":0,"renderable":0},{"_id":"source/media/15380183216923.jpg","path":"media/15380183216923.jpg","modified":0,"renderable":0},{"_id":"source/media/DSC04458.jpg","path":"media/DSC04458.jpg","modified":0,"renderable":0},{"_id":"source/media/FullSizeRender.jpeg","path":"media/FullSizeRender.jpeg","modified":0,"renderable":0},{"_id":"source/media/IMG_6764.jpg","path":"media/IMG_6764.jpg","modified":0,"renderable":0},{"_id":"source/media/IMG_7284.jpg","path":"media/IMG_7284.jpg","modified":0,"renderable":0},{"_id":"source/media/IMG_7350.jpg","path":"media/IMG_7350.jpg","modified":0,"renderable":0},{"_id":"source/media/IMG_7384.jpg","path":"media/IMG_7384.jpg","modified":0,"renderable":0},{"_id":"source/media/IMG_7610.png","path":"media/IMG_7610.png","modified":0,"renderable":0},{"_id":"source/media/IMG_7611.png","path":"media/IMG_7611.png","modified":0,"renderable":0},{"_id":"source/media/IMG_7612.png","path":"media/IMG_7612.png","modified":0,"renderable":0},{"_id":"source/media/IMG_7613.png","path":"media/IMG_7613.png","modified":0,"renderable":0},{"_id":"source/media/ORG_DSC04575.jpg","path":"media/ORG_DSC04575.jpg","modified":0,"renderable":0},{"_id":"source/media/ORG_DSC04583.jpg","path":"media/ORG_DSC04583.jpg","modified":0,"renderable":0},{"_id":"source/media/ORG_DSC04585.jpg","path":"media/ORG_DSC04585.jpg","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-04-27 11.41.45.png","path":"media/屏幕快照 2018-04-27 11.41.45.png","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-07-16 09.20.59.png","path":"media/屏幕快照 2018-07-16 09.20.59.png","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-09-11 09.16.40.png","path":"media/屏幕快照 2018-09-11 09.16.40.png","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-07-16 09.22.56.png","path":"media/屏幕快照 2018-07-16 09.22.56.png","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-07-19 08.53.26.png","path":"media/屏幕快照 2018-07-19 08.53.26.png","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-09-11 10.09.15.png","path":"media/屏幕快照 2018-09-11 10.09.15.png","modified":0,"renderable":0},{"_id":"source/media/粘贴的图片2018_8_18_14_23.png","path":"media/粘贴的图片2018_8_18_14_23.png","modified":0,"renderable":0},{"_id":"source/media/粘贴的图片2018_8_18_14_28.png","path":"media/粘贴的图片2018_8_18_14_28.png","modified":0,"renderable":0},{"_id":"source/media/粘贴的图片2018_8_18_14_32.png","path":"media/粘贴的图片2018_8_18_14_32.png","modified":0,"renderable":0},{"_id":"source/media/粘贴的图片2018_8_18_14_39.png","path":"media/粘贴的图片2018_8_18_14_39.png","modified":0,"renderable":0},{"_id":"source/media/屏幕快照 2018-09-11 09.19.37.png","path":"media/屏幕快照 2018-09-11 09.19.37.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.MWebMetaData/setting.json","hash":"78d0118bf10ff6987e1b75c1cca0e73e42c00dbe","modified":1544262683000},{"_id":"source/media/15316574043348.jpg","hash":"a05a47030c203ce8a4aae47bf947bd5b21215fa7","modified":1532394768000},{"_id":"source/about/index.md","hash":"0de3d0dc0bcbc0dd1cd1864f910db36430554c6d","modified":1647611285006},{"_id":"source/media/15317042937460.jpg","hash":"0d72a946895acbfe839b45cbd02d9d7dc8ec4432","modified":1532394772000},{"_id":"source/media/15317044049926.jpg","hash":"8b4a7136e2d3637d0ac19331324e5d4f079952b4","modified":1532394774000},{"_id":"source/media/15317809896046.jpg","hash":"fd4d15b1dab93ab35a8b61a9cfe92922043f0076","modified":1532394772000},{"_id":"source/media/15317048391668.jpg","hash":"4c7c90e196fcf6cf2e7f580e3440c29b4f938427","modified":1532394768000},{"_id":"source/media/15315228604634.jpg","hash":"9347ca20df0e5f73eb8cd1a647a233d738aea884","modified":1532394768000},{"_id":"source/media/15326512660951.jpg","hash":"31033329798034dfa28ec9e6b9f664cd6c5f3bc8","modified":1532651300000},{"_id":"source/media/15329969004233.jpg","hash":"bf03679cac233dcbaa19bda447b7495371f92c37","modified":1532999306000},{"_id":"source/media/15329972711011.jpg","hash":"c645949b7882176334fdd50105b715ce6b0fdcc5","modified":1532999306000},{"_id":"source/media/15319617008516.jpg","hash":"4b231a1e789abb48d403832d8a4b721c4087e186","modified":1532394774000},{"_id":"source/media/15319627604059.jpg","hash":"fac9953c6787990ba056be2ba2e2949621eb68ad","modified":1532394768000},{"_id":"source/media/15329978378217.jpg","hash":"87aa4323b3eb94412985d948c9eecdcd6b990697","modified":1532999308000},{"_id":"source/media/15329983218004.jpg","hash":"ed02db96340f79e687a031375ac1fd9e9c86729a","modified":1532999306000},{"_id":"source/media/15329984643618.jpg","hash":"c72583be11040bdadd2e8cab0b3963f37512521d","modified":1532999306000},{"_id":"source/media/15330845808519.jpg","hash":"890d5505996da93293621d79e11a3cc6d85a3180","modified":1533087836000},{"_id":"source/media/15329985590089.jpg","hash":"851d2bd742bc4902db3e067a1973c0954b4770b4","modified":1532999306000},{"_id":"source/media/15329987110873.jpg","hash":"4ca4582e17ddc097e45b5befcea112b36b37ec90","modified":1532999306000},{"_id":"source/media/15329990816786.jpg","hash":"cd779f78e9d0d7782aee197730c64076350b2041","modified":1532999308000},{"_id":"source/media/15330848868005.jpg","hash":"3734c8ed6e66a1c101a293743ec405b0f8a25dff","modified":1533087836000},{"_id":"source/media/15329976430336.jpg","hash":"56d9991027bb4f03364db67bb7acb56214b0f19b","modified":1532999306000},{"_id":"source/media/15330878032471.jpg","hash":"fc31a65d2233f90084d5a6efaafd89a134aa1cef","modified":1533087836000},{"_id":"source/media/15330876281185.jpg","hash":"74f2107c62e2ac6d8559284ab8bdd501f0bb3e10","modified":1533087836000},{"_id":"source/media/15319616591142.jpg","hash":"2d25d7e207a480c5ad326b37b3951f4cc367f1c1","modified":1532394768000},{"_id":"source/media/15331709707728.jpg","hash":"9beb3980c696c1d07808afc2a598ffb594cbbbf3","modified":1533195476000},{"_id":"source/media/15331926156740.jpg","hash":"70a056034db68c4fdaaa1a49c7fa867a2df6a72f","modified":1533195476000},{"_id":"source/media/15329989448215.jpg","hash":"cd8d5f4e30a3629cc5dcb1866f4a65712da82d0e","modified":1532999308000},{"_id":"source/media/15331926585276.jpg","hash":"1ce73446647c81d26b902bf227b6a027c70a091d","modified":1533195476000},{"_id":"source/media/15331930513697.jpg","hash":"8379c158c84e42e0a990e2b13e4c302e979ea3b1","modified":1533195476000},{"_id":"source/media/15331719609935.jpg","hash":"9da344ecbf29b75298b24d008320eb244f20ada1","modified":1533195476000},{"_id":"source/media/15331929892802.jpg","hash":"45ac6586d109516781efd0206659ff7720d3303f","modified":1533195476000},{"_id":"source/media/15331709094483.jpg","hash":"ff9b4355f01ebbe35f68136a3918663c194db5a1","modified":1533195476000},{"_id":"source/media/15331936107582.jpg","hash":"06b2c07a6e874f055cd40e1cc9e55f5806db7aff","modified":1533195476000},{"_id":"source/media/15331936413004.jpg","hash":"a3af3bf80b1d573e08726036d8dc5f30d327e430","modified":1533195476000},{"_id":"source/media/15345741245811.jpg","hash":"b33baef8f9d96fa3bffaef5b8dd72819ed9b4b17","modified":1534575192000},{"_id":"source/media/15361965426250.jpg","hash":"1531fe1674315a79d38bca3b0b02e8b0e2ff5622","modified":1536196542000},{"_id":"source/media/15361968542946.jpg","hash":"a8aa94eff599c34e52bcd842f7ba421d2aa2d990","modified":1536196854000},{"_id":"source/media/15363698300629.jpg","hash":"04d694864cea44de4c6c874224d99312e594783e","modified":1536370200000},{"_id":"source/media/15363699317160.jpg","hash":"3b2ae91f86390d8eed51d897d9765d5c0ff076bc","modified":1536370200000},{"_id":"source/media/15380151275481.jpg","hash":"39cc67447096088ca6025f56831862b1c32b4ed1","modified":1538018872000},{"_id":"source/media/15365022296404.jpg","hash":"b314f9fb8220df62e378d6c292bbdd845d76a108","modified":1536502230000},{"_id":"source/media/15380173560777.jpg","hash":"72b476ec9b3b0440bb15c0238948b5739ba91144","modified":1538018872000},{"_id":"source/media/15380172675854.jpg","hash":"cc78ca467e50c19c9dead08d4cdf9a76ddaa3359","modified":1538018872000},{"_id":"source/media/15380182351986.jpg","hash":"c8322dfcfd53dfdac5be1c503b752e7e61a05e2d","modified":1538018872000},{"_id":"source/media/15380183216923.jpg","hash":"f489f65adfc07d0cbd3ef6d8e49aee7ae69aff40","modified":1538018872000},{"_id":"source/media/15380177660522.jpg","hash":"a8865f0111a339ae6b18de6ebb6d664c81d077f3","modified":1538018872000},{"_id":"source/media/IMG_7610.png","hash":"5fe4d927c70527b3e211fdbe6f963489fd92420a","modified":1537154578000},{"_id":"source/media/15380174874853.jpg","hash":"a9a2c27e5b5646855b07fbd2adbdc5ca2c24ee52","modified":1538018872000},{"_id":"source/media/IMG_7612.png","hash":"753766da54e035297aa825c510a9d2ef785b60be","modified":1537154582000},{"_id":"source/media/IMG_7613.png","hash":"36331134c4dd943bd574f0304f8bc259030b4adc","modified":1537154934000},{"_id":"source/media/IMG_7611.png","hash":"f1f1d87f23fa03ac18c88ebb03c50b0f6d084ab2","modified":1537154582000},{"_id":"source/media/屏幕快照 2018-07-16 09.22.56.png","hash":"80b124d2e120cead704697e1708d15a6c0187971","modified":1532394778000},{"_id":"source/media/屏幕快照 2018-04-27 11.41.45.png","hash":"03306b8e3b4b575cbd2445d6ef476ef1f6862f7f","modified":1532394788000},{"_id":"source/media/粘贴的图片2018_8_18_14_23.png","hash":"58c1fd9e7454b31c93da1ee1fa08c9c547d36d8c","modified":1534575224000},{"_id":"source/media/粘贴的图片2018_8_18_14_32.png","hash":"91612acb6680be6d57f62df8793b54af44eeefd2","modified":1534575244000},{"_id":"source/media/粘贴的图片2018_8_18_14_39.png","hash":"d324f88fad2612c6ab1e01adb2a94a3126a9014c","modified":1534575246000},{"_id":"source/_posts/CentOS_Shadowsocks.md","hash":"c0391604c6d58c312d13cb20804b165f391ac3a5","modified":1540454410000},{"_id":"source/_posts/Geb.md","hash":"6717052c0637825ac70708ccc93a51f1d1ae16cd","modified":1533429326000},{"_id":"source/_posts/CompletableFuture_something.md","hash":"f19984cae5b2aace3ee78ee10cf565f2592d43b7","modified":1536746406000},{"_id":"source/media/屏幕快照 2018-07-19 08.53.26.png","hash":"592eb2b93bb3fa0f485fb8ef9fbbca2622c2716b","modified":1532394778000},{"_id":"source/_posts/IntelliJ-IDEA_SQL-Explain.md","hash":"32ccbd561d8f86a9434d778a215db9ebdb2220f6","modified":1532999144000},{"_id":"source/_posts/IntelliJ-IDEA_hot_keys.md","hash":"09123445e5328b22b50444d844344723ea6aa255","modified":1532996122000},{"_id":"source/_posts/Google_Trends.md","hash":"9ce871034438c46a119a8002114780e11b8ecbc9","modified":1536370178000},{"_id":"source/_posts/IntelliJ-IDEA_Winodws_Gradle_garbled.md","hash":"63518248a976aa59ac00837fd3cd77cf5cba6560","modified":1532996122000},{"_id":"source/_posts/IntelliJ_IDEA_tips.md","hash":"dd14162db7fd9b636d0cc36f95a5cb20b342a572","modified":1536316886000},{"_id":"source/_posts/Linux_firewall-cmd.md","hash":"5cde2b110682244d09ed3b3f2f2fd28288f773df","modified":1534640544000},{"_id":"source/_posts/Linux_ln.md","hash":"644d3ae654d1ce41e9aaab5b05554ed7abbe842c","modified":1533712188000},{"_id":"source/_posts/MySQL_column_default_current_timestamp.md","hash":"e323e47960e48a3c94a94006ae4685840592b723","modified":1539590112000},{"_id":"source/_posts/PostgreSQL-python-function.md","hash":"0171593c6cde5f2dab547d9e6f84253b91e8f782","modified":1548647185000},{"_id":"source/_posts/Parental_responsibilities_and_obligations.md","hash":"8377b53ee34d97c416065f14bd457f4d02c12757","modified":1534123346000},{"_id":"source/_posts/PostgreSQL_auto_modify_defaults_2.md","hash":"9c55b7611be1095c4369d53ca09eb622e4bd55b8","modified":1535246136000},{"_id":"source/_posts/PostgreSQL-rowsecurity.md","hash":"7e29efcd0bf06df298ee18187f7c72d99078f466","modified":1538119482000},{"_id":"source/_posts/PostgreSQL_alert_foreign_server.md","hash":"c4a75d9e7a6834856741b5968f83ccadb4111778","modified":1533862860000},{"_id":"source/_posts/PostgreSQL_distinct-on.md","hash":"afc12926c40b339fccc762c9e38bb714cfb138a9","modified":1533778100000},{"_id":"source/_posts/PostgreSQL_doc_search.md","hash":"2af60cae97683ca775957d7e0663d809e0e3b11a","modified":1537509786000},{"_id":"source/_posts/PostgreSQL_drop_database_other-session-using-the-database.md","hash":"a0a9976686e1c10a2ec8195b86848e56e4c5b3af","modified":1606381905303},{"_id":"source/_posts/PostgreSQL_indexs.md","hash":"f5e2f38ae08ca5b8701aff9058cf694260e53e63","modified":1533264700000},{"_id":"source/_posts/PostgreSQL_select_varchar_like_front_.md","hash":"3c628ebf8d63d48402bd74ea9b31e4aa0ed45238","modified":1533262332000},{"_id":"source/_posts/PostgreSQL_select_varchar_like_index.md","hash":"f24918553f72e11a497edb07062fece07edf0085","modified":1533089588000},{"_id":"source/_posts/PostgreSQL_auto_modify_defaults_1.md","hash":"6adb649e36ee41093b912195a7b76c684a2c3ba3","modified":1534376422000},{"_id":"source/_posts/PostgreSQL_rename_notice.md","hash":"a09cbd84b56d72fb6ae5e0eb0b2f886bb3ea39da","modified":1537845706000},{"_id":"source/_posts/Safari12_install_safariextz.md","hash":"d94471852d11fa5bc23e4ef83f2fdb00c2191fc5","modified":1538018664000},{"_id":"source/_posts/Vert-x_redeploy.md","hash":"44e74e8452a1c62ed49d1fbb3631ce8ab725fc3d","modified":1536714308000},{"_id":"source/_posts/cas_show_username_in_login_success_page.md","hash":"d1e8134fab34febb09774c433348cfeb5114afad","modified":1532049128000},{"_id":"source/_posts/PostgreSQL_with_recursive.md","hash":"8b36033f58b5ea79acab1999fec0a78dfef59dc2","modified":1534302390000},{"_id":"source/_posts/break_through_baiduwangpan.md","hash":"5b9db9e0fe9fc139dd667235f626eb1cfc87f414","modified":1536198926000},{"_id":"source/_posts/certbot-auto_nginx.md","hash":"4faa4c310bf07d1d6d11a15dd982d118b03ff82b","modified":1537340034000},{"_id":"source/_posts/deep_learning_start_matrix_dot.md","hash":"76d402eedb391a6a728a285bb9bda7b6dd14fef5","modified":1537264358000},{"_id":"source/_posts/PostgreSQL_show_SQL_logs.md","hash":"1bffc91d90039db1e519fd4b1e00fc23728826e4","modified":1534899362000},{"_id":"source/_posts/defect_jdbc_postgresql.md","hash":"2cbc2e6c9ab647b0e20fa7a43e9385bd571c4692","modified":1534985652000},{"_id":"source/_posts/cordova_plugin_gradle.md","hash":"2f3e2c51bfea504b8f55df4012725fd123b237a9","modified":1533520938000},{"_id":"source/_posts/autovacuum-analyze-scale-factor.md","hash":"e3fb97ddfd1f0f3038ba0d5fbcb768db6013ca00","modified":1606381886573},{"_id":"source/_posts/eight_years_girl.md","hash":"c11a68f6b9f8ee63db3803be368ca3c36ed28e53","modified":1535720032000},{"_id":"source/_posts/fastdfs_docker.md","hash":"3027a3c084118dfb180a839ccf202aad72c39dba","modified":1548123906000},{"_id":"source/_posts/grab_a_ticket_use_geb.md","hash":"0e9a601c96300a412373b9e94b00d6ab04c5188e","modified":1533430280000},{"_id":"source/_posts/gradle_task_use_ssh.md","hash":"7a1aaaa7f8cd817f0e11d289b535919ed81e7842","modified":1536714278000},{"_id":"source/_posts/gradle_plugin_download_error.md","hash":"d2450cb510fa2eb920ccd311df70aefe9427cd76","modified":1536046212000},{"_id":"source/_posts/gradle_build_vue.md","hash":"df26c98e6b03bc15d89f286cd180280d98f8cbd8","modified":1531878148000},{"_id":"source/_posts/github-pull-request.md","hash":"e90137d599f3f38b6c20d7372b57d1e9bfe5c061","modified":1534575558000},{"_id":"source/_posts/groovy-sql-SQL-in-spring-boot.md","hash":"8ed4411b66a5faf491a45e2a76f972294e0e8473","modified":1535514036000},{"_id":"source/_posts/groovy_regular.md","hash":"f4fcb08e480bde828ea2b70d3bb7b12521f1f626","modified":1534819932000},{"_id":"source/_posts/ios12_close_In-App_Purchase.md","hash":"313a35707544ef49ff63eed5c160f99bde0dad64","modified":1537154944000},{"_id":"source/_posts/iTerm_best_practices.md","hash":"f5fc1dfe7755df5616371465beee6b12dd941258","modified":1536631844000},{"_id":"source/_posts/groovy_return_in_each.md","hash":"7ec14f537fbe6d09ccfbef625a2116565d8bc283","modified":1536569312000},{"_id":"source/_posts/javalin.md","hash":"f6f244636bd19e3ed0d2aefa4ba388e9fff086c7","modified":1535087386000},{"_id":"source/_posts/jmh.md","hash":"21aacf11c167192a787af68eb86ff030c706645d","modified":1531745592000},{"_id":"source/_posts/linux_mount.md","hash":"96d67f383b43ff1422be5daf8ca3ceda7ddbc357","modified":1532477882000},{"_id":"source/_posts/groovy_validating_form_on dynamic_rules.md","hash":"6f4b46ee0d7c3e0bf1748e99510462d5a9ec681b","modified":1550654577000},{"_id":"source/_posts/mazhuang-jiawang-xuzhou.md","hash":"c679d90f8d737b55bd36d16e408f16de253a6be2","modified":1538289678000},{"_id":"source/_posts/linux_ssh_key.md","hash":"9130cafb31e8621567c0e93e23ad8adea32d0168","modified":1532478498000},{"_id":"source/_posts/macos_bootable_usb.md","hash":"9fd781f1ebfdc88bc65f049d788d91a86fc58a29","modified":1532651278000},{"_id":"source/_posts/lot_of_seq_scan_in_postgresql.md","hash":"4f7dccceb9a56b312c63aeb3b882c813736be953","modified":1551076035000},{"_id":"source/_posts/my_luancher_in_vertx.md","hash":"b343cf82f41b74abca5c62178b84ad74449daed0","modified":1534031618000},{"_id":"source/_posts/mysql-dump-restore.md","hash":"7848bab55a2e763982e0c3552dda247f507f767c","modified":1539075250000},{"_id":"source/_posts/java_is_still_free.md","hash":"d723f4e1469221c3deb7b1b7d44170c112130f2f","modified":1537926966000},{"_id":"source/_posts/non-designers-design-book.md","hash":"f87e2139993fba818812a5647f54894d089bda5d","modified":1535594030000},{"_id":"source/_posts/mosh.md","hash":"7e29619d29728e6ea498a80aae5b5264f52f5076","modified":1535155116000},{"_id":"source/_posts/pg_cron_and_materialized_view.md","hash":"f48a64f948f17d9b7f397c95aa16e2e08f61f166","modified":1533943636000},{"_id":"source/_posts/nginx_rewrite.md","hash":"241e25d215d00f119025a5779e0e5b3ef1f76bab","modified":1537431514000},{"_id":"source/_posts/password_more_than_4_char_in_macos.md","hash":"405cc4092984697cd08fb074035698bd93bddd48","modified":1544263229000},{"_id":"source/_posts/postgresql_schema_and_search_path.md","hash":"84552758579dc9ca77aa87ae79d75519ce6e4ce2","modified":1535247518000},{"_id":"source/_posts/pg_stat_statements.md","hash":"57b9f52e28ab6d071c9e4604884e6d109807c37e","modified":1604038628000},{"_id":"source/_posts/postgres_select_total_subtotal_one_sql.md","hash":"6afdb97aab6f7120f82d0fe711b638fddcf6f58c","modified":1532255530000},{"_id":"source/_posts/postgresql_select_array.md","hash":"b7f03197eaf23af5b6368d78efb54086143a2913","modified":1531745592000},{"_id":"source/_posts/postgres_table_disk_used_order.md","hash":"e8c068f41bd9c1a7fec697b9722f4f6ed6bb8299","modified":1605488278000},{"_id":"source/_posts/plv8_in_postgresql.md","hash":"cfa86dfbf499b2b0f7dd3769c6deeaf2ed9be1c3","modified":1605487781000},{"_id":"source/_posts/reactive-pg-client_notify.md","hash":"8815a16ff30328adea0287ca79a40e4b9621d002","modified":1537010140000},{"_id":"source/_posts/postgrest.md","hash":"a736ebe199c740033384005999b6bb3f9a7154bc","modified":1539158748000},{"_id":"source/_posts/postgresql_ execute_an_anonymous_codeblock.md","hash":"2c5c7170291f3761b4c244ce3d96702a33693972","modified":1551233053000},{"_id":"source/_posts/separator_in_java.md","hash":"ecf21b7d18c5870e83d7514a6dfb0542892a3293","modified":1534210902000},{"_id":"source/_posts/reactive-pg-client_start.md","hash":"fa82a38108d266355f16b02dc02bf4998f162f00","modified":1536892524000},{"_id":"source/_posts/submodule_in_git.md","hash":"42ab2a0f6bae066492f5f3899ca5633bca6ad274","modified":1537759756000},{"_id":"source/_posts/ssh_chinese_garbled.md","hash":"4136bbcb85b41da9e6424a79e198bb047fc2f05f","modified":1535857830000},{"_id":"source/_posts/sourceCompatibility_and_targetCompatibility_in_gradle.md","hash":"6e6df10ce43bd53c44ac72579fe1b0df475a35e6","modified":1535346098000},{"_id":"source/_posts/timezone_in_docker.md","hash":"f13c1c12b7bd8012e12794af111094b963ddc54f","modified":1532912094000},{"_id":"source/_posts/tomcat_url_chinese_garbled.md","hash":"29e974cb517076b9f4b083ca6dcd5b3ef1305eda","modified":1532828042000},{"_id":"source/_posts/transaction_in_reactive-pg-client.md","hash":"3cef658f226f3cc8ae94aec4ffbe9f10e724cd39","modified":1537060206000},{"_id":"source/_posts/vertx_async_to_sync.md","hash":"a3b22b1be2d3c756a9791d2534dc9b75162ff1a0","modified":1536720004000},{"_id":"source/_posts/uninstall_jdk_in_macos.md","hash":"c26802c88bce875d209cc4d48b991c7d0a09cda8","modified":1543364570000},{"_id":"source/_posts/vertx_demo_2019.md","hash":"1e8dd45a7797cda0b90583fc62948458989535f7","modified":1551333039000},{"_id":"source/_posts/vim_note.md","hash":"1a9bc1412cdacdae81468036fb844892681cec7e","modified":1535946678000},{"_id":"source/_posts/vertx_example_contributors.md","hash":"346c911a604f07d8c3003908b98c4974feaf1ee3","modified":1535418226000},{"_id":"source/_posts/vertx_unit_test.md","hash":"b2484c00955275442ba47ca3814496c14684febd","modified":1536805630000},{"_id":"source/_posts/xingyi-malinghe.md","hash":"a431ed7100775b4c245bc084e0044ab1af7640ac","modified":1534721830000},{"_id":"source/_posts/xuzhou_xiari.md","hash":"7ab8d61398354e3e3477f1a25b62e5c10676e44b","modified":1532391690000},{"_id":"source/_posts/ubuntu_show_soft_info.md","hash":"554ee7dc5eb98b23309fcdb7476b9cf41f5c8060","modified":1536110382000},{"_id":"source/media/15330861199315.jpg","hash":"fa2ac49e435260df0ca536ccfaa75a1e647dc9bf","modified":1533087836000},{"_id":"source/media/15363168799795.jpg","hash":"5ef900c9117007b1028ac1ca03b246eb28b036c2","modified":1536316898000},{"_id":"source/media/15363701562662.jpg","hash":"dbe3f507f7f27fc0bd5c6f47bf8a0c133c2a9014","modified":1536370200000},{"_id":"source/media/15363701237412.jpg","hash":"470dac7cb609f0960f3d188930b5dad9a5ae95b0","modified":1536370200000},{"_id":"source/media/15375096548094.jpg","hash":"d506f67189a900d1ce55ab8b5ba74bffea4abdf1","modified":1537509798000},{"_id":"source/media/15380180870297.jpg","hash":"9875251b25a38f29edd4ae4a4a722eed4712511a","modified":1538018872000},{"_id":"source/media/15375090092852.jpg","hash":"0a5266ec780fe46a3f5707941ec799b15508a54b","modified":1537509798000},{"_id":"source/media/IMG_6764.jpg","hash":"411d432c5487fc26e8dfcdde01671b78e88a1ab6","modified":1537264242000},{"_id":"source/media/DSC04458.jpg","hash":"2a2210b14567b45e9da2c82ab9e6fa86902babbc","modified":1532392406000},{"_id":"source/media/FullSizeRender.jpeg","hash":"c724055ecfc8332c8052af74d945a5fe5521626d","modified":1535719298000},{"_id":"source/media/屏幕快照 2018-09-11 09.16.40.png","hash":"3f6b1ff02e0459a490303aea5f7ea69c620cfabe","modified":1536631900000},{"_id":"source/media/屏幕快照 2018-07-16 09.20.59.png","hash":"c47c644a546de183845a61278d13bd644ed0d0a1","modified":1532394780000},{"_id":"source/media/屏幕快照 2018-09-11 10.09.15.png","hash":"6f974d64c0914e56d2259580ac0ce4b09aa22071","modified":1536631904000},{"_id":"source/media/粘贴的图片2018_8_18_14_28.png","hash":"dd9acff01b76b99712c1fd7f736602403cace645","modified":1534575258000},{"_id":"source/media/屏幕快照 2018-09-11 09.19.37.png","hash":"3c6ee8e36a36ad87f921b5525a2e41417c16f32a","modified":1536631904000},{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1647595833438},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1647595833438},{"_id":"themes/maupassant/layout/archive.pug","hash":"749028e57a2eaad8c92ce2a2426c98605ab746a7","modified":1647595833445},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1647595833438},{"_id":"themes/maupassant/README.md","hash":"8cc8e522e7b0b9bf41bfe54f447213737134370b","modified":1647595833439},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"80995eadfd89ee9aa36f4672f8d405e03f13af15","modified":1647595833445},{"_id":"themes/maupassant/layout/index.pug","hash":"162fe3fa695e8bea5a77916aefbb7ce98cd227bf","modified":1647595833445},{"_id":"themes/maupassant/layout/base.pug","hash":"bf8c6eda72f9190dd2d46065924840958c57619e","modified":1647595833445},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1647595833446},{"_id":"themes/maupassant/layout/tagcloud.pug","hash":"4aa57b41e919a12b6d7691cd4a36d3a531b55fcb","modified":1647595833445},{"_id":"themes/maupassant/layout/page.pug","hash":"a285a76950bb1b91f482ef9c473472bd0ede601d","modified":1647595833445},{"_id":"themes/maupassant/layout/post.pug","hash":"9fbbc4ca1394f99dccdd972c3db9105d3cf5066e","modified":1647595833445},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1647595833446},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1647595833445},{"_id":"themes/maupassant/_config.yml","hash":"ec7938ee0c96e3d7809626f693a6066ae1bc745a","modified":1647611384570},{"_id":"themes/maupassant/languages/en.yml","hash":"9c979a2f107536399bbe2be572c2d0bebcdd9d95","modified":1647595833439},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1647595833440},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1647595833440},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1647595833440},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"e9747f9b3ec1314a3cae44a9a90e7649af739633","modified":1647595833440},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1647595833440},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"aefb67bac8fcef9cb3027f8622923b392f79f51e","modified":1647595833441},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1647595833439},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1647595833441},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"78cc1794a3ce3e186c462c1a70f097d0c05cd210","modified":1647595833440},{"_id":"themes/maupassant/layout/_partial/darkmode.pug","hash":"82567449d68025cc7fee5259d4769f5ee015aa26","modified":1647595833441},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"2ec9795468fa7967a037e61a59c1032a62b3355a","modified":1647595833442},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1647595833442},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1647595833442},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"53d721ea4c93564cb0bdde065572ff6128574d36","modified":1647595833443},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1647595833443},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1647595833443},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"b49f4e2cd9f77456230a5508d0bbe9a362668712","modified":1647595833441},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1647595833443},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1647595833443},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"b3c846a2e0ac79933e32c343029b769f2865a27f","modified":1647595833443},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1647595833442},{"_id":"themes/maupassant/layout/_widget/donate.pug","hash":"50855ce17af4298ce0f15236e2308c4a1760e7e3","modified":1647595833444},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1647595833444},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"1ef7a333ab9bfa169276d0ad48aecf5166ab63cb","modified":1647595833444},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1647595833444},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1647595833444},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1647595833444},{"_id":"themes/maupassant/layout/_widget/copyright.pug","hash":"32701dcba9c52d4bc73badaf8afe91af3f87b6a0","modified":1647595833444},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1647595833448},{"_id":"themes/maupassant/source/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1647595833449},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1647595833449},{"_id":"themes/maupassant/source/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1647595833448},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1647595833449},{"_id":"themes/maupassant/source/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1647595833449},{"_id":"themes/maupassant/source/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1647595833449},{"_id":"themes/maupassant/source/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1647595833449},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1647595833450},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1647595833449},{"_id":"themes/maupassant/source/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1647595833447},{"_id":"themes/maupassant/source/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1647595833448},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1647595833447},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1647595833448},{"_id":"themes/maupassant/source/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1647595833446},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1647595833448},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1647595833447},{"_id":"themes/maupassant/source/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1647595833446},{"_id":"themes/maupassant/source/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1647595833446},{"_id":"source/media/15354179433179.jpg","hash":"d7e2caa5b738c9adbcf9eaaf0ce68e52c1671430","modified":1535418182000},{"_id":"source/media/15364987364827.jpg","hash":"df898b8ffa292c3f0b817a1ba3dbcfcfeb395e25","modified":1536498736000},{"_id":"source/media/15363162820957.jpg","hash":"1d04776634bc8b06a9ef272450f9ea542d9e84f8","modified":1536316722000},{"_id":"themes/maupassant/source/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1647595833446},{"_id":"themes/maupassant/source/css/style.scss","hash":"5305f4c8e728169dcc1b485acdc37d226f297852","modified":1647595833447},{"_id":"source/media/15364989242348.jpg","hash":"2831cc13541180817cf28fa3abdf969ad2ff44fe","modified":1536498924000},{"_id":"source/media/IMG_7284.jpg","hash":"59b5c60b2b73f15509df7c6d25f94214ba9eeab0","modified":1534721240000},{"_id":"source/media/ORG_DSC04575.jpg","hash":"26db6ff5a69cab17f69558c67741f1564824740a","modified":1538289692000},{"_id":"source/media/ORG_DSC04585.jpg","hash":"8e608131488990dfa6278294e95bdeaefcec64dc","modified":1538289692000},{"_id":"source/media/IMG_7350.jpg","hash":"c67e44246578922e8d85fb55f083d2e30e03f53a","modified":1534721240000},{"_id":"source/media/15345735455740.jpg","hash":"42fadef9c72792400b3f68ddab56e0e948812913","modified":1534575192000},{"_id":"source/media/ORG_DSC04583.jpg","hash":"45066c3979c454846b799ed2121fc85dbd7504eb","modified":1538289692000},{"_id":"source/media/IMG_7384.jpg","hash":"831f920a8911287924c19306b851eec29a2731bf","modified":1534721240000},{"_id":"public/search.xml","hash":"35943ab56fdb983042d3a1ba31acbd119a615367","modified":1647953379313},{"_id":"public/about/index.html","hash":"b32444e388246fb0317ce5bf451548edc9d9346b","modified":1647612162252},{"_id":"public/2020/11/05/autovacuum-analyze-scale-factor/index.html","hash":"c04695dd3222a927a6c3868a3bdb6b3e42632a30","modified":1647953379313},{"_id":"public/2020/10/30/postgres_table_disk_used_order/index.html","hash":"b7967ece02dde2c06a1a3c182ba0387ff96335c1","modified":1647953379313},{"_id":"public/2019/03/24/pg_stat_statements/index.html","hash":"1275e30d3f41e02801b206baff10d637deb8a578","modified":1647953379313},{"_id":"public/2019/02/28/vertx_demo_2019/index.html","hash":"8bb5694be48ee45e80bc6aeb55c8f901059a7950","modified":1647953379313},{"_id":"public/2019/02/27/postgresql_ execute_an_anonymous_codeblock/index.html","hash":"b08586e45272772ab5f7e3ad439811c946ab2f35","modified":1647953379313},{"_id":"public/2019/02/25/lot_of_seq_scan_in_postgresql/index.html","hash":"605348a6a622f4a53cf6130e8c784db1784d3449","modified":1647953379313},{"_id":"public/2018/12/08/password_more_than_4_char_in_macos/index.html","hash":"18769b47702cde9122b2e994eb11cf3809d6557b","modified":1647953379313},{"_id":"public/2018/11/28/uninstall_jdk_in_macos/index.html","hash":"8143be7d46f05f33c495eadabc43ebfb6b8faa42","modified":1647953379313},{"_id":"public/2018/10/15/MySQL_column_default_current_timestamp/index.html","hash":"7e2f68ac859c781941bedddf5e45980c10070f4f","modified":1647953379313},{"_id":"public/2018/10/10/postgrest/index.html","hash":"fe8957778453920687f9421509ebb26ff49a4977","modified":1647953379313},{"_id":"public/2018/10/08/mysql-dump-restore/index.html","hash":"994cd0a55d8495f273c6d4c64ab9318a73bbb100","modified":1647953379313},{"_id":"public/2018/09/30/mazhuang-jiawang-xuzhou/index.html","hash":"899522abbf682d3991f43ad63b23a2b7eb8c17a9","modified":1647953379313},{"_id":"public/2018/09/27/Safari12_install_safariextz/index.html","hash":"c9d18ff4fdfa5a2d513eeaca01fc97533a725bd0","modified":1647953379313},{"_id":"public/2018/09/26/java_is_still_free/index.html","hash":"837b7976b1ff02b79be0033ad65732ab43ae986b","modified":1647953379313},{"_id":"public/2018/09/25/PostgreSQL_rename_notice/index.html","hash":"5994c1866a02cf07a1aba2bd9d7671a0dd198338","modified":1647953379313},{"_id":"public/2018/09/23/submodule_in_git/index.html","hash":"c3cf70b4c441d57fc328570ef755069d1ce9f743","modified":1647953379313},{"_id":"public/2018/09/21/PostgreSQL_doc_search/index.html","hash":"6f39f47ed2221f2c8efc7d5a5852767bb635fc6e","modified":1647953379313},{"_id":"public/2018/09/18/deep_learning_start_matrix_dot/index.html","hash":"7e8f584c8f16bb1bdd39142db02eb4907a8c8b48","modified":1647953379313},{"_id":"public/2018/09/17/ios12_close_In-App_Purchase/index.html","hash":"ced93cc1fec406805cc580000d82965ab9001421","modified":1647953379313},{"_id":"public/2018/09/13/vertx_unit_test/index.html","hash":"0368db670cbcb6bb70c0fee4697434492f4170f2","modified":1647953379313},{"_id":"public/2018/09/11/iTerm_best_practices/index.html","hash":"d5dff37029c61b235858fb46e3cce182a8d28d74","modified":1647953379313},{"_id":"public/2018/09/08/Google_Trends/index.html","hash":"35d106dc7a5e3dc48e37ff1e4c5d349ab1f2014f","modified":1647953379313},{"_id":"public/2018/09/07/IntelliJ_IDEA_tips/index.html","hash":"ff5d11279335acf3b2bfd0bca6c32daa1123f10e","modified":1647953379313},{"_id":"public/2018/09/05/ubuntu_show_soft_info/index.html","hash":"7a650dfb1ef35bbb1dec5e3ebe2a0600013c743f","modified":1647953379313},{"_id":"public/2018/09/06/break_through_baiduwangpan/index.html","hash":"e0be200aece06b13d04fc4762336e809af9bd8dc","modified":1647953379313},{"_id":"public/2018/09/04/gradle_plugin_download_error/index.html","hash":"b6919b1f34210d3b1677cff32270f7cff35e3904","modified":1647953379313},{"_id":"public/2018/09/03/vim_note/index.html","hash":"ff9f312bc5e1b830222157ce9c9df912b3497d71","modified":1647953379313},{"_id":"public/2018/09/02/ssh_chinese_garbled/index.html","hash":"0dbcbc159dcf4d2871cb1e2c54588093e7c329a2","modified":1647953379313},{"_id":"public/2018/09/01/fastdfs_docker/index.html","hash":"144513235bb2aeb41315470d1b83cccfe79a5ef8","modified":1647953379313},{"_id":"public/2018/08/31/eight_years_girl/index.html","hash":"910b7d51cf35f1e55acccab9384ed078dbbd09df","modified":1647953379313},{"_id":"public/2018/08/30/non-designers-design-book/index.html","hash":"99d11abaff7795fd7bd6292801712a589be2f4df","modified":1647953379313},{"_id":"public/2018/08/28/vertx_example_contributors/index.html","hash":"4d274fadbf1e25b2b0fbcf438d04829fb6471dce","modified":1647953379313},{"_id":"public/2018/08/27/sourceCompatibility_and_targetCompatibility_in_gradle/index.html","hash":"3a9ba10e0ebe4cd5def990d45209959edd5125eb","modified":1647953379313},{"_id":"public/2018/08/25/mosh/index.html","hash":"b8a6e4e5b5da6c605342df0ada80ba7fe195fbf5","modified":1647953379313},{"_id":"public/2018/08/22/PostgreSQL_show_SQL_logs/index.html","hash":"51ea45e60183362f649d00ed4b97ac034b524044","modified":1647953379313},{"_id":"public/2018/08/21/groovy_regular/index.html","hash":"77c42bb8a83e7ca85f3ffe0878bbfda2fb674973","modified":1647953379313},{"_id":"public/2018/08/20/xingyi-malinghe/index.html","hash":"b3965548e2812fd1cf74d046d46341d4d3fbca3c","modified":1647953379313},{"_id":"public/2018/08/19/Linux_firewall-cmd/index.html","hash":"91ec58fea4528fefbbf50703c1bf27dd2faa392f","modified":1647953379313},{"_id":"public/2018/08/16/PostgreSQL_auto_modify_defaults_1/index.html","hash":"3272ecf9edfccbefdaecf838c1258de246c1a453","modified":1647953379313},{"_id":"public/2018/08/14/Vert-x_redeploy/index.html","hash":"39ced660fa9ef507b1f32a1c224db33c930a8701","modified":1647953379313},{"_id":"public/2018/08/13/Parental_responsibilities_and_obligations/index.html","hash":"05f45741ad4e74994ec19846d3906578c8e8cee6","modified":1647953379313},{"_id":"public/2018/08/12/my_luancher_in_vertx/index.html","hash":"ec20781924c2d2c867c6ac679e8d312e16602e9e","modified":1647953379313},{"_id":"public/2018/08/10/PostgreSQL_alert_foreign_server/index.html","hash":"f6807fbb80ce4b869726f8bbf4eca76c1f8fbcba","modified":1647953379313},{"_id":"public/2018/08/08/Linux_ln/index.html","hash":"1cf09ce0b47d8f7e830ae88be29220d0fc4c4f0c","modified":1647953379313},{"_id":"public/2018/08/07/PostgreSQL_drop_database_other-session-using-the-database/index.html","hash":"6d36f6b1d4b521ec8847422a54f95a5449a4db8a","modified":1647953379313},{"_id":"public/2018/08/06/cordova_plugin_gradle/index.html","hash":"6f813762b703510ecf47ebcc254e05f3618a1e16","modified":1647953379313},{"_id":"public/2018/08/05/grab_a_ticket_use_geb/index.html","hash":"72a376ecbaf2ed898094c76e8928365163b00ed9","modified":1647953379313},{"_id":"public/2018/08/04/Geb/index.html","hash":"6425c059f3bda9dc540226e01008873abd678a41","modified":1647953379313},{"_id":"public/2018/08/03/PostgreSQL_indexs/index.html","hash":"5f788bcf48709f248ef26cafd2820814fe26d06c","modified":1647953379313},{"_id":"public/2018/08/01/PostgreSQL_select_varchar_like_index/index.html","hash":"f561d6322f67a918f8cac9d4cef4ea7497fab5f2","modified":1647953379313},{"_id":"public/2018/07/31/IntelliJ-IDEA_SQL-Explain/index.html","hash":"9ffb6674530339aa9542987ee9b4a958fb0b8025","modified":1647953379313},{"_id":"public/2018/07/30/timezone_in_docker/index.html","hash":"c95169ade006d4b03d8bf77cb4757866107f0473","modified":1647953379313},{"_id":"public/2018/07/29/tomcat_url_chinese_garbled/index.html","hash":"7e27b64978be2baf3852781bf269411a80fc3961","modified":1647953379313},{"_id":"public/2018/07/28/IntelliJ-IDEA_hot_keys/index.html","hash":"cc3447e6b9189f8c313be3d7d8bf1dd8b7f707f5","modified":1647953379313},{"_id":"public/2018/07/27/macos_bootable_usb/index.html","hash":"52a197f2fbeb1d1a8bdddbae3c27b08ba077591d","modified":1647953379313},{"_id":"public/2018/07/25/linux_ssh_key/index.html","hash":"133c931a0a41aac92b955733c8da2d097f305cdb","modified":1647953379313},{"_id":"public/2018/07/26/separator_in_java/index.html","hash":"91027d37760ff53973f3a07e9176ef1885e15da0","modified":1647953379313},{"_id":"public/2018/07/24/xuzhou_xiari/index.html","hash":"d7f93f9cefe09daceac203541bd90728875d8182","modified":1647953379313},{"_id":"public/2018/07/23/IntelliJ-IDEA_Winodws_Gradle_garbled/index.html","hash":"54f6c2e65530950a21d04134cf87718e57a08439","modified":1647953379313},{"_id":"public/2018/07/22/postgres_select_total_subtotal_one_sql/index.html","hash":"b37e384dca84d91e116f27b5423433ecc81eb1d1","modified":1647953379313},{"_id":"public/2018/07/21/vertx_async_to_sync/index.html","hash":"0057b99030522ab65f20e418936205b08934178b","modified":1647953379313},{"_id":"public/2018/07/19/CentOS_Shadowsocks/index.html","hash":"6d0dc3124093b7d4358089cbb42ca68cca7574c4","modified":1647953379313},{"_id":"public/2018/07/20/cas_show_username_in_login_success_page/index.html","hash":"b068e28d3fb595473a79ac5f57d66f4d6445808b","modified":1647953379313},{"_id":"public/2018/07/17/gradle_build_vue/index.html","hash":"4afd3e73c520c70f75ab04dfe34901efc9d16695","modified":1647953379313},{"_id":"public/2018/07/16/linux_mount/index.html","hash":"dad67f40ada567e47690fb5b74c99a447de7f1ce","modified":1647953379313},{"_id":"public/2018/07/13/postgresql_select_array/index.html","hash":"88eb6270072c21c2a3384a3524879c14c4eb9ccf","modified":1647953379313},{"_id":"public/archives/index.html","hash":"57f6e28b6f6a348c67d24894e1e8de29fd1b90fb","modified":1647953379313},{"_id":"public/archives/page/2/index.html","hash":"2cc694782cd6afb566e40f6b5046de3daff873fc","modified":1647953379313},{"_id":"public/archives/page/3/index.html","hash":"c8bd149dfc64a7e7864dfac2c600900a19901336","modified":1647953379313},{"_id":"public/archives/page/4/index.html","hash":"56e42a2271c89ca46ca4d56977f0295a5187530d","modified":1647953379313},{"_id":"public/archives/page/5/index.html","hash":"ca7bd892461de9595810c56ac130339694ea4ff2","modified":1647953379313},{"_id":"public/archives/page/6/index.html","hash":"4763db2445e5aef9f61c6d76b339dfe2187828ff","modified":1647953379313},{"_id":"public/archives/page/7/index.html","hash":"3fa88f2c1b9c0692e020617ca7373832f47e9cd3","modified":1647953379313},{"_id":"public/archives/page/8/index.html","hash":"da8ee24658a620e41d21bc40605e240b735832fd","modified":1647953379313},{"_id":"public/archives/page/9/index.html","hash":"e72b7d6b182b9159f58ba9485efe8c5be6fc44ad","modified":1647953379313},{"_id":"public/archives/2018/index.html","hash":"d04ad144b5e6061312c47b5f99fb87e5d234fcfb","modified":1647953379313},{"_id":"public/archives/2018/page/2/index.html","hash":"c645d1a62574fdbc5bd5cbed069054700d8f15e4","modified":1647953379313},{"_id":"public/archives/2018/page/3/index.html","hash":"ef21e1b39955d3e25bb27640f655f08922532cab","modified":1647953379313},{"_id":"public/archives/2018/page/4/index.html","hash":"ccff75f36fe82585040b5e0c2ec987f04b60345a","modified":1647953379313},{"_id":"public/archives/2018/page/5/index.html","hash":"363f8c452f696e8a6bf74695606bbbb9b7d4c281","modified":1647953379313},{"_id":"public/archives/2018/page/6/index.html","hash":"1112a34514eb9f449ca0d0b390c96004c10d2544","modified":1647953379313},{"_id":"public/archives/2018/page/7/index.html","hash":"ae59a413ddf769f9b76305e751bad47c064cb744","modified":1647953379313},{"_id":"public/archives/2018/page/8/index.html","hash":"ef5f7ff9a48cf47bed0f02577ff1ab329d20f496","modified":1647953379313},{"_id":"public/archives/2018/page/9/index.html","hash":"c1e2468ed27781828e5d90f65eb3bf4276105b4e","modified":1647953379313},{"_id":"public/archives/2018/07/index.html","hash":"7c96bc5e98cdbdb519bae23c9e766d4d53dea3b1","modified":1647953379313},{"_id":"public/archives/2018/07/page/2/index.html","hash":"a1bb26e6db6884e2355c9fd7200b59403c14650f","modified":1647953379313},{"_id":"public/archives/2018/08/index.html","hash":"41ca34130eb745246e477efbd1dc5dff7a2d40a3","modified":1647953379313},{"_id":"public/archives/2018/08/page/2/index.html","hash":"b2ccbbb506e33c4feba8e653c56fc35defca5093","modified":1647953379313},{"_id":"public/archives/2018/08/page/3/index.html","hash":"452d19a9ddf9f0b2e02f93d428fb1390bf226e8e","modified":1647953379313},{"_id":"public/archives/2018/08/page/4/index.html","hash":"d601c19b41a28aeafb9be0d28c30851c8bd9f202","modified":1647953379313},{"_id":"public/archives/2018/09/index.html","hash":"8aa88df5bf12e5d8842f5a55ede5e663852542e6","modified":1647953379313},{"_id":"public/archives/2018/09/page/2/index.html","hash":"80c07cce4d509c4b35dc9877799a61afafe85116","modified":1647953379313},{"_id":"public/archives/2018/09/page/3/index.html","hash":"dfd6073065bb9fdd4eac934d28897de1f080dfc7","modified":1647953379313},{"_id":"public/archives/2018/10/index.html","hash":"6f05e2a3c8555e19e91731456e31cd647b5833b2","modified":1647953379313},{"_id":"public/archives/2018/11/index.html","hash":"d2c2c0bd20b8acd3d109aa2ef1e103bac22495f0","modified":1647953379313},{"_id":"public/archives/2018/12/index.html","hash":"9dddfba759a4f324e028d13fe0053509178504ab","modified":1647953379313},{"_id":"public/archives/2019/index.html","hash":"a0e8e226e7845c437ab9b4636e9777b482b635ef","modified":1647953379313},{"_id":"public/archives/2019/02/index.html","hash":"f800d3975bce21e357cb8eec096c2f1da71c23ca","modified":1647953379313},{"_id":"public/archives/2019/03/index.html","hash":"c404cfa08a8f7c908fb458b1d5ba0f319d888e8f","modified":1647953379313},{"_id":"public/archives/2020/index.html","hash":"a83ce29c22311f9c81200b861c0580e658b62693","modified":1647953379313},{"_id":"public/archives/2020/10/index.html","hash":"c70c132e4fc722ebc02e2aba18adad76642e9f88","modified":1647953379313},{"_id":"public/archives/2020/11/index.html","hash":"a014dd095f5f65e505f5323920564cff153d44ee","modified":1647953379313},{"_id":"public/tags/前端/index.html","hash":"f0a7531240abf77313dc2c6fd30e266d866a668d","modified":1647953379313},{"_id":"public/tags/Geb/index.html","hash":"f1174d6d3efaaf1eb179b30220760c256836e02e","modified":1647953379313},{"_id":"public/tags/Java/index.html","hash":"79b9517326d0e52a8157364f6b5b475fb6722576","modified":1647953379313},{"_id":"public/tags/代理/index.html","hash":"e0aa5418b0bd6a7a16b64c45d04c386a6d2218c4","modified":1647953379313},{"_id":"public/tags/gradle/index.html","hash":"4ba343dc6f79f355c47d79bab44d5aa3252fbe56","modified":1647953379313},{"_id":"public/tags/乱码/index.html","hash":"499715f40496f2829a5498fe7f21839b0e49fb8d","modified":1647953379313},{"_id":"public/tags/IntelliJ-IDEA/index.html","hash":"55d961cce0241a6637d042fcb91fee79b4ce8f5a","modified":1647953379313},{"_id":"public/tags/Linux/index.html","hash":"ec20b13552f3fa2e30abf4e5a38d89b27307960c","modified":1647953379313},{"_id":"public/tags/IDEA/index.html","hash":"e48a363d23e942d21b0b6ce056cd7014a3fa1646","modified":1647953379313},{"_id":"public/tags/MySQL/index.html","hash":"3744a692b55da942311449036f99c0404ca9db10","modified":1647953379313},{"_id":"public/tags/教育子女/index.html","hash":"cb37bf4f6144c7e62d03d110639be1957e408a3c","modified":1647953379313},{"_id":"public/tags/PostgreSQL/index.html","hash":"72cff1839013203ee08e4487977e43a6b5acfb42","modified":1647953379313},{"_id":"public/tags/PostgreSQL/page/2/index.html","hash":"f1142241af88c8a9ec67505e961695ab14915c88","modified":1647953379313},{"_id":"public/tags/PostgreSQL/page/3/index.html","hash":"fea6856a13619dc91bcb681c17700e142fd5b08c","modified":1647953379313},{"_id":"public/tags/cas/index.html","hash":"48d1994fa0dbcc47895f1db34d1ab2da53d4c183","modified":1647953379313},{"_id":"public/tags/Vert-x/index.html","hash":"3bf485ad6129d2956dce15a6e54fe2c1d2a53b0e","modified":1647953379313},{"_id":"public/tags/nginx/index.html","hash":"26fc844f1ed393c828fdff47c6adb216b81ba11d","modified":1647953379313},{"_id":"public/tags/https/index.html","hash":"4cd7abf13dd9c4f31ca34e2ad6f4b95f31c28635","modified":1647953379313},{"_id":"public/tags/深度学习/index.html","hash":"8964abed40885af3610d79d33a9c25acf41fe557","modified":1647953379313},{"_id":"public/tags/GitHub/index.html","hash":"6f728733a15a4be8e91b5b964ff9108ef40d5255","modified":1647953379313},{"_id":"public/tags/Cordova/index.html","hash":"7baaaa9f73e9174ad325aabac44d32efbe58fc2f","modified":1647953379313},{"_id":"public/tags/Docker/index.html","hash":"540d25e3b11a5592d9083e84f9b8131a61ed8a85","modified":1647953379313},{"_id":"public/tags/FastDFS/index.html","hash":"eaa80393d2c52f86979ab10fb37b93069282e1b4","modified":1647953379313},{"_id":"public/tags/vue/index.html","hash":"b97f7ebc26e2a23a6902701e66f1abef1dfb892e","modified":1647953379313},{"_id":"public/tags/Spring/index.html","hash":"347ae5bbd9c1c1f71ccd125c65ebb6fbf06a11d1","modified":1647953379313},{"_id":"public/tags/groovy/index.html","hash":"ccbdf4744c1766570176a1849de101577ae22557","modified":1647953379313},{"_id":"public/tags/ios/index.html","hash":"ca35108563bb5c6ccd2a3e5adce5d2b10783b7f3","modified":1647953379313},{"_id":"public/tags/Mac/index.html","hash":"a51c3859bebd459a2a9a3402b16d3463300c4cef","modified":1647953379313},{"_id":"public/tags/WEB/index.html","hash":"ae902342ff2a78f89ddcefdcba6a0fa99e3f1f00","modified":1647953379313},{"_id":"public/tags/UI设计/index.html","hash":"3ce0c1162c6bc9e5e9c278b7813a5d6f732be9ea","modified":1647953379313},{"_id":"public/tags/Kotlin/index.html","hash":"80261cb8b738d11a964ca86f2d652b3df097ded7","modified":1647953379313},{"_id":"public/tags/RESTful/index.html","hash":"9bf789ddf907600853e9df540af7e700310b3ca6","modified":1647953379313},{"_id":"public/tags/git/index.html","hash":"396f7c0e41610249d1d266001c49d19b73c0d69f","modified":1647953379313},{"_id":"public/tags/tomcat/index.html","hash":"358f279614a9cbbf6dbd3365d5e6059955da74e6","modified":1647953379313},{"_id":"public/tags/ubuntu/index.html","hash":"5106ee2443a450efe818ae9598b8a2b1a7ce8565","modified":1647953379313},{"_id":"public/tags/contributors/index.html","hash":"ced1d926a34eb616db49984be19b4ca1c71851b1","modified":1647953379313},{"_id":"public/tags/vim/index.html","hash":"ea33a239ff4e1a9195fa589cedff320289b249e6","modified":1647953379313},{"_id":"public/categories/程序人生/index.html","hash":"e060d7086bd4fc4905462e35212da0badcf957f5","modified":1647953379313},{"_id":"public/categories/程序人生/page/2/index.html","hash":"a61cd3815e213f349390f39d606e33a2c8dc9a82","modified":1647953379313},{"_id":"public/categories/程序人生/page/3/index.html","hash":"026ee6b61b0ae0af95778b78df3ab747f9b626ff","modified":1647953379313},{"_id":"public/categories/程序人生/page/4/index.html","hash":"acfe30828af67fd2872cc5eb3153905f4230f601","modified":1647953379313},{"_id":"public/categories/程序人生/page/6/index.html","hash":"b6c6e66f010194a93af9eb016660355a61810d53","modified":1647953379313},{"_id":"public/categories/程序人生/page/5/index.html","hash":"0ca3124b4ae90211355eb8110c534924780e543a","modified":1647953379313},{"_id":"public/categories/程序人生/page/7/index.html","hash":"581079dd7c41248d66ad9aeb53616c42c451b23f","modified":1647953379313},{"_id":"public/categories/程序人生/page/8/index.html","hash":"8373793964c547c7517978c5e1ac1dcf37576a32","modified":1647953379313},{"_id":"public/categories/实用技巧/index.html","hash":"ecd3a669e36d6c93d124deddcb1d8471e064b5d2","modified":1647953379313},{"_id":"public/categories/文艺中年/index.html","hash":"18480307cea09ddd752d490bd2744089e3ca0335","modified":1647953379313},{"_id":"public/categories/工具技巧/index.html","hash":"a7d226a7e65f48c269e82860e0bb2eaa34cd765d","modified":1647953379313},{"_id":"public/categories/游记/index.html","hash":"437dd34994e8fe22c503ed3da938cb1d3a8c95fb","modified":1647953379313},{"_id":"public/categories/设计相关/index.html","hash":"310a019f3e03d2b843fe06d16197d07d56908632","modified":1647953379313},{"_id":"public/2019/02/20/groovy_validating_form_on dynamic_rules/index.html","hash":"8f219fb50b73e6ef29ee8d9ae997eced074d5bff","modified":1647953379313},{"_id":"public/2018/09/29/PostgreSQL-python-function/index.html","hash":"3f2c6b1ff7a3edd7300c094fb1bb74c933f6ddd5","modified":1647953379313},{"_id":"public/2018/09/28/PostgreSQL-rowsecurity/index.html","hash":"adbc1c7265f4aae487c06a84f5c70f6357ea6058","modified":1647953379313},{"_id":"public/2018/09/20/nginx_rewrite/index.html","hash":"80e7173a6fea535f186dc6738e0f497dc193f11a","modified":1647953379313},{"_id":"public/2018/09/19/certbot-auto_nginx/index.html","hash":"36779dfcad1185db3dd2ca8edd56795dfe32fc62","modified":1647953379313},{"_id":"public/2018/09/16/transaction_in_reactive-pg-client/index.html","hash":"f112cd9248b5d2ab60144c7713317edbccb7b089","modified":1647953379313},{"_id":"public/2018/09/15/reactive-pg-client_notify/index.html","hash":"7a29c07de3703e70dd91e2a72fd7f1d158e080ce","modified":1647953379313},{"_id":"public/2018/09/14/reactive-pg-client_start/index.html","hash":"75f66c7a07855173fab3f33e7ff0b1c6671248d8","modified":1647953379313},{"_id":"public/2018/09/12/CompletableFuture_something/index.html","hash":"24e70eb6e9170aa053ab34d9a5c238f299e67c19","modified":1647953379313},{"_id":"public/2018/09/10/groovy_return_in_each/index.html","hash":"c535ec3854783905380694000870026693ff003f","modified":1647953379313},{"_id":"public/2018/09/09/plv8_in_postgresql/index.html","hash":"3e8e23410c063af549b6c4f2a393f79d5265b205","modified":1647953379313},{"_id":"public/2018/08/29/groovy-sql-SQL-in-spring-boot/index.html","hash":"ff35f2923d089adc85cb5c968ec61813212d6007","modified":1647953379313},{"_id":"public/2018/08/26/postgresql_schema_and_search_path/index.html","hash":"861ffddcb3242d43cf1d43b955f980951861d694","modified":1647953379313},{"_id":"public/2018/08/24/javalin/index.html","hash":"32c85ef528028d20a92ec1b64d591361f439cbfc","modified":1647953379313},{"_id":"public/2018/08/23/defect_jdbc_postgresql/index.html","hash":"c175947081bde28f499d7819c1900fc1565cea09","modified":1647953379313},{"_id":"public/2018/08/18/github-pull-request/index.html","hash":"d3c9077e0375ada8981ab4bdb9f5e53dfb8d61a8","modified":1647953379313},{"_id":"public/2018/08/17/PostgreSQL_auto_modify_defaults_2/index.html","hash":"356be7aca9d6ba04a95fd3f9eedb1b3b815ac04b","modified":1647953379313},{"_id":"public/2018/08/15/PostgreSQL_with_recursive/index.html","hash":"c985e5615be92de5493bf10d615ab83c29bef594","modified":1647953379313},{"_id":"public/2018/08/11/pg_cron_and_materialized_view/index.html","hash":"45ec4e87207b3c369f3b099734a7e55a9c5bae51","modified":1647953379313},{"_id":"public/2018/08/09/PostgreSQL_distinct-on/index.html","hash":"10a0b4b7e8453fcb4355ea495bfb6d13dab14b30","modified":1647953379313},{"_id":"public/2018/08/02/PostgreSQL_select_varchar_like_front_/index.html","hash":"c0d4c17701b72bc523ffed806dbdef28e757625f","modified":1647953379313},{"_id":"public/2018/07/18/gradle_task_use_ssh/index.html","hash":"d0cdfe96131f0d64ddff85fc123db4048bd1542f","modified":1647953379313},{"_id":"public/2018/07/14/jmh/index.html","hash":"428eb0907048b42a8d14c17fecd7c1ff8ded63f8","modified":1647953379313},{"_id":"public/index.html","hash":"345c9e14875b28d84bff9dc716a633784977c14d","modified":1647953379313},{"_id":"public/page/2/index.html","hash":"34eeb975b0be5b91ee362797caf07427843991ad","modified":1647953379313},{"_id":"public/page/3/index.html","hash":"5355bd6549e2a039ed66c95ce09054e742df5fdb","modified":1647953379313},{"_id":"public/page/4/index.html","hash":"6a0c509d40b9b9570d1bdd3a5410e126186170c2","modified":1647953379313},{"_id":"public/page/5/index.html","hash":"6f2d6479179c17960264ef11fb0305dbb1d29c04","modified":1647953379313},{"_id":"public/page/6/index.html","hash":"fe992476a142c7515a78fa7df25502f1b317919e","modified":1647953379313},{"_id":"public/page/7/index.html","hash":"4709bf775569d65fa653d7bca05a60747d81ac37","modified":1647953379313},{"_id":"public/page/8/index.html","hash":"75dab98cc50d827ee27e3340796bda8412c92c24","modified":1647953379313},{"_id":"public/page/9/index.html","hash":"358ba8addcd3a444c43371372b7d13d84dc0b116","modified":1647953379313},{"_id":"public/img/github.svg","hash":"277798d16cb6106e45ef74f6b9972011fa43401b","modified":1647609358978},{"_id":"public/img/like.svg","hash":"e6e4bd1af076be9358316cac89efdc22ef4a5064","modified":1647609358978},{"_id":"public/img/alipay.svg","hash":"3d94d2f9b09e352802628c9225578e1086f5fef3","modified":1647609358978},{"_id":"public/img/bitcoin.svg","hash":"590b6b6462896168d08b30dfe2de5f08950d5553","modified":1647609358978},{"_id":"public/img/wechat.svg","hash":"19c1f68ec8c0b8e9f7855e7a6e78077f70a1aedc","modified":1647609358978},{"_id":"public/img/paypal.svg","hash":"09786c983a10bc570dcd05b87cec601e9d01eb00","modified":1647609358978},{"_id":"public/media/15317042937460.jpg","hash":"0d72a946895acbfe839b45cbd02d9d7dc8ec4432","modified":1647609358978},{"_id":"public/media/15317048391668.jpg","hash":"4c7c90e196fcf6cf2e7f580e3440c29b4f938427","modified":1647609358978},{"_id":"public/media/15317809896046.jpg","hash":"fd4d15b1dab93ab35a8b61a9cfe92922043f0076","modified":1647609358978},{"_id":"public/media/15317044049926.jpg","hash":"8b4a7136e2d3637d0ac19331324e5d4f079952b4","modified":1647609358978},{"_id":"public/media/15319616591142.jpg","hash":"2d25d7e207a480c5ad326b37b3951f4cc367f1c1","modified":1647609358978},{"_id":"public/media/15315228604634.jpg","hash":"9347ca20df0e5f73eb8cd1a647a233d738aea884","modified":1647609358978},{"_id":"public/media/15319617008516.jpg","hash":"4b231a1e789abb48d403832d8a4b721c4087e186","modified":1647609358978},{"_id":"public/media/15319627604059.jpg","hash":"fac9953c6787990ba056be2ba2e2949621eb68ad","modified":1647609358978},{"_id":"public/media/15326512660951.jpg","hash":"31033329798034dfa28ec9e6b9f664cd6c5f3bc8","modified":1647609358978},{"_id":"public/media/15329969004233.jpg","hash":"bf03679cac233dcbaa19bda447b7495371f92c37","modified":1647609358978},{"_id":"public/media/15316574043348.jpg","hash":"a05a47030c203ce8a4aae47bf947bd5b21215fa7","modified":1647609358978},{"_id":"public/media/15329972711011.jpg","hash":"c645949b7882176334fdd50105b715ce6b0fdcc5","modified":1647609358978},{"_id":"public/media/15329984643618.jpg","hash":"c72583be11040bdadd2e8cab0b3963f37512521d","modified":1647609358978},{"_id":"public/media/15329978378217.jpg","hash":"87aa4323b3eb94412985d948c9eecdcd6b990697","modified":1647609358978},{"_id":"public/media/15329985590089.jpg","hash":"851d2bd742bc4902db3e067a1973c0954b4770b4","modified":1647609358978},{"_id":"public/media/15329987110873.jpg","hash":"4ca4582e17ddc097e45b5befcea112b36b37ec90","modified":1647609358978},{"_id":"public/media/15330845808519.jpg","hash":"890d5505996da93293621d79e11a3cc6d85a3180","modified":1647609358978},{"_id":"public/media/15329990816786.jpg","hash":"cd779f78e9d0d7782aee197730c64076350b2041","modified":1647609358978},{"_id":"public/media/15330848868005.jpg","hash":"3734c8ed6e66a1c101a293743ec405b0f8a25dff","modified":1647609358978},{"_id":"public/media/15329976430336.jpg","hash":"56d9991027bb4f03364db67bb7acb56214b0f19b","modified":1647609358978},{"_id":"public/media/15329983218004.jpg","hash":"ed02db96340f79e687a031375ac1fd9e9c86729a","modified":1647609358978},{"_id":"public/media/15329989448215.jpg","hash":"cd8d5f4e30a3629cc5dcb1866f4a65712da82d0e","modified":1647609358978},{"_id":"public/media/15331719609935.jpg","hash":"9da344ecbf29b75298b24d008320eb244f20ada1","modified":1647609358978},{"_id":"public/media/15330876281185.jpg","hash":"74f2107c62e2ac6d8559284ab8bdd501f0bb3e10","modified":1647609358978},{"_id":"public/media/15330878032471.jpg","hash":"fc31a65d2233f90084d5a6efaafd89a134aa1cef","modified":1647609358978},{"_id":"public/media/15331926156740.jpg","hash":"70a056034db68c4fdaaa1a49c7fa867a2df6a72f","modified":1647609358978},{"_id":"public/media/15331926585276.jpg","hash":"1ce73446647c81d26b902bf227b6a027c70a091d","modified":1647609358978},{"_id":"public/media/15331929892802.jpg","hash":"45ac6586d109516781efd0206659ff7720d3303f","modified":1647609358978},{"_id":"public/media/15331709094483.jpg","hash":"ff9b4355f01ebbe35f68136a3918663c194db5a1","modified":1647609358978},{"_id":"public/media/15331936413004.jpg","hash":"a3af3bf80b1d573e08726036d8dc5f30d327e430","modified":1647609358978},{"_id":"public/media/15331936107582.jpg","hash":"06b2c07a6e874f055cd40e1cc9e55f5806db7aff","modified":1647609358978},{"_id":"public/media/15331930513697.jpg","hash":"8379c158c84e42e0a990e2b13e4c302e979ea3b1","modified":1647609358978},{"_id":"public/media/15345741245811.jpg","hash":"b33baef8f9d96fa3bffaef5b8dd72819ed9b4b17","modified":1647609358978},{"_id":"public/media/15331709707728.jpg","hash":"9beb3980c696c1d07808afc2a598ffb594cbbbf3","modified":1647609358978},{"_id":"public/media/15361965426250.jpg","hash":"1531fe1674315a79d38bca3b0b02e8b0e2ff5622","modified":1647609358978},{"_id":"public/media/15361968542946.jpg","hash":"a8aa94eff599c34e52bcd842f7ba421d2aa2d990","modified":1647609358978},{"_id":"public/media/15363698300629.jpg","hash":"04d694864cea44de4c6c874224d99312e594783e","modified":1647609358978},{"_id":"public/media/15365022296404.jpg","hash":"b314f9fb8220df62e378d6c292bbdd845d76a108","modified":1647609358978},{"_id":"public/media/15380172675854.jpg","hash":"cc78ca467e50c19c9dead08d4cdf9a76ddaa3359","modified":1647609358978},{"_id":"public/media/15380151275481.jpg","hash":"39cc67447096088ca6025f56831862b1c32b4ed1","modified":1647609358978},{"_id":"public/media/15380173560777.jpg","hash":"72b476ec9b3b0440bb15c0238948b5739ba91144","modified":1647609358978},{"_id":"public/media/15363699317160.jpg","hash":"3b2ae91f86390d8eed51d897d9765d5c0ff076bc","modified":1647609358978},{"_id":"public/media/15380174874853.jpg","hash":"a9a2c27e5b5646855b07fbd2adbdc5ca2c24ee52","modified":1647609358978},{"_id":"public/media/15380182351986.jpg","hash":"c8322dfcfd53dfdac5be1c503b752e7e61a05e2d","modified":1647609358978},{"_id":"public/media/15380183216923.jpg","hash":"f489f65adfc07d0cbd3ef6d8e49aee7ae69aff40","modified":1647609358978},{"_id":"public/media/15380177660522.jpg","hash":"a8865f0111a339ae6b18de6ebb6d664c81d077f3","modified":1647609358978},{"_id":"public/media/IMG_7610.png","hash":"5fe4d927c70527b3e211fdbe6f963489fd92420a","modified":1647609358978},{"_id":"public/media/IMG_7613.png","hash":"36331134c4dd943bd574f0304f8bc259030b4adc","modified":1647609358978},{"_id":"public/media/IMG_7611.png","hash":"f1f1d87f23fa03ac18c88ebb03c50b0f6d084ab2","modified":1647609358978},{"_id":"public/media/IMG_7612.png","hash":"753766da54e035297aa825c510a9d2ef785b60be","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-07-16 09.22.56.png","hash":"80b124d2e120cead704697e1708d15a6c0187971","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-07-19 08.53.26.png","hash":"592eb2b93bb3fa0f485fb8ef9fbbca2622c2716b","modified":1647609358978},{"_id":"public/media/粘贴的图片2018_8_18_14_23.png","hash":"58c1fd9e7454b31c93da1ee1fa08c9c547d36d8c","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-04-27 11.41.45.png","hash":"03306b8e3b4b575cbd2445d6ef476ef1f6862f7f","modified":1647609358978},{"_id":"public/media/粘贴的图片2018_8_18_14_39.png","hash":"d324f88fad2612c6ab1e01adb2a94a3126a9014c","modified":1647609358978},{"_id":"public/media/粘贴的图片2018_8_18_14_32.png","hash":"91612acb6680be6d57f62df8793b54af44eeefd2","modified":1647609358978},{"_id":"public/media/15330861199315.jpg","hash":"fa2ac49e435260df0ca536ccfaa75a1e647dc9bf","modified":1647609358978},{"_id":"public/media/15363701562662.jpg","hash":"dbe3f507f7f27fc0bd5c6f47bf8a0c133c2a9014","modified":1647609358978},{"_id":"public/media/15363701237412.jpg","hash":"470dac7cb609f0960f3d188930b5dad9a5ae95b0","modified":1647609358978},{"_id":"public/media/15375090092852.jpg","hash":"0a5266ec780fe46a3f5707941ec799b15508a54b","modified":1647609358978},{"_id":"public/media/15375096548094.jpg","hash":"d506f67189a900d1ce55ab8b5ba74bffea4abdf1","modified":1647609358978},{"_id":"public/media/15363168799795.jpg","hash":"5ef900c9117007b1028ac1ca03b246eb28b036c2","modified":1647609358978},{"_id":"public/media/15380180870297.jpg","hash":"9875251b25a38f29edd4ae4a4a722eed4712511a","modified":1647609358978},{"_id":"public/media/DSC04458.jpg","hash":"2a2210b14567b45e9da2c82ab9e6fa86902babbc","modified":1647609358978},{"_id":"public/media/FullSizeRender.jpeg","hash":"c724055ecfc8332c8052af74d945a5fe5521626d","modified":1647609358978},{"_id":"public/media/IMG_6764.jpg","hash":"411d432c5487fc26e8dfcdde01671b78e88a1ab6","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-09-11 09.16.40.png","hash":"3f6b1ff02e0459a490303aea5f7ea69c620cfabe","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-07-16 09.20.59.png","hash":"c47c644a546de183845a61278d13bd644ed0d0a1","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-09-11 10.09.15.png","hash":"6f974d64c0914e56d2259580ac0ce4b09aa22071","modified":1647609358978},{"_id":"public/media/屏幕快照 2018-09-11 09.19.37.png","hash":"3c6ee8e36a36ad87f921b5525a2e41417c16f32a","modified":1647609358978},{"_id":"public/media/粘贴的图片2018_8_18_14_28.png","hash":"dd9acff01b76b99712c1fd7f736602403cace645","modified":1647609358978},{"_id":"public/js/copycode.js","hash":"fde1f153bab1f00ae8930668094c00aa9ff3c7a3","modified":1647609358978},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1647609358978},{"_id":"public/js/donate.js","hash":"bdddd8d9847462d020f7a511e7e12c046223195d","modified":1647609358978},{"_id":"public/js/love.js","hash":"5cf89f622bf891cf1986845eb92eadef6f358eb7","modified":1647609358978},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1647609358978},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1647609358978},{"_id":"public/js/copyright.js","hash":"7b1bd775ea22abf33d57f78628f436bf656e439a","modified":1647609358978},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1647609358978},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1647609358978},{"_id":"public/css/copycode.css","hash":"e2463b8dacf629e180a1b6cd80667ca8044292eb","modified":1647609358978},{"_id":"public/css/search.css","hash":"9406e138d7bb6a9ef4a067eba1dafa627519c8a7","modified":1647609358978},{"_id":"public/js/search.js","hash":"6fdfd143646d12b8dbef9b5809cea768192f08aa","modified":1647609358978},{"_id":"public/css/donate.css","hash":"95b2fd65042afecc0b5530847c369bcc11d74bd0","modified":1647609358978},{"_id":"public/css/copyright.css","hash":"a418da11a88d1feb14500df42ed97a64da6a7611","modified":1647609358978},{"_id":"public/css/style.css","hash":"4735627811dd6de51dd1a3c7da9e62102d98c355","modified":1647609358978},{"_id":"public/media/15354179433179.jpg","hash":"d7e2caa5b738c9adbcf9eaaf0ce68e52c1671430","modified":1647609358978},{"_id":"public/media/15363162820957.jpg","hash":"1d04776634bc8b06a9ef272450f9ea542d9e84f8","modified":1647609358978},{"_id":"public/media/15364987364827.jpg","hash":"df898b8ffa292c3f0b817a1ba3dbcfcfeb395e25","modified":1647609358978},{"_id":"public/media/15364989242348.jpg","hash":"2831cc13541180817cf28fa3abdf969ad2ff44fe","modified":1647609358978},{"_id":"public/media/IMG_7284.jpg","hash":"59b5c60b2b73f15509df7c6d25f94214ba9eeab0","modified":1647609358978},{"_id":"public/media/ORG_DSC04575.jpg","hash":"26db6ff5a69cab17f69558c67741f1564824740a","modified":1647609358978},{"_id":"public/media/15345735455740.jpg","hash":"42fadef9c72792400b3f68ddab56e0e948812913","modified":1647609358978},{"_id":"public/media/IMG_7350.jpg","hash":"c67e44246578922e8d85fb55f083d2e30e03f53a","modified":1647609358978},{"_id":"public/media/ORG_DSC04585.jpg","hash":"8e608131488990dfa6278294e95bdeaefcec64dc","modified":1647609358978},{"_id":"public/media/ORG_DSC04583.jpg","hash":"45066c3979c454846b799ed2121fc85dbd7504eb","modified":1647609358978},{"_id":"public/media/IMG_7384.jpg","hash":"831f920a8911287924c19306b851eec29a2731bf","modified":1647609358978},{"_id":"public/atom.xml","hash":"ec79541c4fce61df0b9f238afe324eed8e21d67b","modified":1647953379313},{"_id":"source/_posts/maupassant-in-apple-silicon.md","hash":"c2f837eee7ba8f7513cf60e8286809cb8646167f","modified":1647953291096},{"_id":"public/2022/03/22/maupassant-in-apple-silicon/index.html","hash":"cfbf0e42b27908a02c5c72a89e34e3f06686189b","modified":1647953379313},{"_id":"public/archives/2022/03/index.html","hash":"81a5a373a8a81699f7f9823c8c31970eed028a70","modified":1647953379313},{"_id":"public/archives/2022/index.html","hash":"81a5a373a8a81699f7f9823c8c31970eed028a70","modified":1647953379313}],"Category":[{"name":"程序人生","_id":"cl0werqma0003y0mz481w760v"},{"name":"实用技巧","_id":"cl0werqmd000dy0mz2jjec1mx"},{"name":"文艺中年","_id":"cl0werqmf000ry0mz9me0hdqp"},{"name":"工具技巧","_id":"cl0werqmi001by0mzateb0b5n"},{"name":"游记","_id":"cl0werqmq0045y0mz0ffzby4f"},{"name":"设计相关","_id":"cl0werqmv005fy0mz5x4i3367"}],"Data":[],"Page":[{"title":"关于","layout":"single-column","comments":0,"donate":true,"_content":"徜徉代码海洋十余年，乐此不疲。最近在B站做Up主，[牧云踏歌](https://space.bilibili.com/24370353) 是也。\n\n### 爱好\n* 中华史\n* 红楼梦\n* 各种编程\n* 单机游戏\n* 最近在学：\n  * 硬笔字\n  * 钢琴\n\n### 教育\n* 2006-2010 中国矿业大学·计算机科学与技术\n\n### 主要技术方向\n* Java\n* Groovy\n* Vert.x\n* PostgreSQL\n* Swift\n\n### 开发的产品\n* [BookTime](https://apps.apple.com/cn/app/booktime-%E6%82%A8%E7%9A%84%E9%98%85%E8%AF%BB%E8%AE%A1%E6%97%B6%E4%BC%B4%E4%BE%A3/id1600654269)\n\n### 代码会说话\n* Github: [aruis](https://github.com/aruis)\n* 贡献过的项目\n    * [Vert.x](https://github.com/eclipse/vert.x)\n    * [pac4j](https://github.com/pac4j/vertx-pac4j)\n    * [jodconverter](https://github.com/sbraconnier/jodconverter)\n\n### 这里也有我\n* [bilibili](https://space.bilibili.com/24370353)\n* [知乎](https://www.zhihu.com/people/aruis/activities)\n\n### 联系方式\n* lovaruis#gmail.com\n","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: single-column\ncomments: false\ndonate: true\n---\n徜徉代码海洋十余年，乐此不疲。最近在B站做Up主，[牧云踏歌](https://space.bilibili.com/24370353) 是也。\n\n### 爱好\n* 中华史\n* 红楼梦\n* 各种编程\n* 单机游戏\n* 最近在学：\n  * 硬笔字\n  * 钢琴\n\n### 教育\n* 2006-2010 中国矿业大学·计算机科学与技术\n\n### 主要技术方向\n* Java\n* Groovy\n* Vert.x\n* PostgreSQL\n* Swift\n\n### 开发的产品\n* [BookTime](https://apps.apple.com/cn/app/booktime-%E6%82%A8%E7%9A%84%E9%98%85%E8%AF%BB%E8%AE%A1%E6%97%B6%E4%BC%B4%E4%BE%A3/id1600654269)\n\n### 代码会说话\n* Github: [aruis](https://github.com/aruis)\n* 贡献过的项目\n    * [Vert.x](https://github.com/eclipse/vert.x)\n    * [pac4j](https://github.com/pac4j/vertx-pac4j)\n    * [jodconverter](https://github.com/sbraconnier/jodconverter)\n\n### 这里也有我\n* [bilibili](https://space.bilibili.com/24370353)\n* [知乎](https://www.zhihu.com/people/aruis/activities)\n\n### 联系方式\n* lovaruis#gmail.com\n","date":"2022-03-18T13:48:05.006Z","updated":"2022-03-18T13:48:05.006Z","path":"about/index.html","_id":"cl0werqm90001y0mza72i1jur","content":"<p>徜徉代码海洋十余年，乐此不疲。最近在B站做Up主，<a href=\"https://space.bilibili.com/24370353\">牧云踏歌</a> 是也。</p>\n<h3 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h3><ul>\n<li>中华史</li>\n<li>红楼梦</li>\n<li>各种编程</li>\n<li>单机游戏</li>\n<li>最近在学：<ul>\n<li>硬笔字</li>\n<li>钢琴</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"教育\"><a href=\"#教育\" class=\"headerlink\" title=\"教育\"></a>教育</h3><ul>\n<li>2006-2010 中国矿业大学·计算机科学与技术</li>\n</ul>\n<h3 id=\"主要技术方向\"><a href=\"#主要技术方向\" class=\"headerlink\" title=\"主要技术方向\"></a>主要技术方向</h3><ul>\n<li>Java</li>\n<li>Groovy</li>\n<li>Vert.x</li>\n<li>PostgreSQL</li>\n<li>Swift</li>\n</ul>\n<h3 id=\"开发的产品\"><a href=\"#开发的产品\" class=\"headerlink\" title=\"开发的产品\"></a>开发的产品</h3><ul>\n<li><a href=\"https://apps.apple.com/cn/app/booktime-%E6%82%A8%E7%9A%84%E9%98%85%E8%AF%BB%E8%AE%A1%E6%97%B6%E4%BC%B4%E4%BE%A3/id1600654269\">BookTime</a></li>\n</ul>\n<h3 id=\"代码会说话\"><a href=\"#代码会说话\" class=\"headerlink\" title=\"代码会说话\"></a>代码会说话</h3><ul>\n<li>Github: <a href=\"https://github.com/aruis\">aruis</a></li>\n<li>贡献过的项目<ul>\n<li><a href=\"https://github.com/eclipse/vert.x\">Vert.x</a></li>\n<li><a href=\"https://github.com/pac4j/vertx-pac4j\">pac4j</a></li>\n<li><a href=\"https://github.com/sbraconnier/jodconverter\">jodconverter</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"这里也有我\"><a href=\"#这里也有我\" class=\"headerlink\" title=\"这里也有我\"></a>这里也有我</h3><ul>\n<li><a href=\"https://space.bilibili.com/24370353\">bilibili</a></li>\n<li><a href=\"https://www.zhihu.com/people/aruis/activities\">知乎</a></li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>lovaruis#gmail.com</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>徜徉代码海洋十余年，乐此不疲。最近在B站做Up主，<a href=\"https://space.bilibili.com/24370353\">牧云踏歌</a> 是也。</p>\n<h3 id=\"爱好\"><a href=\"#爱好\" class=\"headerlink\" title=\"爱好\"></a>爱好</h3><ul>\n<li>中华史</li>\n<li>红楼梦</li>\n<li>各种编程</li>\n<li>单机游戏</li>\n<li>最近在学：<ul>\n<li>硬笔字</li>\n<li>钢琴</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"教育\"><a href=\"#教育\" class=\"headerlink\" title=\"教育\"></a>教育</h3><ul>\n<li>2006-2010 中国矿业大学·计算机科学与技术</li>\n</ul>\n<h3 id=\"主要技术方向\"><a href=\"#主要技术方向\" class=\"headerlink\" title=\"主要技术方向\"></a>主要技术方向</h3><ul>\n<li>Java</li>\n<li>Groovy</li>\n<li>Vert.x</li>\n<li>PostgreSQL</li>\n<li>Swift</li>\n</ul>\n<h3 id=\"开发的产品\"><a href=\"#开发的产品\" class=\"headerlink\" title=\"开发的产品\"></a>开发的产品</h3><ul>\n<li><a href=\"https://apps.apple.com/cn/app/booktime-%E6%82%A8%E7%9A%84%E9%98%85%E8%AF%BB%E8%AE%A1%E6%97%B6%E4%BC%B4%E4%BE%A3/id1600654269\">BookTime</a></li>\n</ul>\n<h3 id=\"代码会说话\"><a href=\"#代码会说话\" class=\"headerlink\" title=\"代码会说话\"></a>代码会说话</h3><ul>\n<li>Github: <a href=\"https://github.com/aruis\">aruis</a></li>\n<li>贡献过的项目<ul>\n<li><a href=\"https://github.com/eclipse/vert.x\">Vert.x</a></li>\n<li><a href=\"https://github.com/pac4j/vertx-pac4j\">pac4j</a></li>\n<li><a href=\"https://github.com/sbraconnier/jodconverter\">jodconverter</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"这里也有我\"><a href=\"#这里也有我\" class=\"headerlink\" title=\"这里也有我\"></a>这里也有我</h3><ul>\n<li><a href=\"https://space.bilibili.com/24370353\">bilibili</a></li>\n<li><a href=\"https://www.zhihu.com/people/aruis/activities\">知乎</a></li>\n</ul>\n<h3 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h3><ul>\n<li>lovaruis#gmail.com</li>\n</ul>\n"}],"Post":[{"title":"JVM下最好用的前端自动化测试工具Geb","date":"2018-08-04T05:56:28.000Z","_content":"接触了`Angular`才知道前端有个端到端测试的说法，然后了解到有`WebDriver`这种神奇的存在，瞬间打开了新世纪的大门。后来几经寻觅，终于发现一个运行在`JVM`中的前端测试工具，那就是[Geb](http://gebish.org)。\n来段代码：\n```\nimport geb.Browser\n \nBrowser.drive {\n    go \"http://myapp.com/login\"\n     \n    assert $(\"h1\").text() == \"Please Login\"\n     \n    $(\"form.login\").with {\n        username = \"admin\"\n        password = \"password\"\n        login().click()\n    }\n     \n    assert $(\"h1\").text() == \"Admin Section\"\n}\n```\n是不是很易懂，一个有`Java`与`jQuery`基础的人应该非常容易上手。\n还记得那个阿里员工抢月饼事件么，估计看了新闻之后，前端程序员都会觉得0门槛，但是后端程序员，可能就会觉得自己的技术栈鞭长莫及了。有了`Geb`，我们能做的事情会更多，也会更加方便。下一篇，我将介绍如何用`Geb`来实现京东抢券。","source":"_posts/Geb.md","raw":"---\ntitle: JVM下最好用的前端自动化测试工具Geb\ndate: 2018-08-04 13:56:28\ncategories: 程序人生\ntags:\n    - 前端\n    - Geb\n---\n接触了`Angular`才知道前端有个端到端测试的说法，然后了解到有`WebDriver`这种神奇的存在，瞬间打开了新世纪的大门。后来几经寻觅，终于发现一个运行在`JVM`中的前端测试工具，那就是[Geb](http://gebish.org)。\n来段代码：\n```\nimport geb.Browser\n \nBrowser.drive {\n    go \"http://myapp.com/login\"\n     \n    assert $(\"h1\").text() == \"Please Login\"\n     \n    $(\"form.login\").with {\n        username = \"admin\"\n        password = \"password\"\n        login().click()\n    }\n     \n    assert $(\"h1\").text() == \"Admin Section\"\n}\n```\n是不是很易懂，一个有`Java`与`jQuery`基础的人应该非常容易上手。\n还记得那个阿里员工抢月饼事件么，估计看了新闻之后，前端程序员都会觉得0门槛，但是后端程序员，可能就会觉得自己的技术栈鞭长莫及了。有了`Geb`，我们能做的事情会更多，也会更加方便。下一篇，我将介绍如何用`Geb`来实现京东抢券。","slug":"Geb","published":1,"updated":"2018-08-05T00:35:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqm60000y0mzdv5af6vk","content":"<p>接触了<code>Angular</code>才知道前端有个端到端测试的说法，然后了解到有<code>WebDriver</code>这种神奇的存在，瞬间打开了新世纪的大门。后来几经寻觅，终于发现一个运行在<code>JVM</code>中的前端测试工具，那就是<a href=\"http://gebish.org/\">Geb</a>。<br>来段代码：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> geb.Browser</span><br><span class=\"line\"> </span><br><span class=\"line\">Browser.drive &#123;</span><br><span class=\"line\">    go &quot;http://myapp.com/login&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> $(&quot;h1&quot;).text() == &quot;Please Login&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">    $(&quot;form.login&quot;).<span class=\"keyword\">with</span> &#123;</span><br><span class=\"line\">        username = &quot;admin&quot;</span><br><span class=\"line\">        <span class=\"keyword\">password</span> = &quot;password&quot;</span><br><span class=\"line\">        <span class=\"keyword\">login</span>().click()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> $(&quot;h1&quot;).text() == &quot;Admin Section&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是很易懂，一个有<code>Java</code>与<code>jQuery</code>基础的人应该非常容易上手。<br>还记得那个阿里员工抢月饼事件么，估计看了新闻之后，前端程序员都会觉得0门槛，但是后端程序员，可能就会觉得自己的技术栈鞭长莫及了。有了<code>Geb</code>，我们能做的事情会更多，也会更加方便。下一篇，我将介绍如何用<code>Geb</code>来实现京东抢券。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>接触了<code>Angular</code>才知道前端有个端到端测试的说法，然后了解到有<code>WebDriver</code>这种神奇的存在，瞬间打开了新世纪的大门。后来几经寻觅，终于发现一个运行在<code>JVM</code>中的前端测试工具，那就是<a href=\"http://gebish.org/\">Geb</a>。<br>来段代码：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> geb.Browser</span><br><span class=\"line\"> </span><br><span class=\"line\">Browser.drive &#123;</span><br><span class=\"line\">    go &quot;http://myapp.com/login&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> $(&quot;h1&quot;).text() == &quot;Please Login&quot;</span><br><span class=\"line\">     </span><br><span class=\"line\">    $(&quot;form.login&quot;).<span class=\"keyword\">with</span> &#123;</span><br><span class=\"line\">        username = &quot;admin&quot;</span><br><span class=\"line\">        <span class=\"keyword\">password</span> = &quot;password&quot;</span><br><span class=\"line\">        <span class=\"keyword\">login</span>().click()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">assert</span> $(&quot;h1&quot;).text() == &quot;Admin Section&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>是不是很易懂，一个有<code>Java</code>与<code>jQuery</code>基础的人应该非常容易上手。<br>还记得那个阿里员工抢月饼事件么，估计看了新闻之后，前端程序员都会觉得0门槛，但是后端程序员，可能就会觉得自己的技术栈鞭长莫及了。有了<code>Geb</code>，我们能做的事情会更多，也会更加方便。下一篇，我将介绍如何用<code>Geb</code>来实现京东抢券。</p>\n"},{"title":"再谈CompletableFuture","date":"2018-09-12T01:06:33.000Z","_content":"今天是还之前欠的一个账，当时在[Vert.x异步方法转同步](https://www.kankanzhijian.com/2018/07/21/vertx_async_to_sync/)这篇文章里，我提到其关键点是`CompletableFuture`类，今天我们就沿着当时的代码继续掰扯一下这个强大的类。\n先来回顾下当时的代码\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\nString sayHello() {\n    CompletableFuture completableFuture = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(1000, {\n        completableFuture.complete(\"hello world\")\n    })\n\n    return completableFuture.get()\n}\n\nprintln(sayHello())\n```\n`vertx.setTimer`是个先天异步的东西，我们让它来模拟一个异步调用，你可以想象成从网络、磁盘或者其他什么接口，获取到那么一个字符串`hello world`。这么一个过程是异步的。然后在一个非异步程序的大环境下，后续的程序要等待这么一个结果。\n此时我们用到了`CompletableFuture`，并且牵扯到其中的两个方法：`complete(T value)`、`get()`。\n#### `complete(T value)`\n```\nIf not already completed, sets the value returned by get() and related methods to the given value.\n```\n这个很好理解，就是给`completableFuture`塞一个完成的结果，供后续的方法调用获取，最典型的就是`get()`\n#### `get()`\n```\nWaits if necessary for this future to complete, and then returns its result.\n```\n这个`get()`方法源自于`Future`接口，是一个早在`Java 1.5`时代就提供的接口了。这个方法就是典型的阻塞式获取`Future`结果。放在上面的代码里，恰好能起到把`vert.x`的异步调用转换成同步的效果。但其实着不是什么好事，在`Java 8`中特意引入`CompletableFuture`就是为了解决阻塞问题，让异步发挥出更大的优势。\n\n#### 发散一下\n抛开上面有意把异步转同步不说，我们来看看如果借助`CompletableFuture`，把`vert.x`的异步跟`Java 8`的异步有效结合，尝试代码如下：\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\nCompletableFuture sayHello() {\n    CompletableFuture completableFuture = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(1000, {\n        completableFuture.complete(\"hello world\")\n    })\n\n    return completableFuture\n}\n\nsayHello().whenCompleteAsync({ res, th ->\n    println(res)\n})\n```\n简单改造过后，这就是一个遵循`Java 8`中`CompletableFuture`风格的异步使用方式。关键点在于\n`whenCompleteAsync(@NotNull BiConsumer<? super T, ? super Throwable> action)`\n方法，同时还有\n`whenComplete(@NotNull BiConsumer<? super T, ? super Throwable> action)`\n方法可供使用。这两个方法最大的区别是，前者会为`action`的执行上下文准备`ForkJoinPool`线程池环境；而后者会让`action`使用之前`completableFuture.complete()`所处的线程上下文。\n\n#### `CompletableFuture`是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\n* https://colobu.com/2016/02/29/Java-CompletableFuture/\n* https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html\n\n    其中第二篇文章涉及的代码，我已经整理了一份，你可以从这里获取[gist](https://gist.github.com/aruis/135f6e1fa678fc5024ea20db4b9b4eee)\n\n\n\n","source":"_posts/CompletableFuture_something.md","raw":"---\ntitle: 再谈CompletableFuture\ndate: 2018-09-12 09:06:33\ncategories: 程序人生\ntags:\n    - Java\n---\n今天是还之前欠的一个账，当时在[Vert.x异步方法转同步](https://www.kankanzhijian.com/2018/07/21/vertx_async_to_sync/)这篇文章里，我提到其关键点是`CompletableFuture`类，今天我们就沿着当时的代码继续掰扯一下这个强大的类。\n先来回顾下当时的代码\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\nString sayHello() {\n    CompletableFuture completableFuture = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(1000, {\n        completableFuture.complete(\"hello world\")\n    })\n\n    return completableFuture.get()\n}\n\nprintln(sayHello())\n```\n`vertx.setTimer`是个先天异步的东西，我们让它来模拟一个异步调用，你可以想象成从网络、磁盘或者其他什么接口，获取到那么一个字符串`hello world`。这么一个过程是异步的。然后在一个非异步程序的大环境下，后续的程序要等待这么一个结果。\n此时我们用到了`CompletableFuture`，并且牵扯到其中的两个方法：`complete(T value)`、`get()`。\n#### `complete(T value)`\n```\nIf not already completed, sets the value returned by get() and related methods to the given value.\n```\n这个很好理解，就是给`completableFuture`塞一个完成的结果，供后续的方法调用获取，最典型的就是`get()`\n#### `get()`\n```\nWaits if necessary for this future to complete, and then returns its result.\n```\n这个`get()`方法源自于`Future`接口，是一个早在`Java 1.5`时代就提供的接口了。这个方法就是典型的阻塞式获取`Future`结果。放在上面的代码里，恰好能起到把`vert.x`的异步调用转换成同步的效果。但其实着不是什么好事，在`Java 8`中特意引入`CompletableFuture`就是为了解决阻塞问题，让异步发挥出更大的优势。\n\n#### 发散一下\n抛开上面有意把异步转同步不说，我们来看看如果借助`CompletableFuture`，把`vert.x`的异步跟`Java 8`的异步有效结合，尝试代码如下：\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\nCompletableFuture sayHello() {\n    CompletableFuture completableFuture = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(1000, {\n        completableFuture.complete(\"hello world\")\n    })\n\n    return completableFuture\n}\n\nsayHello().whenCompleteAsync({ res, th ->\n    println(res)\n})\n```\n简单改造过后，这就是一个遵循`Java 8`中`CompletableFuture`风格的异步使用方式。关键点在于\n`whenCompleteAsync(@NotNull BiConsumer<? super T, ? super Throwable> action)`\n方法，同时还有\n`whenComplete(@NotNull BiConsumer<? super T, ? super Throwable> action)`\n方法可供使用。这两个方法最大的区别是，前者会为`action`的执行上下文准备`ForkJoinPool`线程池环境；而后者会让`action`使用之前`completableFuture.complete()`所处的线程上下文。\n\n#### `CompletableFuture`是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\n* https://colobu.com/2016/02/29/Java-CompletableFuture/\n* https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html\n\n    其中第二篇文章涉及的代码，我已经整理了一份，你可以从这里获取[gist](https://gist.github.com/aruis/135f6e1fa678fc5024ea20db4b9b4eee)\n\n\n\n","slug":"CompletableFuture_something","published":1,"updated":"2018-09-12T10:00:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqm90002y0mz13rx16uj","content":"<p>今天是还之前欠的一个账，当时在<a href=\"https://www.kankanzhijian.com/2018/07/21/vertx_async_to_sync/\">Vert.x异步方法转同步</a>这篇文章里，我提到其关键点是<code>CompletableFuture</code>类，今天我们就沿着当时的代码继续掰扯一下这个强大的类。<br>先来回顾下当时的代码</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import io<span class=\"selector-class\">.vertx</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.Vertx</span></span><br><span class=\"line\"></span><br><span class=\"line\">import java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.concurrent</span><span class=\"selector-class\">.CompletableFuture</span></span><br><span class=\"line\"></span><br><span class=\"line\">String <span class=\"built_in\">sayHello</span>() &#123;</span><br><span class=\"line\">    CompletableFuture completableFuture = new <span class=\"built_in\">CompletableFuture</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx<span class=\"selector-class\">.vertx</span>()</span><br><span class=\"line\">    vertx<span class=\"selector-class\">.setTimer</span>(<span class=\"number\">1000</span>, &#123;</span><br><span class=\"line\">        completableFuture<span class=\"selector-class\">.complete</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return completableFuture<span class=\"selector-class\">.get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">println</span><span class=\"params\">(sayHello()</span></span>)</span><br></pre></td></tr></table></figure>\n<p><code>vertx.setTimer</code>是个先天异步的东西，我们让它来模拟一个异步调用，你可以想象成从网络、磁盘或者其他什么接口，获取到那么一个字符串<code>hello world</code>。这么一个过程是异步的。然后在一个非异步程序的大环境下，后续的程序要等待这么一个结果。<br>此时我们用到了<code>CompletableFuture</code>，并且牵扯到其中的两个方法：<code>complete(T value)</code>、<code>get()</code>。</p>\n<h4 id=\"complete-T-value\"><a href=\"#complete-T-value\" class=\"headerlink\" title=\"complete(T value)\"></a><code>complete(T value)</code></h4><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">If <span class=\"keyword\">not</span> already completed, sets <span class=\"keyword\">the</span> <span class=\"built_in\">value</span> returned <span class=\"keyword\">by</span> <span class=\"built_in\">get</span>() <span class=\"keyword\">and</span> related methods <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> given <span class=\"built_in\">value</span>.</span><br></pre></td></tr></table></figure>\n<p>这个很好理解，就是给<code>completableFuture</code>塞一个完成的结果，供后续的方法调用获取，最典型的就是<code>get()</code></p>\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a><code>get()</code></h4><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Waits <span class=\"keyword\">if</span> necessary <span class=\"keyword\">for</span> this future <span class=\"keyword\">to</span> complete, <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> returns <span class=\"keyword\">its</span> <span class=\"literal\">result</span>.</span><br></pre></td></tr></table></figure>\n<p>这个<code>get()</code>方法源自于<code>Future</code>接口，是一个早在<code>Java 1.5</code>时代就提供的接口了。这个方法就是典型的阻塞式获取<code>Future</code>结果。放在上面的代码里，恰好能起到把<code>vert.x</code>的异步调用转换成同步的效果。但其实着不是什么好事，在<code>Java 8</code>中特意引入<code>CompletableFuture</code>就是为了解决阻塞问题，让异步发挥出更大的优势。</p>\n<h4 id=\"发散一下\"><a href=\"#发散一下\" class=\"headerlink\" title=\"发散一下\"></a>发散一下</h4><p>抛开上面有意把异步转同步不说，我们来看看如果借助<code>CompletableFuture</code>，把<code>vert.x</code>的异步跟<code>Java 8</code>的异步有效结合，尝试代码如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import io<span class=\"selector-class\">.vertx</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.Vertx</span></span><br><span class=\"line\"></span><br><span class=\"line\">import java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.concurrent</span><span class=\"selector-class\">.CompletableFuture</span></span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture <span class=\"built_in\">sayHello</span>() &#123;</span><br><span class=\"line\">    CompletableFuture completableFuture = new <span class=\"built_in\">CompletableFuture</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx<span class=\"selector-class\">.vertx</span>()</span><br><span class=\"line\">    vertx<span class=\"selector-class\">.setTimer</span>(<span class=\"number\">1000</span>, &#123;</span><br><span class=\"line\">        completableFuture<span class=\"selector-class\">.complete</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return completableFuture</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">sayHello</span><span class=\"params\">()</span></span><span class=\"selector-class\">.whenCompleteAsync</span>(&#123; res, <span class=\"selector-tag\">th</span> -&gt;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>简单改造过后，这就是一个遵循<code>Java 8</code>中<code>CompletableFuture</code>风格的异步使用方式。关键点在于<br><code>whenCompleteAsync(@NotNull BiConsumer&lt;? super T, ? super Throwable&gt; action)</code><br>方法，同时还有<br><code>whenComplete(@NotNull BiConsumer&lt;? super T, ? super Throwable&gt; action)</code><br>方法可供使用。这两个方法最大的区别是，前者会为<code>action</code>的执行上下文准备<code>ForkJoinPool</code>线程池环境；而后者会让<code>action</code>使用之前<code>completableFuture.complete()</code>所处的线程上下文。</p>\n<h4 id=\"CompletableFuture是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\"><a href=\"#CompletableFuture是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\" class=\"headerlink\" title=\"CompletableFuture是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\"></a><code>CompletableFuture</code>是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：</h4><ul>\n<li><p><a href=\"https://colobu.com/2016/02/29/Java-CompletableFuture/\">https://colobu.com/2016/02/29/Java-CompletableFuture/</a></p>\n</li>\n<li><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html\">https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html</a></p>\n<p>  其中第二篇文章涉及的代码，我已经整理了一份，你可以从这里获取<a href=\"https://gist.github.com/aruis/135f6e1fa678fc5024ea20db4b9b4eee\">gist</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>今天是还之前欠的一个账，当时在<a href=\"https://www.kankanzhijian.com/2018/07/21/vertx_async_to_sync/\">Vert.x异步方法转同步</a>这篇文章里，我提到其关键点是<code>CompletableFuture</code>类，今天我们就沿着当时的代码继续掰扯一下这个强大的类。<br>先来回顾下当时的代码</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import io<span class=\"selector-class\">.vertx</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.Vertx</span></span><br><span class=\"line\"></span><br><span class=\"line\">import java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.concurrent</span><span class=\"selector-class\">.CompletableFuture</span></span><br><span class=\"line\"></span><br><span class=\"line\">String <span class=\"built_in\">sayHello</span>() &#123;</span><br><span class=\"line\">    CompletableFuture completableFuture = new <span class=\"built_in\">CompletableFuture</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx<span class=\"selector-class\">.vertx</span>()</span><br><span class=\"line\">    vertx<span class=\"selector-class\">.setTimer</span>(<span class=\"number\">1000</span>, &#123;</span><br><span class=\"line\">        completableFuture<span class=\"selector-class\">.complete</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return completableFuture<span class=\"selector-class\">.get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">println</span><span class=\"params\">(sayHello()</span></span>)</span><br></pre></td></tr></table></figure>\n<p><code>vertx.setTimer</code>是个先天异步的东西，我们让它来模拟一个异步调用，你可以想象成从网络、磁盘或者其他什么接口，获取到那么一个字符串<code>hello world</code>。这么一个过程是异步的。然后在一个非异步程序的大环境下，后续的程序要等待这么一个结果。<br>此时我们用到了<code>CompletableFuture</code>，并且牵扯到其中的两个方法：<code>complete(T value)</code>、<code>get()</code>。</p>\n<h4 id=\"complete-T-value\"><a href=\"#complete-T-value\" class=\"headerlink\" title=\"complete(T value)\"></a><code>complete(T value)</code></h4><figure class=\"highlight livecodeserver\"><table><tr><td class=\"code\"><pre><span class=\"line\">If <span class=\"keyword\">not</span> already completed, sets <span class=\"keyword\">the</span> <span class=\"built_in\">value</span> returned <span class=\"keyword\">by</span> <span class=\"built_in\">get</span>() <span class=\"keyword\">and</span> related methods <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> given <span class=\"built_in\">value</span>.</span><br></pre></td></tr></table></figure>\n<p>这个很好理解，就是给<code>completableFuture</code>塞一个完成的结果，供后续的方法调用获取，最典型的就是<code>get()</code></p>\n<h4 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get()\"></a><code>get()</code></h4><figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">Waits <span class=\"keyword\">if</span> necessary <span class=\"keyword\">for</span> this future <span class=\"keyword\">to</span> complete, <span class=\"keyword\">and</span> <span class=\"keyword\">then</span> returns <span class=\"keyword\">its</span> <span class=\"literal\">result</span>.</span><br></pre></td></tr></table></figure>\n<p>这个<code>get()</code>方法源自于<code>Future</code>接口，是一个早在<code>Java 1.5</code>时代就提供的接口了。这个方法就是典型的阻塞式获取<code>Future</code>结果。放在上面的代码里，恰好能起到把<code>vert.x</code>的异步调用转换成同步的效果。但其实着不是什么好事，在<code>Java 8</code>中特意引入<code>CompletableFuture</code>就是为了解决阻塞问题，让异步发挥出更大的优势。</p>\n<h4 id=\"发散一下\"><a href=\"#发散一下\" class=\"headerlink\" title=\"发散一下\"></a>发散一下</h4><p>抛开上面有意把异步转同步不说，我们来看看如果借助<code>CompletableFuture</code>，把<code>vert.x</code>的异步跟<code>Java 8</code>的异步有效结合，尝试代码如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import io<span class=\"selector-class\">.vertx</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.Vertx</span></span><br><span class=\"line\"></span><br><span class=\"line\">import java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.concurrent</span><span class=\"selector-class\">.CompletableFuture</span></span><br><span class=\"line\"></span><br><span class=\"line\">CompletableFuture <span class=\"built_in\">sayHello</span>() &#123;</span><br><span class=\"line\">    CompletableFuture completableFuture = new <span class=\"built_in\">CompletableFuture</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx<span class=\"selector-class\">.vertx</span>()</span><br><span class=\"line\">    vertx<span class=\"selector-class\">.setTimer</span>(<span class=\"number\">1000</span>, &#123;</span><br><span class=\"line\">        completableFuture<span class=\"selector-class\">.complete</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return completableFuture</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">sayHello</span><span class=\"params\">()</span></span><span class=\"selector-class\">.whenCompleteAsync</span>(&#123; res, <span class=\"selector-tag\">th</span> -&gt;</span><br><span class=\"line\">    <span class=\"built_in\">println</span>(res)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>简单改造过后，这就是一个遵循<code>Java 8</code>中<code>CompletableFuture</code>风格的异步使用方式。关键点在于<br><code>whenCompleteAsync(@NotNull BiConsumer&lt;? super T, ? super Throwable&gt; action)</code><br>方法，同时还有<br><code>whenComplete(@NotNull BiConsumer&lt;? super T, ? super Throwable&gt; action)</code><br>方法可供使用。这两个方法最大的区别是，前者会为<code>action</code>的执行上下文准备<code>ForkJoinPool</code>线程池环境；而后者会让<code>action</code>使用之前<code>completableFuture.complete()</code>所处的线程上下文。</p>\n<h4 id=\"CompletableFuture是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\"><a href=\"#CompletableFuture是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\" class=\"headerlink\" title=\"CompletableFuture是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：\"></a><code>CompletableFuture</code>是一个异常强大且复杂的类，本文所讲的东西不过是九牛一毛。这里推荐两个不错的帖子供大家参考：</h4><ul>\n<li><p><a href=\"https://colobu.com/2016/02/29/Java-CompletableFuture/\">https://colobu.com/2016/02/29/Java-CompletableFuture/</a></p>\n</li>\n<li><p><a href=\"https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html\">https://www.ibm.com/developerworks/cn/java/j-cf-of-jdk8/index.html</a></p>\n<p>  其中第二篇文章涉及的代码，我已经整理了一份，你可以从这里获取<a href=\"https://gist.github.com/aruis/135f6e1fa678fc5024ea20db4b9b4eee\">gist</a></p>\n</li>\n</ul>\n"},{"title":"CentOS系统使用Shadowsocks搭建代理服务","date":"2018-07-19T00:48:00.000Z","_content":"1. 确认pip是否安装，命令`pip help`，返回如图信息，说明已安装\n![](/media/15319616591142.jpg)\n如果返回下图，说明未安装\n![](/media/15319617008516.jpg)\n未安装需要执行以下子步骤：\n    * `yum -y install epel-release`\n    * `yum update`\n    * `yum install python-pip`\n2. 通过pip安装shadowsocks，命令`pip install shadowsocks`\n3. 准备shadowsocks的配置文件，找个地方放就行，比如`/root/shadowsocks.json`，文件内容如下：\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 1988,\n  \"local_address\": \"0.0.0.0\",\n  \"local_port\": 1080,\n  \"password\": \"xyz\",\n  \"timeout\": 300,\n  \"method\": \"aes-256-cfb\",\n  \"fast_open\": false,\n  \"workers\": 5\n}\n```\n    其中`server_port`、`passoword`、`method`三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。\n4. 准备好配置文件之后，就可以启动shadowsocks服务了，命令为`ssserver -c /root/shadowsocks.json -d start`，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。\n5. 客户端下载地址在都在github上，这里给出最常用的mac版和windows版\n    * [mac](https://github.com/shadowsocks/ShadowsocksX-NG/releases)\n    * [windows](https://github.com/shadowsocks/shadowsocks-windows/releases)\n6. 客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：\n    ![](/media/15319627604059.jpg)\n地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。\n7. 确定shadowsocks client是启动状态，就可以享受不一样的网络了。","source":"_posts/CentOS_Shadowsocks.md","raw":"---\ntitle: CentOS系统使用Shadowsocks搭建代理服务\ndate: 2018-07-19 08:48:00\ncategories: 实用技巧\ntags: \n - 代理\n---\n1. 确认pip是否安装，命令`pip help`，返回如图信息，说明已安装\n![](/media/15319616591142.jpg)\n如果返回下图，说明未安装\n![](/media/15319617008516.jpg)\n未安装需要执行以下子步骤：\n    * `yum -y install epel-release`\n    * `yum update`\n    * `yum install python-pip`\n2. 通过pip安装shadowsocks，命令`pip install shadowsocks`\n3. 准备shadowsocks的配置文件，找个地方放就行，比如`/root/shadowsocks.json`，文件内容如下：\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"server_port\": 1988,\n  \"local_address\": \"0.0.0.0\",\n  \"local_port\": 1080,\n  \"password\": \"xyz\",\n  \"timeout\": 300,\n  \"method\": \"aes-256-cfb\",\n  \"fast_open\": false,\n  \"workers\": 5\n}\n```\n    其中`server_port`、`passoword`、`method`三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。\n4. 准备好配置文件之后，就可以启动shadowsocks服务了，命令为`ssserver -c /root/shadowsocks.json -d start`，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。\n5. 客户端下载地址在都在github上，这里给出最常用的mac版和windows版\n    * [mac](https://github.com/shadowsocks/ShadowsocksX-NG/releases)\n    * [windows](https://github.com/shadowsocks/shadowsocks-windows/releases)\n6. 客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：\n    ![](/media/15319627604059.jpg)\n地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。\n7. 确定shadowsocks client是启动状态，就可以享受不一样的网络了。","slug":"CentOS_Shadowsocks","published":1,"updated":"2018-10-25T08:00:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqma0005y0mzee4a0vko","content":"<ol>\n<li>确认pip是否安装，命令<code>pip help</code>，返回如图信息，说明已安装<br><img src=\"/media/15319616591142.jpg\"><br>如果返回下图，说明未安装<br><img src=\"/media/15319617008516.jpg\"><br>未安装需要执行以下子步骤：<ul>\n<li><code>yum -y install epel-release</code></li>\n<li><code>yum update</code></li>\n<li><code>yum install python-pip</code></li>\n</ul>\n</li>\n<li>通过pip安装shadowsocks，命令<code>pip install shadowsocks</code></li>\n<li>准备shadowsocks的配置文件，找个地方放就行，比如<code>/root/shadowsocks.json</code>，文件内容如下：<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;server_port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1988</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;local_address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;local_port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1080</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;password&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xyz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">300</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aes-256-cfb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fast_open&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;workers&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n 其中<code>server_port</code>、<code>passoword</code>、<code>method</code>三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。</li>\n<li>准备好配置文件之后，就可以启动shadowsocks服务了，命令为<code>ssserver -c /root/shadowsocks.json -d start</code>，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。</li>\n<li>客户端下载地址在都在github上，这里给出最常用的mac版和windows版<ul>\n<li><a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases\">mac</a></li>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">windows</a></li>\n</ul>\n</li>\n<li>客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：<br> <img src=\"/media/15319627604059.jpg\"><br>地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。</li>\n<li>确定shadowsocks client是启动状态，就可以享受不一样的网络了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>确认pip是否安装，命令<code>pip help</code>，返回如图信息，说明已安装<br><img src=\"/media/15319616591142.jpg\"><br>如果返回下图，说明未安装<br><img src=\"/media/15319617008516.jpg\"><br>未安装需要执行以下子步骤：<ul>\n<li><code>yum -y install epel-release</code></li>\n<li><code>yum update</code></li>\n<li><code>yum install python-pip</code></li>\n</ul>\n</li>\n<li>通过pip安装shadowsocks，命令<code>pip install shadowsocks</code></li>\n<li>准备shadowsocks的配置文件，找个地方放就行，比如<code>/root/shadowsocks.json</code>，文件内容如下：<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;server&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;server_port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1988</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;local_address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;0.0.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;local_port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1080</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;password&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;xyz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;timeout&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">300</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;aes-256-cfb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;fast_open&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;workers&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n 其中<code>server_port</code>、<code>passoword</code>、<code>method</code>三个参数比较重要，分别对应:代理服务所在端口、链接密码、加密方式，回头要用到。</li>\n<li>准备好配置文件之后，就可以启动shadowsocks服务了，命令为<code>ssserver -c /root/shadowsocks.json -d start</code>，至此shadowsocks服务启动完毕，然后就可以用客户端连接了。</li>\n<li>客户端下载地址在都在github上，这里给出最常用的mac版和windows版<ul>\n<li><a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases\">mac</a></li>\n<li><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\">windows</a></li>\n</ul>\n</li>\n<li>客户端安装完毕，就可以配置服务器连接了，这里给个参考配置：<br> <img src=\"/media/15319627604059.jpg\"><br>地址就是服务器所在的地址，备注随意，剩下的三个配置，正好对应上面提过的配置。</li>\n<li>确定shadowsocks client是启动状态，就可以享受不一样的网络了。</li>\n</ol>\n"},{"title":"IntelliJ IDEA在Winodws下Gradle乱码问题","date":"2018-07-23T00:19:25.000Z","_content":"恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成`UTF-8`就不会踩坑。可是现实是残酷的。\n比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。\n需要在\n```File | Settings | Build, Execution, Deployment | Gradle```\n下，找到`Gradle VM options`，然后填入配置`-Dfile.encoding=UTF-8`\n\n还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，`GRADLE_HOME`下的`bin`目录，找到`set DEFAULT_JVM_OPTS=`修改为\n`set DEFAULT_JVM_OPTS=\"-Dfile.encoding=UTF-8\"`\n即可。","source":"_posts/IntelliJ-IDEA_Winodws_Gradle_garbled.md","raw":"---\ntitle: IntelliJ IDEA在Winodws下Gradle乱码问题\ndate: 2018-07-23 08:19:25\ncategories: 程序人生\ntags:\n    - gradle\n    - 乱码\n    - IntelliJ IDEA\n---\n恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成`UTF-8`就不会踩坑。可是现实是残酷的。\n比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。\n需要在\n```File | Settings | Build, Execution, Deployment | Gradle```\n下，找到`Gradle VM options`，然后填入配置`-Dfile.encoding=UTF-8`\n\n还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，`GRADLE_HOME`下的`bin`目录，找到`set DEFAULT_JVM_OPTS=`修改为\n`set DEFAULT_JVM_OPTS=\"-Dfile.encoding=UTF-8\"`\n即可。","slug":"IntelliJ-IDEA_Winodws_Gradle_garbled","published":1,"updated":"2018-07-31T00:15:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmb0006y0mzdrw2ccth","content":"<p>恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成<code>UTF-8</code>就不会踩坑。可是现实是残酷的。<br>比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。<br>需要在<br><code>File | Settings | Build, Execution, Deployment | Gradle</code><br>下，找到<code>Gradle VM options</code>，然后填入配置<code>-Dfile.encoding=UTF-8</code></p>\n<p>还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，<code>GRADLE_HOME</code>下的<code>bin</code>目录，找到<code>set DEFAULT_JVM_OPTS=</code>修改为<br><code>set DEFAULT_JVM_OPTS=&quot;-Dfile.encoding=UTF-8&quot;</code><br>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>恐怕没有哪个中国程序员没被字符编码的问题坑过吧。本以为把能设置字符集的地方，都设置成<code>UTF-8</code>就不会踩坑。可是现实是残酷的。<br>比如在中文windows系统环境下，如果使用IntelliJ IDEA开发工具，同时跑gradle项目，那就要小心了。<br>需要在<br><code>File | Settings | Build, Execution, Deployment | Gradle</code><br>下，找到<code>Gradle VM options</code>，然后填入配置<code>-Dfile.encoding=UTF-8</code></p>\n<p>还有一种方法，可以通过修改gradle.bat这个文件来实现，改文件通常存放于，<code>GRADLE_HOME</code>下的<code>bin</code>目录，找到<code>set DEFAULT_JVM_OPTS=</code>修改为<br><code>set DEFAULT_JVM_OPTS=&quot;-Dfile.encoding=UTF-8&quot;</code><br>即可。</p>\n"},{"title":"IntelliJ IDEA中的SQL Explain","date":"2018-07-31T00:11:45.000Z","_content":"善于利用`SQL`的`explain`是`SQL`调整优化的必经之路。但是遇到复杂的`SQL`，查看`explain`结果也是有点困难的。比如这样的：\n![](/media/15329969004233.jpg)\n好在很多数据库的客户端都提供了图形化的表现形式，比如`PostgreSQL`的`pgAdmin4`就能看到如下效果：\n![](/media/15329972711011.jpg)\n不过如果有个工具，能够hold住所有主流的关系型数据库的话，就更嗨皮了。答案就是`IntelliJ IDEA`。如果你还没有尝试过其自带的`Database`功能的话，推荐现在就试一下。在屏幕右侧应该能找到。\n![](/media/15329976430336.jpg)\n只需要按照向导添加相应的数据库连接就好了。不过这个功能免费的社区版是没有的。\n创建完数据库链接后，通过此按钮打开`SQL Console`窗口\n![](/media/15329978378217.jpg)\n然后在里面就可以愉快的编写`SQL`了。\n先来一段：\n![](/media/15329983218004.jpg)\n现在我们可以尝试通过`IntelliJ IDEA`执行一次`explain`了。\n* 先把光标移动到需要`explain`的`SQL`上\n* 右键呼出菜单，找到![](/media/15329984643618.jpg)   执行之\n* 就能看到效果了![](/media/15329985590089.jpg)\n* 点击`Show Visualisation`可以呼出图形化展示![](/media/15329987110873.jpg)\n* 如果觉得这个功能实用的话，可以给它设置一个快捷键，方法如下\n    * 呼出`Find Action...`窗口（快捷键：⇧⌘A），在`Help`菜单下能找到\n    * 搜索到`explain`![](/media/15329989448215.jpg)\n    * 按快捷键⌥↩︎，或者windows下的`alt+回车`\n    * 就可以设置一个快捷键了![](/media/15329990816786.jpg)\n\n\n\n\n\n\n\n\n\n","source":"_posts/IntelliJ-IDEA_SQL-Explain.md","raw":"---\ntitle: IntelliJ IDEA中的SQL Explain\ndate: 2018-07-31 08:11:45\ncategories: 程序人生\ntags:\n    - IntelliJ IDEA\n---\n善于利用`SQL`的`explain`是`SQL`调整优化的必经之路。但是遇到复杂的`SQL`，查看`explain`结果也是有点困难的。比如这样的：\n![](/media/15329969004233.jpg)\n好在很多数据库的客户端都提供了图形化的表现形式，比如`PostgreSQL`的`pgAdmin4`就能看到如下效果：\n![](/media/15329972711011.jpg)\n不过如果有个工具，能够hold住所有主流的关系型数据库的话，就更嗨皮了。答案就是`IntelliJ IDEA`。如果你还没有尝试过其自带的`Database`功能的话，推荐现在就试一下。在屏幕右侧应该能找到。\n![](/media/15329976430336.jpg)\n只需要按照向导添加相应的数据库连接就好了。不过这个功能免费的社区版是没有的。\n创建完数据库链接后，通过此按钮打开`SQL Console`窗口\n![](/media/15329978378217.jpg)\n然后在里面就可以愉快的编写`SQL`了。\n先来一段：\n![](/media/15329983218004.jpg)\n现在我们可以尝试通过`IntelliJ IDEA`执行一次`explain`了。\n* 先把光标移动到需要`explain`的`SQL`上\n* 右键呼出菜单，找到![](/media/15329984643618.jpg)   执行之\n* 就能看到效果了![](/media/15329985590089.jpg)\n* 点击`Show Visualisation`可以呼出图形化展示![](/media/15329987110873.jpg)\n* 如果觉得这个功能实用的话，可以给它设置一个快捷键，方法如下\n    * 呼出`Find Action...`窗口（快捷键：⇧⌘A），在`Help`菜单下能找到\n    * 搜索到`explain`![](/media/15329989448215.jpg)\n    * 按快捷键⌥↩︎，或者windows下的`alt+回车`\n    * 就可以设置一个快捷键了![](/media/15329990816786.jpg)\n\n\n\n\n\n\n\n\n\n","slug":"IntelliJ-IDEA_SQL-Explain","published":1,"updated":"2018-07-31T01:05:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmb0007y0mzbsu3et26","content":"<p>善于利用<code>SQL</code>的<code>explain</code>是<code>SQL</code>调整优化的必经之路。但是遇到复杂的<code>SQL</code>，查看<code>explain</code>结果也是有点困难的。比如这样的：<br><img src=\"/media/15329969004233.jpg\"><br>好在很多数据库的客户端都提供了图形化的表现形式，比如<code>PostgreSQL</code>的<code>pgAdmin4</code>就能看到如下效果：<br><img src=\"/media/15329972711011.jpg\"><br>不过如果有个工具，能够hold住所有主流的关系型数据库的话，就更嗨皮了。答案就是<code>IntelliJ IDEA</code>。如果你还没有尝试过其自带的<code>Database</code>功能的话，推荐现在就试一下。在屏幕右侧应该能找到。<br><img src=\"/media/15329976430336.jpg\"><br>只需要按照向导添加相应的数据库连接就好了。不过这个功能免费的社区版是没有的。<br>创建完数据库链接后，通过此按钮打开<code>SQL Console</code>窗口<br><img src=\"/media/15329978378217.jpg\"><br>然后在里面就可以愉快的编写<code>SQL</code>了。<br>先来一段：<br><img src=\"/media/15329983218004.jpg\"><br>现在我们可以尝试通过<code>IntelliJ IDEA</code>执行一次<code>explain</code>了。</p>\n<ul>\n<li>先把光标移动到需要<code>explain</code>的<code>SQL</code>上</li>\n<li>右键呼出菜单，找到<img src=\"/media/15329984643618.jpg\">   执行之</li>\n<li>就能看到效果了<img src=\"/media/15329985590089.jpg\"></li>\n<li>点击<code>Show Visualisation</code>可以呼出图形化展示<img src=\"/media/15329987110873.jpg\"></li>\n<li>如果觉得这个功能实用的话，可以给它设置一个快捷键，方法如下<ul>\n<li>呼出<code>Find Action...</code>窗口（快捷键：⇧⌘A），在<code>Help</code>菜单下能找到</li>\n<li>搜索到<code>explain</code><img src=\"/media/15329989448215.jpg\"></li>\n<li>按快捷键⌥↩︎，或者windows下的<code>alt+回车</code></li>\n<li>就可以设置一个快捷键了<img src=\"/media/15329990816786.jpg\"></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>善于利用<code>SQL</code>的<code>explain</code>是<code>SQL</code>调整优化的必经之路。但是遇到复杂的<code>SQL</code>，查看<code>explain</code>结果也是有点困难的。比如这样的：<br><img src=\"/media/15329969004233.jpg\"><br>好在很多数据库的客户端都提供了图形化的表现形式，比如<code>PostgreSQL</code>的<code>pgAdmin4</code>就能看到如下效果：<br><img src=\"/media/15329972711011.jpg\"><br>不过如果有个工具，能够hold住所有主流的关系型数据库的话，就更嗨皮了。答案就是<code>IntelliJ IDEA</code>。如果你还没有尝试过其自带的<code>Database</code>功能的话，推荐现在就试一下。在屏幕右侧应该能找到。<br><img src=\"/media/15329976430336.jpg\"><br>只需要按照向导添加相应的数据库连接就好了。不过这个功能免费的社区版是没有的。<br>创建完数据库链接后，通过此按钮打开<code>SQL Console</code>窗口<br><img src=\"/media/15329978378217.jpg\"><br>然后在里面就可以愉快的编写<code>SQL</code>了。<br>先来一段：<br><img src=\"/media/15329983218004.jpg\"><br>现在我们可以尝试通过<code>IntelliJ IDEA</code>执行一次<code>explain</code>了。</p>\n<ul>\n<li>先把光标移动到需要<code>explain</code>的<code>SQL</code>上</li>\n<li>右键呼出菜单，找到<img src=\"/media/15329984643618.jpg\">   执行之</li>\n<li>就能看到效果了<img src=\"/media/15329985590089.jpg\"></li>\n<li>点击<code>Show Visualisation</code>可以呼出图形化展示<img src=\"/media/15329987110873.jpg\"></li>\n<li>如果觉得这个功能实用的话，可以给它设置一个快捷键，方法如下<ul>\n<li>呼出<code>Find Action...</code>窗口（快捷键：⇧⌘A），在<code>Help</code>菜单下能找到</li>\n<li>搜索到<code>explain</code><img src=\"/media/15329989448215.jpg\"></li>\n<li>按快捷键⌥↩︎，或者windows下的<code>alt+回车</code></li>\n<li>就可以设置一个快捷键了<img src=\"/media/15329990816786.jpg\"></li>\n</ul>\n</li>\n</ul>\n"},{"title":"被忽略的IntelliJ IDEA常用快捷键","date":"2018-07-28T02:57:18.000Z","_content":"* 跳转到方法声明处 （Go to declaration） ⌘B\n* 快速查看声明（Open quick definition lookup）⇧⌘I\n* 快速查看文档（Quick documentation lookup）^J\n* 块级注释（Comment/uncomment with block comment）^⇧/\n* 查找被调用处（Show usages）⌥⌘F7\n* 在本文件高亮引用，可以用在return上（Highlight usages in file）⇧⌘F7\n* 弹出重构窗口 ⌥⇧⌘T\n* 补全代码（Complete statement）⇧⌘↩︎\n* 查找功能（Find Action...）⇧⌘A，紧接着如果要给找到的功能设置快捷键，就继续⌥↩︎\n ","source":"_posts/IntelliJ-IDEA_hot_keys.md","raw":"---\ntitle: 被忽略的IntelliJ IDEA常用快捷键\ndate: 2018-07-28 10:57:18\ncategories: 程序人生\ntags:\n    - IntelliJ IDEA\n---\n* 跳转到方法声明处 （Go to declaration） ⌘B\n* 快速查看声明（Open quick definition lookup）⇧⌘I\n* 快速查看文档（Quick documentation lookup）^J\n* 块级注释（Comment/uncomment with block comment）^⇧/\n* 查找被调用处（Show usages）⌥⌘F7\n* 在本文件高亮引用，可以用在return上（Highlight usages in file）⇧⌘F7\n* 弹出重构窗口 ⌥⇧⌘T\n* 补全代码（Complete statement）⇧⌘↩︎\n* 查找功能（Find Action...）⇧⌘A，紧接着如果要给找到的功能设置快捷键，就继续⌥↩︎\n ","slug":"IntelliJ-IDEA_hot_keys","published":1,"updated":"2018-07-31T00:15:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmc000ay0mz72nw22ub","content":"<ul>\n<li>跳转到方法声明处 （Go to declaration） ⌘B</li>\n<li>快速查看声明（Open quick definition lookup）⇧⌘I</li>\n<li>快速查看文档（Quick documentation lookup）^J</li>\n<li>块级注释（Comment&#x2F;uncomment with block comment）^⇧&#x2F;</li>\n<li>查找被调用处（Show usages）⌥⌘F7</li>\n<li>在本文件高亮引用，可以用在return上（Highlight usages in file）⇧⌘F7</li>\n<li>弹出重构窗口 ⌥⇧⌘T</li>\n<li>补全代码（Complete statement）⇧⌘↩︎</li>\n<li>查找功能（Find Action…）⇧⌘A，紧接着如果要给找到的功能设置快捷键，就继续⌥↩︎</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>跳转到方法声明处 （Go to declaration） ⌘B</li>\n<li>快速查看声明（Open quick definition lookup）⇧⌘I</li>\n<li>快速查看文档（Quick documentation lookup）^J</li>\n<li>块级注释（Comment&#x2F;uncomment with block comment）^⇧&#x2F;</li>\n<li>查找被调用处（Show usages）⌥⌘F7</li>\n<li>在本文件高亮引用，可以用在return上（Highlight usages in file）⇧⌘F7</li>\n<li>弹出重构窗口 ⌥⇧⌘T</li>\n<li>补全代码（Complete statement）⇧⌘↩︎</li>\n<li>查找功能（Find Action…）⇧⌘A，紧接着如果要给找到的功能设置快捷键，就继续⌥↩︎</li>\n</ul>\n"},{"title":"Linux防火墙常用命令","date":"2018-08-19T00:52:02.000Z","_content":"1. 安装防火墙\n\n    ```\n    yum install firewalld\n    ```\n\n2. 永久放行端口\n\n    ```\n    firewall-cmd --add-port=54321/tcp --permanent\n    ```\n    *临时的话，把--permanent去掉*\n    \n3. 使配置生效\n\n    ```\n    firewall-cmd --reload\n    ```\n    \n4. 移除放行端口\n    ```\n    firewall-cmd --remove-port=54321/tcp --permanent\n    ```\n    \n5. 查看所有放行端口\n    ```\n    firewall-cmd --list-ports\n    ```\n    \n这里只列出最简单的一些用法，更多高阶用法请查看官方文档：https://firewalld.org/documentation/man-pages/firewall-cmd.html    \n    ","source":"_posts/Linux_firewall-cmd.md","raw":"---\ntitle: Linux防火墙常用命令\ndate: 2018-08-19 08:52:02\ncategories: 程序人生\ntags:\n    - Linux\n---\n1. 安装防火墙\n\n    ```\n    yum install firewalld\n    ```\n\n2. 永久放行端口\n\n    ```\n    firewall-cmd --add-port=54321/tcp --permanent\n    ```\n    *临时的话，把--permanent去掉*\n    \n3. 使配置生效\n\n    ```\n    firewall-cmd --reload\n    ```\n    \n4. 移除放行端口\n    ```\n    firewall-cmd --remove-port=54321/tcp --permanent\n    ```\n    \n5. 查看所有放行端口\n    ```\n    firewall-cmd --list-ports\n    ```\n    \n这里只列出最简单的一些用法，更多高阶用法请查看官方文档：https://firewalld.org/documentation/man-pages/firewall-cmd.html    \n    ","slug":"Linux_firewall-cmd","published":1,"updated":"2018-08-19T01:02:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmc000by0mz3e9pbj34","content":"<ol>\n<li><p>安装防火墙</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> firewalld</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>永久放行端口</p>\n <figure class=\"highlight brainfuck\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">add</span><span class=\"literal\">-</span><span class=\"comment\">port=54321/tcp</span> <span class=\"literal\">--</span><span class=\"comment\">permanent</span></span><br></pre></td></tr></table></figure>\n<p> <em>临时的话，把–permanent去掉</em></p>\n</li>\n<li><p>使配置生效</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"comment\">--reload</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>移除放行端口</p>\n <figure class=\"highlight brainfuck\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">remove</span><span class=\"literal\">-</span><span class=\"comment\">port=54321/tcp</span> <span class=\"literal\">--</span><span class=\"comment\">permanent</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有放行端口</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"comment\">--list-ports</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这里只列出最简单的一些用法，更多高阶用法请查看官方文档：<a href=\"https://firewalld.org/documentation/man-pages/firewall-cmd.html\">https://firewalld.org/documentation/man-pages/firewall-cmd.html</a>    \n    </p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>安装防火墙</p>\n <figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> firewalld</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>永久放行端口</p>\n <figure class=\"highlight brainfuck\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">add</span><span class=\"literal\">-</span><span class=\"comment\">port=54321/tcp</span> <span class=\"literal\">--</span><span class=\"comment\">permanent</span></span><br></pre></td></tr></table></figure>\n<p> <em>临时的话，把–permanent去掉</em></p>\n</li>\n<li><p>使配置生效</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"comment\">--reload</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>移除放行端口</p>\n <figure class=\"highlight brainfuck\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">firewall</span><span class=\"literal\">-</span><span class=\"comment\">cmd</span> <span class=\"literal\">--</span><span class=\"comment\">remove</span><span class=\"literal\">-</span><span class=\"comment\">port=54321/tcp</span> <span class=\"literal\">--</span><span class=\"comment\">permanent</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看所有放行端口</p>\n <figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd <span class=\"comment\">--list-ports</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这里只列出最简单的一些用法，更多高阶用法请查看官方文档：<a href=\"https://firewalld.org/documentation/man-pages/firewall-cmd.html\">https://firewalld.org/documentation/man-pages/firewall-cmd.html</a>    \n    </p>\n"},{"title":"IntelliJ IDEA中那些锦上添花的小技巧","date":"2018-09-07T00:10:48.000Z","_content":"`IntelliJ IDEA`作为相当主流的`Java`开发工具，网上分享其使用技巧的如汗牛充栋。今天我从自己的角度，分享一些经常被人忽视，同时也不怎么重要的使用技巧，权作锦上添花之用。\n#### 用`Toolbox`来管理`IntelliJ IDEA`\n自己安装`IntelliJ IDEA`诚然没什么难度，但是架不住其更新频率实在太高，而且有时候还没有升级包可用。所以通过`Toolbox`来保持`IntelliJ IDEA`永远在最新版本是一种相当有效的做法。\n\n#### 用`Dracula`插件来美化代码配色\n![](/media/15363162820957.jpg)\n美化后的代码配色如上图，愿项目地址在此：https://draculatheme.com/jetbrains/ 如何使用，该项目文档已经讲的很清楚了\n\n#### 编辑`VM Options`\n`IntelliJ IDEA`毕竟还是`Java`程序，想要发挥最大性能，还是需要好好维护`JVM`参数的。早期`IntelliJ IDEA`版本中，要维护`VM Options`是需要到该程序安装目录找到一个特殊文件手动编辑的。现在处理起来简单多了，只需要点菜单的这里，如图：\n![](/media/15363168799795.jpg)\n\n就可以方便地在`IntelliJ IDEA`环境中编辑`VM Options`了。","source":"_posts/IntelliJ_IDEA_tips.md","raw":"---\ntitle: IntelliJ IDEA中那些锦上添花的小技巧\ndate: 2018-09-07 08:10:48\ncategories: 程序人生\ntags:\n    - IDEA\n---\n`IntelliJ IDEA`作为相当主流的`Java`开发工具，网上分享其使用技巧的如汗牛充栋。今天我从自己的角度，分享一些经常被人忽视，同时也不怎么重要的使用技巧，权作锦上添花之用。\n#### 用`Toolbox`来管理`IntelliJ IDEA`\n自己安装`IntelliJ IDEA`诚然没什么难度，但是架不住其更新频率实在太高，而且有时候还没有升级包可用。所以通过`Toolbox`来保持`IntelliJ IDEA`永远在最新版本是一种相当有效的做法。\n\n#### 用`Dracula`插件来美化代码配色\n![](/media/15363162820957.jpg)\n美化后的代码配色如上图，愿项目地址在此：https://draculatheme.com/jetbrains/ 如何使用，该项目文档已经讲的很清楚了\n\n#### 编辑`VM Options`\n`IntelliJ IDEA`毕竟还是`Java`程序，想要发挥最大性能，还是需要好好维护`JVM`参数的。早期`IntelliJ IDEA`版本中，要维护`VM Options`是需要到该程序安装目录找到一个特殊文件手动编辑的。现在处理起来简单多了，只需要点菜单的这里，如图：\n![](/media/15363168799795.jpg)\n\n就可以方便地在`IntelliJ IDEA`环境中编辑`VM Options`了。","slug":"IntelliJ_IDEA_tips","published":1,"updated":"2018-09-07T10:41:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmd000fy0mz2hsx8ih6","content":"<p><code>IntelliJ IDEA</code>作为相当主流的<code>Java</code>开发工具，网上分享其使用技巧的如汗牛充栋。今天我从自己的角度，分享一些经常被人忽视，同时也不怎么重要的使用技巧，权作锦上添花之用。</p>\n<h4 id=\"用Toolbox来管理IntelliJ-IDEA\"><a href=\"#用Toolbox来管理IntelliJ-IDEA\" class=\"headerlink\" title=\"用Toolbox来管理IntelliJ IDEA\"></a>用<code>Toolbox</code>来管理<code>IntelliJ IDEA</code></h4><p>自己安装<code>IntelliJ IDEA</code>诚然没什么难度，但是架不住其更新频率实在太高，而且有时候还没有升级包可用。所以通过<code>Toolbox</code>来保持<code>IntelliJ IDEA</code>永远在最新版本是一种相当有效的做法。</p>\n<h4 id=\"用Dracula插件来美化代码配色\"><a href=\"#用Dracula插件来美化代码配色\" class=\"headerlink\" title=\"用Dracula插件来美化代码配色\"></a>用<code>Dracula</code>插件来美化代码配色</h4><p><img src=\"/media/15363162820957.jpg\"><br>美化后的代码配色如上图，愿项目地址在此：<a href=\"https://draculatheme.com/jetbrains/\">https://draculatheme.com/jetbrains/</a> 如何使用，该项目文档已经讲的很清楚了</p>\n<h4 id=\"编辑VM-Options\"><a href=\"#编辑VM-Options\" class=\"headerlink\" title=\"编辑VM Options\"></a>编辑<code>VM Options</code></h4><p><code>IntelliJ IDEA</code>毕竟还是<code>Java</code>程序，想要发挥最大性能，还是需要好好维护<code>JVM</code>参数的。早期<code>IntelliJ IDEA</code>版本中，要维护<code>VM Options</code>是需要到该程序安装目录找到一个特殊文件手动编辑的。现在处理起来简单多了，只需要点菜单的这里，如图：<br><img src=\"/media/15363168799795.jpg\"></p>\n<p>就可以方便地在<code>IntelliJ IDEA</code>环境中编辑<code>VM Options</code>了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>IntelliJ IDEA</code>作为相当主流的<code>Java</code>开发工具，网上分享其使用技巧的如汗牛充栋。今天我从自己的角度，分享一些经常被人忽视，同时也不怎么重要的使用技巧，权作锦上添花之用。</p>\n<h4 id=\"用Toolbox来管理IntelliJ-IDEA\"><a href=\"#用Toolbox来管理IntelliJ-IDEA\" class=\"headerlink\" title=\"用Toolbox来管理IntelliJ IDEA\"></a>用<code>Toolbox</code>来管理<code>IntelliJ IDEA</code></h4><p>自己安装<code>IntelliJ IDEA</code>诚然没什么难度，但是架不住其更新频率实在太高，而且有时候还没有升级包可用。所以通过<code>Toolbox</code>来保持<code>IntelliJ IDEA</code>永远在最新版本是一种相当有效的做法。</p>\n<h4 id=\"用Dracula插件来美化代码配色\"><a href=\"#用Dracula插件来美化代码配色\" class=\"headerlink\" title=\"用Dracula插件来美化代码配色\"></a>用<code>Dracula</code>插件来美化代码配色</h4><p><img src=\"/media/15363162820957.jpg\"><br>美化后的代码配色如上图，愿项目地址在此：<a href=\"https://draculatheme.com/jetbrains/\">https://draculatheme.com/jetbrains/</a> 如何使用，该项目文档已经讲的很清楚了</p>\n<h4 id=\"编辑VM-Options\"><a href=\"#编辑VM-Options\" class=\"headerlink\" title=\"编辑VM Options\"></a>编辑<code>VM Options</code></h4><p><code>IntelliJ IDEA</code>毕竟还是<code>Java</code>程序，想要发挥最大性能，还是需要好好维护<code>JVM</code>参数的。早期<code>IntelliJ IDEA</code>版本中，要维护<code>VM Options</code>是需要到该程序安装目录找到一个特殊文件手动编辑的。现在处理起来简单多了，只需要点菜单的这里，如图：<br><img src=\"/media/15363168799795.jpg\"></p>\n<p>就可以方便地在<code>IntelliJ IDEA</code>环境中编辑<code>VM Options</code>了。</p>\n"},{"title":"MySQL日期字段同时实现新增默认值及修改默认值","date":"2018-10-15T07:47:05.000Z","_content":"如果说`MySQL`有什么功能是值得我留恋的，那这个功能绝对能排第一。要知道在`PostgreSQL`实现这么个修改默认值，还非得写个触发器不可，对新手来说太不友好了（具体可参考[PostgreSQL中实现更新默认值](https://www.kankanzhijian.com/2018/08/16/PostgreSQL_auto_modify_defaults_1/)）。\n来看下在`MySQL`里怎么做，简单的一行\n```\nALTER TABLE datalock ADD t_update  timestamp default current_timestamp on update current_timestamp COMMENT '变动时间';\n```\n就可以把新增默认值、修改默认值同时设置。如果只想设置修改默认值，可以更简单：\n```\nALTER TABLE datalock ADD t_update  timestamp  on update current_timestamp COMMENT '变动时间';\n```\n","source":"_posts/MySQL_column_default_current_timestamp.md","raw":"---\ntitle: MySQL日期字段同时实现新增默认值及修改默认值\ndate: 2018-10-15 15:47:05\ncategories: 程序人生\ntags:\n    - MySQL\n---\n如果说`MySQL`有什么功能是值得我留恋的，那这个功能绝对能排第一。要知道在`PostgreSQL`实现这么个修改默认值，还非得写个触发器不可，对新手来说太不友好了（具体可参考[PostgreSQL中实现更新默认值](https://www.kankanzhijian.com/2018/08/16/PostgreSQL_auto_modify_defaults_1/)）。\n来看下在`MySQL`里怎么做，简单的一行\n```\nALTER TABLE datalock ADD t_update  timestamp default current_timestamp on update current_timestamp COMMENT '变动时间';\n```\n就可以把新增默认值、修改默认值同时设置。如果只想设置修改默认值，可以更简单：\n```\nALTER TABLE datalock ADD t_update  timestamp  on update current_timestamp COMMENT '变动时间';\n```\n","slug":"MySQL_column_default_current_timestamp","published":1,"updated":"2018-10-15T07:55:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqme000iy0mzdcsc4aj4","content":"<p>如果说<code>MySQL</code>有什么功能是值得我留恋的，那这个功能绝对能排第一。要知道在<code>PostgreSQL</code>实现这么个修改默认值，还非得写个触发器不可，对新手来说太不友好了（具体可参考<a href=\"https://www.kankanzhijian.com/2018/08/16/PostgreSQL_auto_modify_defaults_1/\">PostgreSQL中实现更新默认值</a>）。<br>来看下在<code>MySQL</code>里怎么做，简单的一行</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> datalock <span class=\"keyword\">ADD</span> t_update  <span class=\"type\">timestamp</span> <span class=\"keyword\">default</span> <span class=\"built_in\">current_timestamp</span> <span class=\"keyword\">on</span> <span class=\"keyword\">update</span> <span class=\"built_in\">current_timestamp</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;变动时间&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>就可以把新增默认值、修改默认值同时设置。如果只想设置修改默认值，可以更简单：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> datalock <span class=\"keyword\">ADD</span> t_update  <span class=\"type\">timestamp</span>  <span class=\"keyword\">on</span> <span class=\"keyword\">update</span> <span class=\"built_in\">current_timestamp</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;变动时间&#x27;</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>如果说<code>MySQL</code>有什么功能是值得我留恋的，那这个功能绝对能排第一。要知道在<code>PostgreSQL</code>实现这么个修改默认值，还非得写个触发器不可，对新手来说太不友好了（具体可参考<a href=\"https://www.kankanzhijian.com/2018/08/16/PostgreSQL_auto_modify_defaults_1/\">PostgreSQL中实现更新默认值</a>）。<br>来看下在<code>MySQL</code>里怎么做，简单的一行</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> datalock <span class=\"keyword\">ADD</span> t_update  <span class=\"type\">timestamp</span> <span class=\"keyword\">default</span> <span class=\"built_in\">current_timestamp</span> <span class=\"keyword\">on</span> <span class=\"keyword\">update</span> <span class=\"built_in\">current_timestamp</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;变动时间&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>就可以把新增默认值、修改默认值同时设置。如果只想设置修改默认值，可以更简单：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> datalock <span class=\"keyword\">ADD</span> t_update  <span class=\"type\">timestamp</span>  <span class=\"keyword\">on</span> <span class=\"keyword\">update</span> <span class=\"built_in\">current_timestamp</span> <span class=\"keyword\">COMMENT</span> <span class=\"string\">&#x27;变动时间&#x27;</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"家长的责任及义务","date":"2018-08-13T01:21:18.000Z","_content":"## 身为家长，到底能为孩子做些什么，什么又是最重要的呢\n### 我认为按重要程度，依次有这几点\n1. 和睦温馨的家庭氛围\n2. 不论工作、学习如何辛苦，始终不忘身体健康是第一要务\n3. 活到老学到老的人生态度\n4. 能够支持孩子从事学习活动的经济基础\n","source":"_posts/Parental_responsibilities_and_obligations.md","raw":"---\ntitle: 家长的责任及义务\ndate: 2018-08-13 09:21:18\ncategories: 文艺中年\ntags:\n    - 教育子女\n---\n## 身为家长，到底能为孩子做些什么，什么又是最重要的呢\n### 我认为按重要程度，依次有这几点\n1. 和睦温馨的家庭氛围\n2. 不论工作、学习如何辛苦，始终不忘身体健康是第一要务\n3. 活到老学到老的人生态度\n4. 能够支持孩子从事学习活动的经济基础\n","slug":"Parental_responsibilities_and_obligations","published":1,"updated":"2018-08-13T01:22:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqme000my0mz3ysndmre","content":"<h2 id=\"身为家长，到底能为孩子做些什么，什么又是最重要的呢\"><a href=\"#身为家长，到底能为孩子做些什么，什么又是最重要的呢\" class=\"headerlink\" title=\"身为家长，到底能为孩子做些什么，什么又是最重要的呢\"></a>身为家长，到底能为孩子做些什么，什么又是最重要的呢</h2><h3 id=\"我认为按重要程度，依次有这几点\"><a href=\"#我认为按重要程度，依次有这几点\" class=\"headerlink\" title=\"我认为按重要程度，依次有这几点\"></a>我认为按重要程度，依次有这几点</h3><ol>\n<li>和睦温馨的家庭氛围</li>\n<li>不论工作、学习如何辛苦，始终不忘身体健康是第一要务</li>\n<li>活到老学到老的人生态度</li>\n<li>能够支持孩子从事学习活动的经济基础</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"身为家长，到底能为孩子做些什么，什么又是最重要的呢\"><a href=\"#身为家长，到底能为孩子做些什么，什么又是最重要的呢\" class=\"headerlink\" title=\"身为家长，到底能为孩子做些什么，什么又是最重要的呢\"></a>身为家长，到底能为孩子做些什么，什么又是最重要的呢</h2><h3 id=\"我认为按重要程度，依次有这几点\"><a href=\"#我认为按重要程度，依次有这几点\" class=\"headerlink\" title=\"我认为按重要程度，依次有这几点\"></a>我认为按重要程度，依次有这几点</h3><ol>\n<li>和睦温馨的家庭氛围</li>\n<li>不论工作、学习如何辛苦，始终不忘身体健康是第一要务</li>\n<li>活到老学到老的人生态度</li>\n<li>能够支持孩子从事学习活动的经济基础</li>\n</ol>\n"},{"title":"Linux软硬链接使用心得","date":"2018-08-08T00:27:07.000Z","_content":"`ln`命令，涉及到的软硬链接的核心概念已经被阐述的很多了。但是用的时候，到底用软链接，还是用硬链接，有时候还是会让人摸不着头绪。所以我尝试总结几点：\n1. 软硬链接都能起到原始文件只占用一份磁盘资源的目的\n2. 硬链接不能针对文件夹，软链接无此限制\n3. 硬链接可以起到备份的作用，只要有硬链接在，原始文件就能访问；软链接无此效果\n4. 不论软链接，硬链接，`chmod`做的权限变更都具有传递性\n5. 软链接有个坑，如果原始文件删除之后，再创建一个同名的文件，软链接还会莫名其妙建立链接，这可能不一定是我们需要的","source":"_posts/Linux_ln.md","raw":"---\ntitle: Linux软硬链接使用心得\ndate: 2018-08-08 08:27:07\ncategories: 程序人生\ntags:\n    - Linux\n---\n`ln`命令，涉及到的软硬链接的核心概念已经被阐述的很多了。但是用的时候，到底用软链接，还是用硬链接，有时候还是会让人摸不着头绪。所以我尝试总结几点：\n1. 软硬链接都能起到原始文件只占用一份磁盘资源的目的\n2. 硬链接不能针对文件夹，软链接无此限制\n3. 硬链接可以起到备份的作用，只要有硬链接在，原始文件就能访问；软链接无此效果\n4. 不论软链接，硬链接，`chmod`做的权限变更都具有传递性\n5. 软链接有个坑，如果原始文件删除之后，再创建一个同名的文件，软链接还会莫名其妙建立链接，这可能不一定是我们需要的","slug":"Linux_ln","published":1,"updated":"2018-08-08T07:09:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqme000py0mz8upsdlo8","content":"<p><code>ln</code>命令，涉及到的软硬链接的核心概念已经被阐述的很多了。但是用的时候，到底用软链接，还是用硬链接，有时候还是会让人摸不着头绪。所以我尝试总结几点：</p>\n<ol>\n<li>软硬链接都能起到原始文件只占用一份磁盘资源的目的</li>\n<li>硬链接不能针对文件夹，软链接无此限制</li>\n<li>硬链接可以起到备份的作用，只要有硬链接在，原始文件就能访问；软链接无此效果</li>\n<li>不论软链接，硬链接，<code>chmod</code>做的权限变更都具有传递性</li>\n<li>软链接有个坑，如果原始文件删除之后，再创建一个同名的文件，软链接还会莫名其妙建立链接，这可能不一定是我们需要的</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><code>ln</code>命令，涉及到的软硬链接的核心概念已经被阐述的很多了。但是用的时候，到底用软链接，还是用硬链接，有时候还是会让人摸不着头绪。所以我尝试总结几点：</p>\n<ol>\n<li>软硬链接都能起到原始文件只占用一份磁盘资源的目的</li>\n<li>硬链接不能针对文件夹，软链接无此限制</li>\n<li>硬链接可以起到备份的作用，只要有硬链接在，原始文件就能访问；软链接无此效果</li>\n<li>不论软链接，硬链接，<code>chmod</code>做的权限变更都具有传递性</li>\n<li>软链接有个坑，如果原始文件删除之后，再创建一个同名的文件，软链接还会莫名其妙建立链接，这可能不一定是我们需要的</li>\n</ol>\n"},{"title":"使用Google Trends了解某一技术的全球态势","date":"2018-09-07T23:33:36.000Z","_content":"今天想介绍的东西很简单了，但却异常强大，就是`Google Trends`。使用方法非常简单，访问[trends.google.com](https://trends.google.com/trends/explore)即可。\n那么来看看我自己通过`Google Trends`发掘的一些有意思的事情吧。\n![](/media/15363698300629.jpg)\n![](/media/15363699317160.jpg)\n![](/media/15363701237412.jpg)\n![](/media/15363701562662.jpg)\n","source":"_posts/Google_Trends.md","raw":"---\ntitle: 使用Google Trends了解某一技术的全球态势\ndate: 2018-09-08 07:33:36\ncategories: 程序人生\ntags:\n---\n今天想介绍的东西很简单了，但却异常强大，就是`Google Trends`。使用方法非常简单，访问[trends.google.com](https://trends.google.com/trends/explore)即可。\n那么来看看我自己通过`Google Trends`发掘的一些有意思的事情吧。\n![](/media/15363698300629.jpg)\n![](/media/15363699317160.jpg)\n![](/media/15363701237412.jpg)\n![](/media/15363701562662.jpg)\n","slug":"Google_Trends","published":1,"updated":"2018-09-08T01:29:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmf000ty0mzgtvua12r","content":"<p>今天想介绍的东西很简单了，但却异常强大，就是<code>Google Trends</code>。使用方法非常简单，访问<a href=\"https://trends.google.com/trends/explore\">trends.google.com</a>即可。<br>那么来看看我自己通过<code>Google Trends</code>发掘的一些有意思的事情吧。<br><img src=\"/media/15363698300629.jpg\"><br><img src=\"/media/15363699317160.jpg\"><br><img src=\"/media/15363701237412.jpg\"><br><img src=\"/media/15363701562662.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天想介绍的东西很简单了，但却异常强大，就是<code>Google Trends</code>。使用方法非常简单，访问<a href=\"https://trends.google.com/trends/explore\">trends.google.com</a>即可。<br>那么来看看我自己通过<code>Google Trends</code>发掘的一些有意思的事情吧。<br><img src=\"/media/15363698300629.jpg\"><br><img src=\"/media/15363699317160.jpg\"><br><img src=\"/media/15363701237412.jpg\"><br><img src=\"/media/15363701562662.jpg\"></p>\n"},{"title":"PostgreSQL中使用Python编写存储过程实现科学计算","date":"2018-09-29T02:36:35.000Z","_content":"作为写进官方文档过程语言支持，`Python`可说是`PostgreSQL`中最适合写数据库函数的了。因为`Python`是宇宙最强胶水语言，能用`Python`就意味着打开了另一个世界的大门，比如`GPU计算`、`机器学习`什么的。当然这是后话了，今天我们先来个简单的，做些与科学计算有关的的东西（这应该也很少有人在数据库上来做）。需要这样几个步骤。\n### 1. 前期准备\n至少要在服务上装备好`PostgreSQL 10`、`Python 3`\n### 2. 安装`postgresql-plpython-10`扩展\n```\napt-get install postgresql-plpython3-10\n```\n### 3. 在PostgreSQL中启用扩展\n```\ncreate extension \"plpython3u\";\n```\n### 4. 尝试创建一个函数\n```\ncreate function pymax(a integer, b integer)\n  returns integer\nlanguage plpython3u\nas $$\nif a > b:\n    return a\nreturn b\n$$;\n```\n### 5. 执行函数\n```\nstudypg=# select pymax(2, 3);\n pymax\n-------\n     3\n(1 row)\n```\n结果完美\n### 6. 尝试来点复杂的\n这次引用`numpy`库，用来计算`以e为底的自然数对数`，其实就是`numpy`中封装好的`log`函数啦。\n```\ncreate or replace function pylog(x float)\n  returns float\nlanguage plpython3u\nas $$\nimport numpy as np\n\nreturn np.log(x)\n$$;\n```\n执行一下，效果完美\n```\nstudypg=# select pylog(1);\n pylog\n-------\n     0\n(1 row)\n\nstudypg=# select pylog(0.1);\n       pylog\n-------------------\n -2.30258509299405\n(1 row)\n```\n\n如果遇到提示\n```\n[38000] ERROR: ImportError: No module named 'numpy'\n```\n说明服务器的`numpy`模块没安装，可以通过下面的命令安装\n```\npip3 install numpy\n```\n\n### 总结\n至此你已经学会了，如何在`PostgreSQL`中使用`Python`，以及借助`Python`生态的力量，去解决传统关系型数据库并未涉足的领域。希望能对你有所帮助。如果你钟爱`JavaScript`，可以看我之前写的[用JavaScript在PostgreSQL中写存储过程](https://www.kankanzhijian.com/2018/09/09/plv8_in_postgresql)，也不失为一个有意思的尝试。","source":"_posts/PostgreSQL-python-function.md","raw":"---\ntitle: PostgreSQL中使用Python编写存储过程实现科学计算\ndate: 2018-09-29 10:36:35\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n作为写进官方文档过程语言支持，`Python`可说是`PostgreSQL`中最适合写数据库函数的了。因为`Python`是宇宙最强胶水语言，能用`Python`就意味着打开了另一个世界的大门，比如`GPU计算`、`机器学习`什么的。当然这是后话了，今天我们先来个简单的，做些与科学计算有关的的东西（这应该也很少有人在数据库上来做）。需要这样几个步骤。\n### 1. 前期准备\n至少要在服务上装备好`PostgreSQL 10`、`Python 3`\n### 2. 安装`postgresql-plpython-10`扩展\n```\napt-get install postgresql-plpython3-10\n```\n### 3. 在PostgreSQL中启用扩展\n```\ncreate extension \"plpython3u\";\n```\n### 4. 尝试创建一个函数\n```\ncreate function pymax(a integer, b integer)\n  returns integer\nlanguage plpython3u\nas $$\nif a > b:\n    return a\nreturn b\n$$;\n```\n### 5. 执行函数\n```\nstudypg=# select pymax(2, 3);\n pymax\n-------\n     3\n(1 row)\n```\n结果完美\n### 6. 尝试来点复杂的\n这次引用`numpy`库，用来计算`以e为底的自然数对数`，其实就是`numpy`中封装好的`log`函数啦。\n```\ncreate or replace function pylog(x float)\n  returns float\nlanguage plpython3u\nas $$\nimport numpy as np\n\nreturn np.log(x)\n$$;\n```\n执行一下，效果完美\n```\nstudypg=# select pylog(1);\n pylog\n-------\n     0\n(1 row)\n\nstudypg=# select pylog(0.1);\n       pylog\n-------------------\n -2.30258509299405\n(1 row)\n```\n\n如果遇到提示\n```\n[38000] ERROR: ImportError: No module named 'numpy'\n```\n说明服务器的`numpy`模块没安装，可以通过下面的命令安装\n```\npip3 install numpy\n```\n\n### 总结\n至此你已经学会了，如何在`PostgreSQL`中使用`Python`，以及借助`Python`生态的力量，去解决传统关系型数据库并未涉足的领域。希望能对你有所帮助。如果你钟爱`JavaScript`，可以看我之前写的[用JavaScript在PostgreSQL中写存储过程](https://www.kankanzhijian.com/2018/09/09/plv8_in_postgresql)，也不失为一个有意思的尝试。","slug":"PostgreSQL-python-function","published":1,"updated":"2019-01-28T03:46:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmf000wy0mz5smh3e58","content":"<p>作为写进官方文档过程语言支持，<code>Python</code>可说是<code>PostgreSQL</code>中最适合写数据库函数的了。因为<code>Python</code>是宇宙最强胶水语言，能用<code>Python</code>就意味着打开了另一个世界的大门，比如<code>GPU计算</code>、<code>机器学习</code>什么的。当然这是后话了，今天我们先来个简单的，做些与科学计算有关的的东西（这应该也很少有人在数据库上来做）。需要这样几个步骤。</p>\n<h3 id=\"1-前期准备\"><a href=\"#1-前期准备\" class=\"headerlink\" title=\"1. 前期准备\"></a>1. 前期准备</h3><p>至少要在服务上装备好<code>PostgreSQL 10</code>、<code>Python 3</code></p>\n<h3 id=\"2-安装postgresql-plpython-10扩展\"><a href=\"#2-安装postgresql-plpython-10扩展\" class=\"headerlink\" title=\"2. 安装postgresql-plpython-10扩展\"></a>2. 安装<code>postgresql-plpython-10</code>扩展</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> install postgresql-plpython3-10</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-在PostgreSQL中启用扩展\"><a href=\"#3-在PostgreSQL中启用扩展\" class=\"headerlink\" title=\"3. 在PostgreSQL中启用扩展\"></a>3. 在PostgreSQL中启用扩展</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">extension</span> &quot;plpython3u&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-尝试创建一个函数\"><a href=\"#4-尝试创建一个函数\" class=\"headerlink\" title=\"4. 尝试创建一个函数\"></a>4. 尝试创建一个函数</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> pymax(a <span class=\"type\">integer</span>, b <span class=\"type\">integer</span>)</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">integer</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> plpython3u</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$<span class=\"language-ruby\"></span></span><br><span class=\"line\"><span class=\"language-ruby\"><span class=\"keyword\">if</span> a &gt; <span class=\"symbol\">b:</span></span></span><br><span class=\"line\"><span class=\"language-ruby\">    <span class=\"keyword\">return</span> a</span></span><br><span class=\"line\"><span class=\"language-ruby\"><span class=\"keyword\">return</span> b</span></span><br><span class=\"line\"><span class=\"language-ruby\"><span class=\"variable\">$$</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-执行函数\"><a href=\"#5-执行函数\" class=\"headerlink\" title=\"5. 执行函数\"></a>5. 执行函数</h3><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">studypg=# select pymax(2, 3);</span><br><span class=\"line\"><span class=\"section\"> pymax</span></span><br><span class=\"line\"><span class=\"section\">-------</span></span><br><span class=\"line\"><span class=\"code\">     3</span></span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>结果完美</p>\n<h3 id=\"6-尝试来点复杂的\"><a href=\"#6-尝试来点复杂的\" class=\"headerlink\" title=\"6. 尝试来点复杂的\"></a>6. 尝试来点复杂的</h3><p>这次引用<code>numpy</code>库，用来计算<code>以e为底的自然数对数</code>，其实就是<code>numpy</code>中封装好的<code>log</code>函数啦。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or replace</span> <span class=\"keyword\">function</span> pylog(x <span class=\"type\">float</span>)</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">float</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> plpython3u</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span></span><br><span class=\"line\"><span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">return</span> np.log(x)</span></span><br><span class=\"line\"><span class=\"language-pgsql\">$$</span>;</span><br></pre></td></tr></table></figure>\n<p>执行一下，效果完美</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">studypg=# select pylog(1);</span><br><span class=\"line\"><span class=\"section\"> pylog</span></span><br><span class=\"line\"><span class=\"section\">-------</span></span><br><span class=\"line\"><span class=\"code\">     0</span></span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">studypg=# select pylog(0.1);</span><br><span class=\"line\"><span class=\"section\">       pylog</span></span><br><span class=\"line\"><span class=\"section\">-------------------</span></span><br><span class=\"line\"><span class=\"code\"> -2.30258509299405</span></span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到提示</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">38000</span>] <span class=\"keyword\">ERROR</span>: ImportError: No <span class=\"keyword\">module</span> named <span class=\"comment\">&#x27;numpy&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>说明服务器的<code>numpy</code>模块没安装，可以通过下面的命令安装</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> numpy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>至此你已经学会了，如何在<code>PostgreSQL</code>中使用<code>Python</code>，以及借助<code>Python</code>生态的力量，去解决传统关系型数据库并未涉足的领域。希望能对你有所帮助。如果你钟爱<code>JavaScript</code>，可以看我之前写的<a href=\"https://www.kankanzhijian.com/2018/09/09/plv8_in_postgresql\">用JavaScript在PostgreSQL中写存储过程</a>，也不失为一个有意思的尝试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>作为写进官方文档过程语言支持，<code>Python</code>可说是<code>PostgreSQL</code>中最适合写数据库函数的了。因为<code>Python</code>是宇宙最强胶水语言，能用<code>Python</code>就意味着打开了另一个世界的大门，比如<code>GPU计算</code>、<code>机器学习</code>什么的。当然这是后话了，今天我们先来个简单的，做些与科学计算有关的的东西（这应该也很少有人在数据库上来做）。需要这样几个步骤。</p>\n<h3 id=\"1-前期准备\"><a href=\"#1-前期准备\" class=\"headerlink\" title=\"1. 前期准备\"></a>1. 前期准备</h3><p>至少要在服务上装备好<code>PostgreSQL 10</code>、<code>Python 3</code></p>\n<h3 id=\"2-安装postgresql-plpython-10扩展\"><a href=\"#2-安装postgresql-plpython-10扩展\" class=\"headerlink\" title=\"2. 安装postgresql-plpython-10扩展\"></a>2. 安装<code>postgresql-plpython-10</code>扩展</h3><figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"built_in\">get</span> install postgresql-plpython3-10</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-在PostgreSQL中启用扩展\"><a href=\"#3-在PostgreSQL中启用扩展\" class=\"headerlink\" title=\"3. 在PostgreSQL中启用扩展\"></a>3. 在PostgreSQL中启用扩展</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">extension</span> &quot;plpython3u&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-尝试创建一个函数\"><a href=\"#4-尝试创建一个函数\" class=\"headerlink\" title=\"4. 尝试创建一个函数\"></a>4. 尝试创建一个函数</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> pymax(a <span class=\"type\">integer</span>, b <span class=\"type\">integer</span>)</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">integer</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> plpython3u</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$<span class=\"language-ruby\"></span></span><br><span class=\"line\"><span class=\"language-ruby\"><span class=\"keyword\">if</span> a &gt; <span class=\"symbol\">b:</span></span></span><br><span class=\"line\"><span class=\"language-ruby\">    <span class=\"keyword\">return</span> a</span></span><br><span class=\"line\"><span class=\"language-ruby\"><span class=\"keyword\">return</span> b</span></span><br><span class=\"line\"><span class=\"language-ruby\"><span class=\"variable\">$$</span></span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-执行函数\"><a href=\"#5-执行函数\" class=\"headerlink\" title=\"5. 执行函数\"></a>5. 执行函数</h3><figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">studypg=# select pymax(2, 3);</span><br><span class=\"line\"><span class=\"section\"> pymax</span></span><br><span class=\"line\"><span class=\"section\">-------</span></span><br><span class=\"line\"><span class=\"code\">     3</span></span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n<p>结果完美</p>\n<h3 id=\"6-尝试来点复杂的\"><a href=\"#6-尝试来点复杂的\" class=\"headerlink\" title=\"6. 尝试来点复杂的\"></a>6. 尝试来点复杂的</h3><p>这次引用<code>numpy</code>库，用来计算<code>以e为底的自然数对数</code>，其实就是<code>numpy</code>中封装好的<code>log</code>函数啦。</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">or replace</span> <span class=\"keyword\">function</span> pylog(x <span class=\"type\">float</span>)</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">float</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> plpython3u</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span></span><br><span class=\"line\"><span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">return</span> np.log(x)</span></span><br><span class=\"line\"><span class=\"language-pgsql\">$$</span>;</span><br></pre></td></tr></table></figure>\n<p>执行一下，效果完美</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"code\"><pre><span class=\"line\">studypg=# select pylog(1);</span><br><span class=\"line\"><span class=\"section\"> pylog</span></span><br><span class=\"line\"><span class=\"section\">-------</span></span><br><span class=\"line\"><span class=\"code\">     0</span></span><br><span class=\"line\">(1 row)</span><br><span class=\"line\"></span><br><span class=\"line\">studypg=# select pylog(0.1);</span><br><span class=\"line\"><span class=\"section\">       pylog</span></span><br><span class=\"line\"><span class=\"section\">-------------------</span></span><br><span class=\"line\"><span class=\"code\"> -2.30258509299405</span></span><br><span class=\"line\">(1 row)</span><br></pre></td></tr></table></figure>\n\n<p>如果遇到提示</p>\n<figure class=\"highlight vbnet\"><table><tr><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">38000</span>] <span class=\"keyword\">ERROR</span>: ImportError: No <span class=\"keyword\">module</span> named <span class=\"comment\">&#x27;numpy&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>说明服务器的<code>numpy</code>模块没安装，可以通过下面的命令安装</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 <span class=\"keyword\">install</span> numpy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>至此你已经学会了，如何在<code>PostgreSQL</code>中使用<code>Python</code>，以及借助<code>Python</code>生态的力量，去解决传统关系型数据库并未涉足的领域。希望能对你有所帮助。如果你钟爱<code>JavaScript</code>，可以看我之前写的<a href=\"https://www.kankanzhijian.com/2018/09/09/plv8_in_postgresql\">用JavaScript在PostgreSQL中写存储过程</a>，也不失为一个有意思的尝试。</p>\n"},{"title":"PostgreSQL中的行级权限/数据权限/行安全策略","date":"2018-09-28T02:10:07.000Z","_content":"`PostgreSQL`中是可以针对不同用户，按行过滤数据的，这其实跟管理信息系统里经常提到的`数据权限`是干一个事情。但是由数据库自身提供这个功能，听起来还是很强大的。真要动手操作起来也并不复杂，主要有这么几个要点：\n### 1. 开启行级权限\n```\nALTER TABLE 目标表名 ENABLE ROW LEVEL SECURITY;\n```\n开启行级权限后，除了表的拥有者，其他用户都是默认否定权限，也就是不可能从表中查询到数据，当然其他`DML`操作也不行。\n\n### 2. 创建策略\n```\nCREATE POLICY 起个策略名 ON 目标表名 TO 目标角色名\n    USING (一个能返回boolean的表达式);\n```\n当表达式返回`true`时，该行就是可见的，反之是隐藏的。如果是update或delete一个不符合策略的数据，不会报错，只会略过。\n### 3. 精确到命令的策略\n策略是可以精确到`SELECT`、`INSERT`、`UPDATE`以及`DELETE`的，写在`TO`之前，用`FOR`打头，像这样\n```\nCREATE POLICY 起个策略名 ON 目标表名 FOR 命令名(比如select) TO 目标角色名\n    USING (一个能返回boolean的表达式);\n```\n如果不写命令的话，默认是`ALL`\n\n### 4. 由于支持命令级别的策略，实际的复杂度大大上升了\n听我细细讲来：\n* `select`、`delete`是面对现存数据的命令\n* `insert`是面对新产生数据的命令\n* `update`跨界，它既要面对现存数据，又要产生新数据\n\n这么看，上面只有一个`USING`表达式的思路就说不通了，在只有一个`USING`的情况下，它到底是描述`数据的可见性`问题还是描述`数据的合规性`问题呢？这就引出了`WITH CHECK`表达式。`USING`负责判断数据的可见性，`WITH CHECK`符合判断数据的合规性。这里拿`update`举例子比较合适\n```\ncreate policy my_policy on users\n  for update\n  to joe\n  using (user_name = current_user)\n  with check (age > 18)\n```\n这里`USING`的表达式限制了只有字段`user_name`等于当前用户名的数据才可以被编辑（current_user是系统内置变量）；而编辑后的结果，只有`age`大于18才可以成功存储。用过数据库约束的，现在肯定明白了，`with check`就是数据库约束嘛，只是这个约束不是面向表的，而是面向角色（用户）的。\n这也就解释了当用户尝试`update`它没权限`update`的数据，并不会报错，而`update`的数据不满足`check`时，会收到一个错：\n```\nERROR:  new row violates row-level security policy for table \"users\"\n```\n\n### 5. 如果策略不止一个，那它们之间的关系是`OR`？还是`AND`？\n答案是默认情况是`OR`，这个叫`宽松策略`。如果引入`RESTRICTIVE`关键字就成为`限制性策略`。其用法如下\n```\nCREATE POLICY  users_managers ON users as RESTRICTIVE  for select  TO joe  using(first_name='a');\n```\n所有`限制性策略`都是`AND`链接的，在跟`宽松策略`组合起来使用时，会这么一个情况\n```\n(宽松策略A or 宽松策略B) and (限制性策略C and 限制性策略D)\n```\n不过还有一点要注意，**如果只有限制性策略时不行的，必须先有一个宽松策略才行，这个可以理解成`限制性策略`必须得跟别人`and`，如果不提供`宽松策略`的话，就是`and (空)`，所以结果只能是空**。\n\n### 6. 官方文档\n`CREATE POLICY`的详细语法解析[在此](http://www.postgres.cn/docs/10/sql-createpolicy.html)\n`行级权限（行安全性策略）`的整体解释和示例代码[在此](http://www.postgres.cn/docs/10/ddl-rowsecurity.html)\n\n","source":"_posts/PostgreSQL-rowsecurity.md","raw":"---\ntitle: PostgreSQL中的行级权限/数据权限/行安全策略\ndate: 2018-09-28 10:10:07\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n`PostgreSQL`中是可以针对不同用户，按行过滤数据的，这其实跟管理信息系统里经常提到的`数据权限`是干一个事情。但是由数据库自身提供这个功能，听起来还是很强大的。真要动手操作起来也并不复杂，主要有这么几个要点：\n### 1. 开启行级权限\n```\nALTER TABLE 目标表名 ENABLE ROW LEVEL SECURITY;\n```\n开启行级权限后，除了表的拥有者，其他用户都是默认否定权限，也就是不可能从表中查询到数据，当然其他`DML`操作也不行。\n\n### 2. 创建策略\n```\nCREATE POLICY 起个策略名 ON 目标表名 TO 目标角色名\n    USING (一个能返回boolean的表达式);\n```\n当表达式返回`true`时，该行就是可见的，反之是隐藏的。如果是update或delete一个不符合策略的数据，不会报错，只会略过。\n### 3. 精确到命令的策略\n策略是可以精确到`SELECT`、`INSERT`、`UPDATE`以及`DELETE`的，写在`TO`之前，用`FOR`打头，像这样\n```\nCREATE POLICY 起个策略名 ON 目标表名 FOR 命令名(比如select) TO 目标角色名\n    USING (一个能返回boolean的表达式);\n```\n如果不写命令的话，默认是`ALL`\n\n### 4. 由于支持命令级别的策略，实际的复杂度大大上升了\n听我细细讲来：\n* `select`、`delete`是面对现存数据的命令\n* `insert`是面对新产生数据的命令\n* `update`跨界，它既要面对现存数据，又要产生新数据\n\n这么看，上面只有一个`USING`表达式的思路就说不通了，在只有一个`USING`的情况下，它到底是描述`数据的可见性`问题还是描述`数据的合规性`问题呢？这就引出了`WITH CHECK`表达式。`USING`负责判断数据的可见性，`WITH CHECK`符合判断数据的合规性。这里拿`update`举例子比较合适\n```\ncreate policy my_policy on users\n  for update\n  to joe\n  using (user_name = current_user)\n  with check (age > 18)\n```\n这里`USING`的表达式限制了只有字段`user_name`等于当前用户名的数据才可以被编辑（current_user是系统内置变量）；而编辑后的结果，只有`age`大于18才可以成功存储。用过数据库约束的，现在肯定明白了，`with check`就是数据库约束嘛，只是这个约束不是面向表的，而是面向角色（用户）的。\n这也就解释了当用户尝试`update`它没权限`update`的数据，并不会报错，而`update`的数据不满足`check`时，会收到一个错：\n```\nERROR:  new row violates row-level security policy for table \"users\"\n```\n\n### 5. 如果策略不止一个，那它们之间的关系是`OR`？还是`AND`？\n答案是默认情况是`OR`，这个叫`宽松策略`。如果引入`RESTRICTIVE`关键字就成为`限制性策略`。其用法如下\n```\nCREATE POLICY  users_managers ON users as RESTRICTIVE  for select  TO joe  using(first_name='a');\n```\n所有`限制性策略`都是`AND`链接的，在跟`宽松策略`组合起来使用时，会这么一个情况\n```\n(宽松策略A or 宽松策略B) and (限制性策略C and 限制性策略D)\n```\n不过还有一点要注意，**如果只有限制性策略时不行的，必须先有一个宽松策略才行，这个可以理解成`限制性策略`必须得跟别人`and`，如果不提供`宽松策略`的话，就是`and (空)`，所以结果只能是空**。\n\n### 6. 官方文档\n`CREATE POLICY`的详细语法解析[在此](http://www.postgres.cn/docs/10/sql-createpolicy.html)\n`行级权限（行安全性策略）`的整体解释和示例代码[在此](http://www.postgres.cn/docs/10/ddl-rowsecurity.html)\n\n","slug":"PostgreSQL-rowsecurity","published":1,"updated":"2018-09-28T07:24:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmf000yy0mzb2p27t6n","content":"<p><code>PostgreSQL</code>中是可以针对不同用户，按行过滤数据的，这其实跟管理信息系统里经常提到的<code>数据权限</code>是干一个事情。但是由数据库自身提供这个功能，听起来还是很强大的。真要动手操作起来也并不复杂，主要有这么几个要点：</p>\n<h3 id=\"1-开启行级权限\"><a href=\"#1-开启行级权限\" class=\"headerlink\" title=\"1. 开启行级权限\"></a>1. 开启行级权限</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 目标表名 <span class=\"keyword\">ENABLE</span> <span class=\"keyword\">ROW</span> <span class=\"keyword\">LEVEL</span> <span class=\"keyword\">SECURITY</span>;</span><br></pre></td></tr></table></figure>\n<p>开启行级权限后，除了表的拥有者，其他用户都是默认否定权限，也就是不可能从表中查询到数据，当然其他<code>DML</code>操作也不行。</p>\n<h3 id=\"2-创建策略\"><a href=\"#2-创建策略\" class=\"headerlink\" title=\"2. 创建策略\"></a>2. 创建策略</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">POLICY</span> 起个策略名 <span class=\"keyword\">ON</span> 目标表名 <span class=\"keyword\">TO</span> 目标角色名</span><br><span class=\"line\">    <span class=\"keyword\">USING</span> (一个能返回<span class=\"type\">boolean</span>的表达式);</span><br></pre></td></tr></table></figure>\n<p>当表达式返回<code>true</code>时，该行就是可见的，反之是隐藏的。如果是update或delete一个不符合策略的数据，不会报错，只会略过。</p>\n<h3 id=\"3-精确到命令的策略\"><a href=\"#3-精确到命令的策略\" class=\"headerlink\" title=\"3. 精确到命令的策略\"></a>3. 精确到命令的策略</h3><p>策略是可以精确到<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>以及<code>DELETE</code>的，写在<code>TO</code>之前，用<code>FOR</code>打头，像这样</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">POLICY</span> 起个策略名 <span class=\"keyword\">ON</span> 目标表名 <span class=\"keyword\">FOR</span> 命令名(比如<span class=\"keyword\">select</span>) <span class=\"keyword\">TO</span> 目标角色名</span><br><span class=\"line\">    <span class=\"keyword\">USING</span> (一个能返回<span class=\"type\">boolean</span>的表达式);</span><br></pre></td></tr></table></figure>\n<p>如果不写命令的话，默认是<code>ALL</code></p>\n<h3 id=\"4-由于支持命令级别的策略，实际的复杂度大大上升了\"><a href=\"#4-由于支持命令级别的策略，实际的复杂度大大上升了\" class=\"headerlink\" title=\"4. 由于支持命令级别的策略，实际的复杂度大大上升了\"></a>4. 由于支持命令级别的策略，实际的复杂度大大上升了</h3><p>听我细细讲来：</p>\n<ul>\n<li><code>select</code>、<code>delete</code>是面对现存数据的命令</li>\n<li><code>insert</code>是面对新产生数据的命令</li>\n<li><code>update</code>跨界，它既要面对现存数据，又要产生新数据</li>\n</ul>\n<p>这么看，上面只有一个<code>USING</code>表达式的思路就说不通了，在只有一个<code>USING</code>的情况下，它到底是描述<code>数据的可见性</code>问题还是描述<code>数据的合规性</code>问题呢？这就引出了<code>WITH CHECK</code>表达式。<code>USING</code>负责判断数据的可见性，<code>WITH CHECK</code>符合判断数据的合规性。这里拿<code>update</code>举例子比较合适</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">create policy my_policy on users</span><br><span class=\"line\">  for update</span><br><span class=\"line\">  to joe</span><br><span class=\"line\">  using (user_name = current_user)</span><br><span class=\"line\">  with<span class=\"built_in\"> check </span>(age &gt; 18)</span><br></pre></td></tr></table></figure>\n<p>这里<code>USING</code>的表达式限制了只有字段<code>user_name</code>等于当前用户名的数据才可以被编辑（current_user是系统内置变量）；而编辑后的结果，只有<code>age</code>大于18才可以成功存储。用过数据库约束的，现在肯定明白了，<code>with check</code>就是数据库约束嘛，只是这个约束不是面向表的，而是面向角色（用户）的。<br>这也就解释了当用户尝试<code>update</code>它没权限<code>update</code>的数据，并不会报错，而<code>update</code>的数据不满足<code>check</code>时，会收到一个错：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ERROR:  </span>new row violates row-level security policy for table &quot;users&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-如果策略不止一个，那它们之间的关系是OR？还是AND？\"><a href=\"#5-如果策略不止一个，那它们之间的关系是OR？还是AND？\" class=\"headerlink\" title=\"5. 如果策略不止一个，那它们之间的关系是OR？还是AND？\"></a>5. 如果策略不止一个，那它们之间的关系是<code>OR</code>？还是<code>AND</code>？</h3><p>答案是默认情况是<code>OR</code>，这个叫<code>宽松策略</code>。如果引入<code>RESTRICTIVE</code>关键字就成为<code>限制性策略</code>。其用法如下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">POLICY</span>  users_managers <span class=\"keyword\">ON</span> users <span class=\"keyword\">as RESTRICTIVE</span>  <span class=\"keyword\">for</span> <span class=\"keyword\">select</span>  <span class=\"keyword\">TO</span> joe  <span class=\"keyword\">using</span>(first_name=<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>所有<code>限制性策略</code>都是<code>AND</code>链接的，在跟<code>宽松策略</code>组合起来使用时，会这么一个情况</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">(宽松策略A <span class=\"keyword\">or </span>宽松策略<span class=\"keyword\">B) </span><span class=\"keyword\">and </span>(限制性策略C <span class=\"keyword\">and </span>限制性策略D)</span><br></pre></td></tr></table></figure>\n<p>不过还有一点要注意，<strong>如果只有限制性策略时不行的，必须先有一个宽松策略才行，这个可以理解成<code>限制性策略</code>必须得跟别人<code>and</code>，如果不提供<code>宽松策略</code>的话，就是<code>and (空)</code>，所以结果只能是空</strong>。</p>\n<h3 id=\"6-官方文档\"><a href=\"#6-官方文档\" class=\"headerlink\" title=\"6. 官方文档\"></a>6. 官方文档</h3><p><code>CREATE POLICY</code>的详细语法解析<a href=\"http://www.postgres.cn/docs/10/sql-createpolicy.html\">在此</a><br><code>行级权限（行安全性策略）</code>的整体解释和示例代码<a href=\"http://www.postgres.cn/docs/10/ddl-rowsecurity.html\">在此</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>PostgreSQL</code>中是可以针对不同用户，按行过滤数据的，这其实跟管理信息系统里经常提到的<code>数据权限</code>是干一个事情。但是由数据库自身提供这个功能，听起来还是很强大的。真要动手操作起来也并不复杂，主要有这么几个要点：</p>\n<h3 id=\"1-开启行级权限\"><a href=\"#1-开启行级权限\" class=\"headerlink\" title=\"1. 开启行级权限\"></a>1. 开启行级权限</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">TABLE</span> 目标表名 <span class=\"keyword\">ENABLE</span> <span class=\"keyword\">ROW</span> <span class=\"keyword\">LEVEL</span> <span class=\"keyword\">SECURITY</span>;</span><br></pre></td></tr></table></figure>\n<p>开启行级权限后，除了表的拥有者，其他用户都是默认否定权限，也就是不可能从表中查询到数据，当然其他<code>DML</code>操作也不行。</p>\n<h3 id=\"2-创建策略\"><a href=\"#2-创建策略\" class=\"headerlink\" title=\"2. 创建策略\"></a>2. 创建策略</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">POLICY</span> 起个策略名 <span class=\"keyword\">ON</span> 目标表名 <span class=\"keyword\">TO</span> 目标角色名</span><br><span class=\"line\">    <span class=\"keyword\">USING</span> (一个能返回<span class=\"type\">boolean</span>的表达式);</span><br></pre></td></tr></table></figure>\n<p>当表达式返回<code>true</code>时，该行就是可见的，反之是隐藏的。如果是update或delete一个不符合策略的数据，不会报错，只会略过。</p>\n<h3 id=\"3-精确到命令的策略\"><a href=\"#3-精确到命令的策略\" class=\"headerlink\" title=\"3. 精确到命令的策略\"></a>3. 精确到命令的策略</h3><p>策略是可以精确到<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>以及<code>DELETE</code>的，写在<code>TO</code>之前，用<code>FOR</code>打头，像这样</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">POLICY</span> 起个策略名 <span class=\"keyword\">ON</span> 目标表名 <span class=\"keyword\">FOR</span> 命令名(比如<span class=\"keyword\">select</span>) <span class=\"keyword\">TO</span> 目标角色名</span><br><span class=\"line\">    <span class=\"keyword\">USING</span> (一个能返回<span class=\"type\">boolean</span>的表达式);</span><br></pre></td></tr></table></figure>\n<p>如果不写命令的话，默认是<code>ALL</code></p>\n<h3 id=\"4-由于支持命令级别的策略，实际的复杂度大大上升了\"><a href=\"#4-由于支持命令级别的策略，实际的复杂度大大上升了\" class=\"headerlink\" title=\"4. 由于支持命令级别的策略，实际的复杂度大大上升了\"></a>4. 由于支持命令级别的策略，实际的复杂度大大上升了</h3><p>听我细细讲来：</p>\n<ul>\n<li><code>select</code>、<code>delete</code>是面对现存数据的命令</li>\n<li><code>insert</code>是面对新产生数据的命令</li>\n<li><code>update</code>跨界，它既要面对现存数据，又要产生新数据</li>\n</ul>\n<p>这么看，上面只有一个<code>USING</code>表达式的思路就说不通了，在只有一个<code>USING</code>的情况下，它到底是描述<code>数据的可见性</code>问题还是描述<code>数据的合规性</code>问题呢？这就引出了<code>WITH CHECK</code>表达式。<code>USING</code>负责判断数据的可见性，<code>WITH CHECK</code>符合判断数据的合规性。这里拿<code>update</code>举例子比较合适</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"code\"><pre><span class=\"line\">create policy my_policy on users</span><br><span class=\"line\">  for update</span><br><span class=\"line\">  to joe</span><br><span class=\"line\">  using (user_name = current_user)</span><br><span class=\"line\">  with<span class=\"built_in\"> check </span>(age &gt; 18)</span><br></pre></td></tr></table></figure>\n<p>这里<code>USING</code>的表达式限制了只有字段<code>user_name</code>等于当前用户名的数据才可以被编辑（current_user是系统内置变量）；而编辑后的结果，只有<code>age</code>大于18才可以成功存储。用过数据库约束的，现在肯定明白了，<code>with check</code>就是数据库约束嘛，只是这个约束不是面向表的，而是面向角色（用户）的。<br>这也就解释了当用户尝试<code>update</code>它没权限<code>update</code>的数据，并不会报错，而<code>update</code>的数据不满足<code>check</code>时，会收到一个错：</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ERROR:  </span>new row violates row-level security policy for table &quot;users&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-如果策略不止一个，那它们之间的关系是OR？还是AND？\"><a href=\"#5-如果策略不止一个，那它们之间的关系是OR？还是AND？\" class=\"headerlink\" title=\"5. 如果策略不止一个，那它们之间的关系是OR？还是AND？\"></a>5. 如果策略不止一个，那它们之间的关系是<code>OR</code>？还是<code>AND</code>？</h3><p>答案是默认情况是<code>OR</code>，这个叫<code>宽松策略</code>。如果引入<code>RESTRICTIVE</code>关键字就成为<code>限制性策略</code>。其用法如下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">POLICY</span>  users_managers <span class=\"keyword\">ON</span> users <span class=\"keyword\">as RESTRICTIVE</span>  <span class=\"keyword\">for</span> <span class=\"keyword\">select</span>  <span class=\"keyword\">TO</span> joe  <span class=\"keyword\">using</span>(first_name=<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>所有<code>限制性策略</code>都是<code>AND</code>链接的，在跟<code>宽松策略</code>组合起来使用时，会这么一个情况</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">(宽松策略A <span class=\"keyword\">or </span>宽松策略<span class=\"keyword\">B) </span><span class=\"keyword\">and </span>(限制性策略C <span class=\"keyword\">and </span>限制性策略D)</span><br></pre></td></tr></table></figure>\n<p>不过还有一点要注意，<strong>如果只有限制性策略时不行的，必须先有一个宽松策略才行，这个可以理解成<code>限制性策略</code>必须得跟别人<code>and</code>，如果不提供<code>宽松策略</code>的话，就是<code>and (空)</code>，所以结果只能是空</strong>。</p>\n<h3 id=\"6-官方文档\"><a href=\"#6-官方文档\" class=\"headerlink\" title=\"6. 官方文档\"></a>6. 官方文档</h3><p><code>CREATE POLICY</code>的详细语法解析<a href=\"http://www.postgres.cn/docs/10/sql-createpolicy.html\">在此</a><br><code>行级权限（行安全性策略）</code>的整体解释和示例代码<a href=\"http://www.postgres.cn/docs/10/ddl-rowsecurity.html\">在此</a></p>\n"},{"title":"PostgreSQL修改FDW相关配置","date":"2018-08-10T00:21:01.000Z","_content":"必要的时候要修改`PostgreSQL`中配置的外部服务器。有个`ALTER SERVER`命令是专门应对这种场景的。比如我的外部数据源服务器地址换了，只需要改下之前配置的`host`地址即可，`SQL`如下\n```\nALTER SERVER foreign_server OPTIONS (set host '192.168.0.88');\n```\n更多内容可以查看官方文档[http://www.postgres.cn/docs/9.6/sql-alterserver.html]","source":"_posts/PostgreSQL_alert_foreign_server.md","raw":"---\ntitle: PostgreSQL修改FDW相关配置\ndate: 2018-08-10 08:21:01\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n必要的时候要修改`PostgreSQL`中配置的外部服务器。有个`ALTER SERVER`命令是专门应对这种场景的。比如我的外部数据源服务器地址换了，只需要改下之前配置的`host`地址即可，`SQL`如下\n```\nALTER SERVER foreign_server OPTIONS (set host '192.168.0.88');\n```\n更多内容可以查看官方文档[http://www.postgres.cn/docs/9.6/sql-alterserver.html]","slug":"PostgreSQL_alert_foreign_server","published":1,"updated":"2018-08-10T01:01:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmh0011y0mz6ingezvg","content":"<p>必要的时候要修改<code>PostgreSQL</code>中配置的外部服务器。有个<code>ALTER SERVER</code>命令是专门应对这种场景的。比如我的外部数据源服务器地址换了，只需要改下之前配置的<code>host</code>地址即可，<code>SQL</code>如下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SERVER</span> foreign_server <span class=\"keyword\">OPTIONS</span> (<span class=\"keyword\">set</span> host <span class=\"string\">&#x27;192.168.0.88&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>更多内容可以查看官方文档[<a href=\"http://www.postgres.cn/docs/9.6/sql-alterserver.html]\">http://www.postgres.cn/docs/9.6/sql-alterserver.html]</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>必要的时候要修改<code>PostgreSQL</code>中配置的外部服务器。有个<code>ALTER SERVER</code>命令是专门应对这种场景的。比如我的外部数据源服务器地址换了，只需要改下之前配置的<code>host</code>地址即可，<code>SQL</code>如下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">SERVER</span> foreign_server <span class=\"keyword\">OPTIONS</span> (<span class=\"keyword\">set</span> host <span class=\"string\">&#x27;192.168.0.88&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>更多内容可以查看官方文档[<a href=\"http://www.postgres.cn/docs/9.6/sql-alterserver.html]\">http://www.postgres.cn/docs/9.6/sql-alterserver.html]</a></p>\n"},{"title":"PostgreSQL删除数据库时提示other session using the database","date":"2018-08-07T00:06:26.000Z","_content":"PostgreSQL中，如果想drop一个正在被人连接的数据库，是不可以的。提示如下：\n```\npostgres=# drop database ka;\nERROR:  database \"ka\" is being accessed by other users\nDETAIL:  There is 1 other session using the database\n```\n应对方法是要通过`pg_terminate_backend`系统内置函数，把对应库在线连接给清理掉，使用方法如下：\n```\nSELECT pg_terminate_backend(pg_stat_activity.pid)\n    FROM pg_stat_activity\n    WHERE pg_stat_activity.datname = 'ka'\n      AND pid <> pg_backend_pid();\n```","source":"_posts/PostgreSQL_drop_database_other-session-using-the-database.md","raw":"---\ntitle: PostgreSQL删除数据库时提示other session using the database\ndate: 2018-08-07 08:06:26\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\nPostgreSQL中，如果想drop一个正在被人连接的数据库，是不可以的。提示如下：\n```\npostgres=# drop database ka;\nERROR:  database \"ka\" is being accessed by other users\nDETAIL:  There is 1 other session using the database\n```\n应对方法是要通过`pg_terminate_backend`系统内置函数，把对应库在线连接给清理掉，使用方法如下：\n```\nSELECT pg_terminate_backend(pg_stat_activity.pid)\n    FROM pg_stat_activity\n    WHERE pg_stat_activity.datname = 'ka'\n      AND pid <> pg_backend_pid();\n```","slug":"PostgreSQL_drop_database_other-session-using-the-database","published":1,"updated":"2020-11-26T09:11:45.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmh0013y0mz4wh15a1i","content":"<p>PostgreSQL中，如果想drop一个正在被人连接的数据库，是不可以的。提示如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres=# <span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> ka;</span><br><span class=\"line\">ERROR:  <span class=\"keyword\">database</span> &quot;ka&quot; <span class=\"keyword\">is</span> being accessed <span class=\"keyword\">by</span> other users</span><br><span class=\"line\">DETAIL:  There <span class=\"keyword\">is</span> <span class=\"number\">1</span> other <span class=\"keyword\">session</span> <span class=\"keyword\">using</span> the <span class=\"keyword\">database</span></span><br></pre></td></tr></table></figure>\n<p>应对方法是要通过<code>pg_terminate_backend</code>系统内置函数，把对应库在线连接给清理掉，使用方法如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_terminate_backend(pg_stat_activity.pid)</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> pg_stat_activity</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> pg_stat_activity.datname = <span class=\"string\">&#x27;ka&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">AND</span> pid &lt;&gt; pg_backend_pid();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>PostgreSQL中，如果想drop一个正在被人连接的数据库，是不可以的。提示如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres=# <span class=\"keyword\">drop</span> <span class=\"keyword\">database</span> ka;</span><br><span class=\"line\">ERROR:  <span class=\"keyword\">database</span> &quot;ka&quot; <span class=\"keyword\">is</span> being accessed <span class=\"keyword\">by</span> other users</span><br><span class=\"line\">DETAIL:  There <span class=\"keyword\">is</span> <span class=\"number\">1</span> other <span class=\"keyword\">session</span> <span class=\"keyword\">using</span> the <span class=\"keyword\">database</span></span><br></pre></td></tr></table></figure>\n<p>应对方法是要通过<code>pg_terminate_backend</code>系统内置函数，把对应库在线连接给清理掉，使用方法如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_terminate_backend(pg_stat_activity.pid)</span><br><span class=\"line\">    <span class=\"keyword\">FROM</span> pg_stat_activity</span><br><span class=\"line\">    <span class=\"keyword\">WHERE</span> pg_stat_activity.datname = <span class=\"string\">&#x27;ka&#x27;</span></span><br><span class=\"line\">      <span class=\"keyword\">AND</span> pid &lt;&gt; pg_backend_pid();</span><br></pre></td></tr></table></figure>"},{"title":"PostgreSQL中文文档正确的搜索方式","date":"2018-09-21T05:44:54.000Z","_content":"今天介绍的主要是搜索引擎使用技巧，其实跟`PostgreSQL`关系不大，仅仅以对`PostgreSQL`的中文文档搜搜举个例子。\n比如想了解`PostgreSQL`关于`string`类型的数据库内置函数。最直观的搜索方式，是去`google`搜`postgres string function`，这当然是一种符合直觉方式。通常情况下`google`给出的结果会不赖，如图：![](/media/15375090092852.jpg)\n但是有个问题，默认搜到的内容都是英文的，这可能不利于中国的小伙伴细致地学习。但其实，我们已经有一个汉化过的文档版本，静静地躺在[PostgreSQL 中文社区](http://www.postgres.cn)，并且社区提供多个版本的汉化文档，比如：[10](http://www.postgres.cn/docs/10/)、[9.6](http://www.postgres.cn/docs/9.6/)\n我们最理想的，就是期望`google`能把关键词的搜索范围限制在中文文档的地址内。其实这对搜索引擎是个再常见不过的需求了，很多小伙伴也早就知道了，那就是`site:`。\n当我们希望把`postgres string function`的搜索范围仅限制在中文文档[10](http://www.postgres.cn/docs/10/)这个版本上时，仅需要在之前的搜索内容中增加`site`关键字限制范围，最终输入给`google`如下\n```\npostgres string function site:http://www.postgres.cn/docs/10\n```\n*（其实上面的postgres也可以省略了）*\n\n来看看结果吧：![](/media/15375096548094.jpg)\n现在看起来就很完美了，","source":"_posts/PostgreSQL_doc_search.md","raw":"---\ntitle: PostgreSQL中文文档正确的搜索方式\ndate: 2018-09-21 13:44:54\ncategories: 工具技巧\ntags:\n    - PostgreSQL\n---\n今天介绍的主要是搜索引擎使用技巧，其实跟`PostgreSQL`关系不大，仅仅以对`PostgreSQL`的中文文档搜搜举个例子。\n比如想了解`PostgreSQL`关于`string`类型的数据库内置函数。最直观的搜索方式，是去`google`搜`postgres string function`，这当然是一种符合直觉方式。通常情况下`google`给出的结果会不赖，如图：![](/media/15375090092852.jpg)\n但是有个问题，默认搜到的内容都是英文的，这可能不利于中国的小伙伴细致地学习。但其实，我们已经有一个汉化过的文档版本，静静地躺在[PostgreSQL 中文社区](http://www.postgres.cn)，并且社区提供多个版本的汉化文档，比如：[10](http://www.postgres.cn/docs/10/)、[9.6](http://www.postgres.cn/docs/9.6/)\n我们最理想的，就是期望`google`能把关键词的搜索范围限制在中文文档的地址内。其实这对搜索引擎是个再常见不过的需求了，很多小伙伴也早就知道了，那就是`site:`。\n当我们希望把`postgres string function`的搜索范围仅限制在中文文档[10](http://www.postgres.cn/docs/10/)这个版本上时，仅需要在之前的搜索内容中增加`site`关键字限制范围，最终输入给`google`如下\n```\npostgres string function site:http://www.postgres.cn/docs/10\n```\n*（其实上面的postgres也可以省略了）*\n\n来看看结果吧：![](/media/15375096548094.jpg)\n现在看起来就很完美了，","slug":"PostgreSQL_doc_search","published":1,"updated":"2018-09-21T06:03:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmh0016y0mzdbgg3ok0","content":"<p>今天介绍的主要是搜索引擎使用技巧，其实跟<code>PostgreSQL</code>关系不大，仅仅以对<code>PostgreSQL</code>的中文文档搜搜举个例子。<br>比如想了解<code>PostgreSQL</code>关于<code>string</code>类型的数据库内置函数。最直观的搜索方式，是去<code>google</code>搜<code>postgres string function</code>，这当然是一种符合直觉方式。通常情况下<code>google</code>给出的结果会不赖，如图：<img src=\"/media/15375090092852.jpg\"><br>但是有个问题，默认搜到的内容都是英文的，这可能不利于中国的小伙伴细致地学习。但其实，我们已经有一个汉化过的文档版本，静静地躺在<a href=\"http://www.postgres.cn/\">PostgreSQL 中文社区</a>，并且社区提供多个版本的汉化文档，比如：<a href=\"http://www.postgres.cn/docs/10/\">10</a>、<a href=\"http://www.postgres.cn/docs/9.6/\">9.6</a><br>我们最理想的，就是期望<code>google</code>能把关键词的搜索范围限制在中文文档的地址内。其实这对搜索引擎是个再常见不过的需求了，很多小伙伴也早就知道了，那就是<code>site:</code>。<br>当我们希望把<code>postgres string function</code>的搜索范围仅限制在中文文档<a href=\"http://www.postgres.cn/docs/10/\">10</a>这个版本上时，仅需要在之前的搜索内容中增加<code>site</code>关键字限制范围，最终输入给<code>google</code>如下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres string <span class=\"keyword\">function</span> site:http:<span class=\"regexp\">//</span>www.postgres.cn<span class=\"regexp\">/docs/</span><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p><em>（其实上面的postgres也可以省略了）</em></p>\n<p>来看看结果吧：<img src=\"/media/15375096548094.jpg\"><br>现在看起来就很完美了，</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天介绍的主要是搜索引擎使用技巧，其实跟<code>PostgreSQL</code>关系不大，仅仅以对<code>PostgreSQL</code>的中文文档搜搜举个例子。<br>比如想了解<code>PostgreSQL</code>关于<code>string</code>类型的数据库内置函数。最直观的搜索方式，是去<code>google</code>搜<code>postgres string function</code>，这当然是一种符合直觉方式。通常情况下<code>google</code>给出的结果会不赖，如图：<img src=\"/media/15375090092852.jpg\"><br>但是有个问题，默认搜到的内容都是英文的，这可能不利于中国的小伙伴细致地学习。但其实，我们已经有一个汉化过的文档版本，静静地躺在<a href=\"http://www.postgres.cn/\">PostgreSQL 中文社区</a>，并且社区提供多个版本的汉化文档，比如：<a href=\"http://www.postgres.cn/docs/10/\">10</a>、<a href=\"http://www.postgres.cn/docs/9.6/\">9.6</a><br>我们最理想的，就是期望<code>google</code>能把关键词的搜索范围限制在中文文档的地址内。其实这对搜索引擎是个再常见不过的需求了，很多小伙伴也早就知道了，那就是<code>site:</code>。<br>当我们希望把<code>postgres string function</code>的搜索范围仅限制在中文文档<a href=\"http://www.postgres.cn/docs/10/\">10</a>这个版本上时，仅需要在之前的搜索内容中增加<code>site</code>关键字限制范围，最终输入给<code>google</code>如下</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">postgres string <span class=\"keyword\">function</span> site:http:<span class=\"regexp\">//</span>www.postgres.cn<span class=\"regexp\">/docs/</span><span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p><em>（其实上面的postgres也可以省略了）</em></p>\n<p>来看看结果吧：<img src=\"/media/15375096548094.jpg\"><br>现在看起来就很完美了，</p>\n"},{"title":"PostgreSQL中的几中常见索引及应用场景","date":"2018-08-03T00:22:39.000Z","_content":"## B-tree\n`B-tree`是关系型数据库中，最常见的索引，也是`PostgreSQL`中经常采用的默认索引。主要应对场景：\n*  主键\n*  唯一性约束\n*  等值比较\n*  范围查询\n*  null判断\n\n## GiST\n全称Generalized Search Tree，大白话就是通用搜索树。这是一种**有损**索引，主要应对非结构化数据，比如空间、全文检索什么的。主要应对场景：\n* 几何类型数据\n* 范围类型数据\n* ltree类型数据\n* 总之就是要用到不局限于`<、<=、=、 >=、>`这几种操作符时，要考虑`GiST`索引\n* `GiST`跟`B-tree`并不矛盾，可以把`GiST`当作一种补充来用，效果更好\n\n## GIN\n全称Generalized Inverted Index，通用逆序索引。它是从`GiST`派生出来的一种索引，比`GiST`最大的优势是无损，也就是说如果要查询的数据都被索引，就可以从索引中直接获取查询结果。`GIN`索引的缺点是更新操作时，多出一个字段值复制的动作，这点不及`GiST`的速度快。另外就是它不能对大对象类型索引，比如hstore、text里面有大对象，就不适合用`GIN`了。主要应对场景：\n* jsonb数据类型\n* 数组数据类型\n* 配合`create extension pg_trgm`对`varchar`模糊查询\n\n## SP-GiST\nSP是Space-Partitioning的简写，也就是说本索引是基于空间分区树算法的GiST索引。与`GiST`的应用场领域高度重叠，好处就是针对某些领域的特定算法，其效率要高一些。目前支持该索引的类型主要有：\n* point\n* box\n* text\n* range\n* network\n\n## Hash\nPostgreSQL已将`Hash`索引列为不推荐使用状态。只能实现`=`运算相关判断。\n\n想了解更多索引的应用范围，完全可以在`PostgreSQL`的元数据中找到答案。尝试执行这个`SQL`吧\n```\nSELECT am.amname AS index_method,\n       opf.opfname AS opfamily_name,\n       amop.amopopr::regoperator AS opfamily_operator\nFROM pg_am am, pg_opfamily opf, pg_amop amop\nWHERE opf.opfmethod = am.oid AND\n      amop.amopfamily = opf.oid\nORDER BY index_method, opfamily_name, opfamily_operator\n```","source":"_posts/PostgreSQL_indexs.md","raw":"---\ntitle: PostgreSQL中的几中常见索引及应用场景\ndate: 2018-08-03 08:22:39\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n## B-tree\n`B-tree`是关系型数据库中，最常见的索引，也是`PostgreSQL`中经常采用的默认索引。主要应对场景：\n*  主键\n*  唯一性约束\n*  等值比较\n*  范围查询\n*  null判断\n\n## GiST\n全称Generalized Search Tree，大白话就是通用搜索树。这是一种**有损**索引，主要应对非结构化数据，比如空间、全文检索什么的。主要应对场景：\n* 几何类型数据\n* 范围类型数据\n* ltree类型数据\n* 总之就是要用到不局限于`<、<=、=、 >=、>`这几种操作符时，要考虑`GiST`索引\n* `GiST`跟`B-tree`并不矛盾，可以把`GiST`当作一种补充来用，效果更好\n\n## GIN\n全称Generalized Inverted Index，通用逆序索引。它是从`GiST`派生出来的一种索引，比`GiST`最大的优势是无损，也就是说如果要查询的数据都被索引，就可以从索引中直接获取查询结果。`GIN`索引的缺点是更新操作时，多出一个字段值复制的动作，这点不及`GiST`的速度快。另外就是它不能对大对象类型索引，比如hstore、text里面有大对象，就不适合用`GIN`了。主要应对场景：\n* jsonb数据类型\n* 数组数据类型\n* 配合`create extension pg_trgm`对`varchar`模糊查询\n\n## SP-GiST\nSP是Space-Partitioning的简写，也就是说本索引是基于空间分区树算法的GiST索引。与`GiST`的应用场领域高度重叠，好处就是针对某些领域的特定算法，其效率要高一些。目前支持该索引的类型主要有：\n* point\n* box\n* text\n* range\n* network\n\n## Hash\nPostgreSQL已将`Hash`索引列为不推荐使用状态。只能实现`=`运算相关判断。\n\n想了解更多索引的应用范围，完全可以在`PostgreSQL`的元数据中找到答案。尝试执行这个`SQL`吧\n```\nSELECT am.amname AS index_method,\n       opf.opfname AS opfamily_name,\n       amop.amopopr::regoperator AS opfamily_operator\nFROM pg_am am, pg_opfamily opf, pg_amop amop\nWHERE opf.opfmethod = am.oid AND\n      amop.amopfamily = opf.oid\nORDER BY index_method, opfamily_name, opfamily_operator\n```","slug":"PostgreSQL_indexs","published":1,"updated":"2018-08-03T02:51:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmh0018y0mz3tl0cru2","content":"<h2 id=\"B-tree\"><a href=\"#B-tree\" class=\"headerlink\" title=\"B-tree\"></a>B-tree</h2><p><code>B-tree</code>是关系型数据库中，最常见的索引，也是<code>PostgreSQL</code>中经常采用的默认索引。主要应对场景：</p>\n<ul>\n<li>主键</li>\n<li>唯一性约束</li>\n<li>等值比较</li>\n<li>范围查询</li>\n<li>null判断</li>\n</ul>\n<h2 id=\"GiST\"><a href=\"#GiST\" class=\"headerlink\" title=\"GiST\"></a>GiST</h2><p>全称Generalized Search Tree，大白话就是通用搜索树。这是一种<strong>有损</strong>索引，主要应对非结构化数据，比如空间、全文检索什么的。主要应对场景：</p>\n<ul>\n<li>几何类型数据</li>\n<li>范围类型数据</li>\n<li>ltree类型数据</li>\n<li>总之就是要用到不局限于<code>&lt;、&lt;=、=、 &gt;=、&gt;</code>这几种操作符时，要考虑<code>GiST</code>索引</li>\n<li><code>GiST</code>跟<code>B-tree</code>并不矛盾，可以把<code>GiST</code>当作一种补充来用，效果更好</li>\n</ul>\n<h2 id=\"GIN\"><a href=\"#GIN\" class=\"headerlink\" title=\"GIN\"></a>GIN</h2><p>全称Generalized Inverted Index，通用逆序索引。它是从<code>GiST</code>派生出来的一种索引，比<code>GiST</code>最大的优势是无损，也就是说如果要查询的数据都被索引，就可以从索引中直接获取查询结果。<code>GIN</code>索引的缺点是更新操作时，多出一个字段值复制的动作，这点不及<code>GiST</code>的速度快。另外就是它不能对大对象类型索引，比如hstore、text里面有大对象，就不适合用<code>GIN</code>了。主要应对场景：</p>\n<ul>\n<li>jsonb数据类型</li>\n<li>数组数据类型</li>\n<li>配合<code>create extension pg_trgm</code>对<code>varchar</code>模糊查询</li>\n</ul>\n<h2 id=\"SP-GiST\"><a href=\"#SP-GiST\" class=\"headerlink\" title=\"SP-GiST\"></a>SP-GiST</h2><p>SP是Space-Partitioning的简写，也就是说本索引是基于空间分区树算法的GiST索引。与<code>GiST</code>的应用场领域高度重叠，好处就是针对某些领域的特定算法，其效率要高一些。目前支持该索引的类型主要有：</p>\n<ul>\n<li>point</li>\n<li>box</li>\n<li>text</li>\n<li>range</li>\n<li>network</li>\n</ul>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><p>PostgreSQL已将<code>Hash</code>索引列为不推荐使用状态。只能实现<code>=</code>运算相关判断。</p>\n<p>想了解更多索引的应用范围，完全可以在<code>PostgreSQL</code>的元数据中找到答案。尝试执行这个<code>SQL</code>吧</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> am.amname <span class=\"keyword\">AS</span> index_method,</span><br><span class=\"line\">       opf.opfname <span class=\"keyword\">AS</span> opfamily_name,</span><br><span class=\"line\">       amop.amopopr::<span class=\"type\">regoperator</span> <span class=\"keyword\">AS</span> opfamily_operator</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> pg_am am, pg_opfamily opf, pg_amop amop</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> opf.opfmethod = am.oid <span class=\"keyword\">AND</span></span><br><span class=\"line\">      amop.amopfamily = opf.oid</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> index_method, opfamily_name, opfamily_operator</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"B-tree\"><a href=\"#B-tree\" class=\"headerlink\" title=\"B-tree\"></a>B-tree</h2><p><code>B-tree</code>是关系型数据库中，最常见的索引，也是<code>PostgreSQL</code>中经常采用的默认索引。主要应对场景：</p>\n<ul>\n<li>主键</li>\n<li>唯一性约束</li>\n<li>等值比较</li>\n<li>范围查询</li>\n<li>null判断</li>\n</ul>\n<h2 id=\"GiST\"><a href=\"#GiST\" class=\"headerlink\" title=\"GiST\"></a>GiST</h2><p>全称Generalized Search Tree，大白话就是通用搜索树。这是一种<strong>有损</strong>索引，主要应对非结构化数据，比如空间、全文检索什么的。主要应对场景：</p>\n<ul>\n<li>几何类型数据</li>\n<li>范围类型数据</li>\n<li>ltree类型数据</li>\n<li>总之就是要用到不局限于<code>&lt;、&lt;=、=、 &gt;=、&gt;</code>这几种操作符时，要考虑<code>GiST</code>索引</li>\n<li><code>GiST</code>跟<code>B-tree</code>并不矛盾，可以把<code>GiST</code>当作一种补充来用，效果更好</li>\n</ul>\n<h2 id=\"GIN\"><a href=\"#GIN\" class=\"headerlink\" title=\"GIN\"></a>GIN</h2><p>全称Generalized Inverted Index，通用逆序索引。它是从<code>GiST</code>派生出来的一种索引，比<code>GiST</code>最大的优势是无损，也就是说如果要查询的数据都被索引，就可以从索引中直接获取查询结果。<code>GIN</code>索引的缺点是更新操作时，多出一个字段值复制的动作，这点不及<code>GiST</code>的速度快。另外就是它不能对大对象类型索引，比如hstore、text里面有大对象，就不适合用<code>GIN</code>了。主要应对场景：</p>\n<ul>\n<li>jsonb数据类型</li>\n<li>数组数据类型</li>\n<li>配合<code>create extension pg_trgm</code>对<code>varchar</code>模糊查询</li>\n</ul>\n<h2 id=\"SP-GiST\"><a href=\"#SP-GiST\" class=\"headerlink\" title=\"SP-GiST\"></a>SP-GiST</h2><p>SP是Space-Partitioning的简写，也就是说本索引是基于空间分区树算法的GiST索引。与<code>GiST</code>的应用场领域高度重叠，好处就是针对某些领域的特定算法，其效率要高一些。目前支持该索引的类型主要有：</p>\n<ul>\n<li>point</li>\n<li>box</li>\n<li>text</li>\n<li>range</li>\n<li>network</li>\n</ul>\n<h2 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h2><p>PostgreSQL已将<code>Hash</code>索引列为不推荐使用状态。只能实现<code>=</code>运算相关判断。</p>\n<p>想了解更多索引的应用范围，完全可以在<code>PostgreSQL</code>的元数据中找到答案。尝试执行这个<code>SQL</code>吧</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> am.amname <span class=\"keyword\">AS</span> index_method,</span><br><span class=\"line\">       opf.opfname <span class=\"keyword\">AS</span> opfamily_name,</span><br><span class=\"line\">       amop.amopopr::<span class=\"type\">regoperator</span> <span class=\"keyword\">AS</span> opfamily_operator</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> pg_am am, pg_opfamily opf, pg_amop amop</span><br><span class=\"line\"><span class=\"keyword\">WHERE</span> opf.opfmethod = am.oid <span class=\"keyword\">AND</span></span><br><span class=\"line\">      amop.amopfamily = opf.oid</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> index_method, opfamily_name, opfamily_operator</span><br></pre></td></tr></table></figure>"},{"title":"PostgreSQL中varchar类型like前置%查询命中索引的方法","date":"2018-08-02T00:44:10.000Z","_content":"上一篇中，我们学习了`PostgreSQL`中想要让`varchar`类型支持`like`查询能够命中索引，需要注意的地方。但是即便是创建索引时，指定了操作符类`varchar_pattern_ops`，在使用`like`查询的时候，还是只能保证`sometext%`这种查询能够命中索引，但是`%sometext`这种是无能为力的，见下图。\n![](/media/15331709094483.jpg)\n![](/media/15331709707728.jpg)\n所以如果需要支持`%sometext`方式的索引查询，还需要再做点工作：\n1. `create extension pg_trgm;`\n2. ```\nCREATE INDEX log_action_v_uri_index  ON  log_action using gist (v_uri gist_trgm_ops);\n    ```\n1. 上面`gist`索引时有损的，后来研究支持，发现`gin`更合适，速度更快 **强烈推荐**\n```\nCREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n```\n\n\n然后重新执行`explain`，就能看到命中索引了\n![](/media/15331719609935.jpg)\n\n关于`btree`索引与`gist`索引的应用场景，我们以后再探讨。 现在我们先看看同样支持`sometext%`查询命中索引的情况下，我们该用哪种呢。\n1. 首先是查询速度，这次我们换百万行的数据来测试\n    * 先看`btree`的![](/media/15331926585276.jpg)\n    * 再看`gist`的![](/media/15331926156740.jpg)\n    * 直观来看，采用`gist`索引规划期给的时间是更快的。但是如果采用`explain analyse`尝试获取真实结果的话，答案就恰恰相反了\n    * 先看`btree`![](/media/15331929892802.jpg)\n    * 再看`gist`![](/media/15331930513697.jpg)\n    * 结果匪夷所思，在`gist`索引的情况下，不论怎么测试，最终的`Execution time`都保持在500ms以上。而`btree`实际执行时间才1ms多。我尝试重启数据库，来保证数据没有缓存，但是`btree`反馈的实际执行时间也不过就11ms多，之后又会下降了1ms量级。这其中的原因，是因为`gist`是一种有损索引，所以不能像`btree`索引那样，直接把值取出来。\n    * **结论：通常情况下btree的查询速度会远好于gist，但是如果gist索引列只参与条件判断，不参与select，gist的速度还是比较理想的**\n2. 然是是创建索引的速度\n    * 先看`btree`![](/media/15331936107582.jpg)\n    * 再看`gist`![](/media/15331936413004.jpg)\n    * **结论：创建索引的速度，btree远好于gist**\n3. 还有功能上**gist索引不支持=查询，也就是如果除了模糊匹配，还需要精确匹配的话，必须引入btree索引**\n\n### 总结\n* `varchar`类型，如果需要模糊查询，需要这么来\n    ```\n    CREATE INDEX table_name_md5_index_btree ON table_name (md5 text_pattern_ops);\n    ```\n    但是此方案只支持`左锚定`\n* 如果需要不局限于`左锚定`的模糊查询，还需要这么来\n    ```\n    create extension pg_trgm;\n    CREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n    ```\n* 如果还需要精确等值查询，请务必保留`btree`索引\n \n\n\n\n","source":"_posts/PostgreSQL_select_varchar_like_front_.md","raw":"---\ntitle: PostgreSQL中varchar类型like前置%查询命中索引的方法\ndate: 2018-08-02 08:44:10\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n上一篇中，我们学习了`PostgreSQL`中想要让`varchar`类型支持`like`查询能够命中索引，需要注意的地方。但是即便是创建索引时，指定了操作符类`varchar_pattern_ops`，在使用`like`查询的时候，还是只能保证`sometext%`这种查询能够命中索引，但是`%sometext`这种是无能为力的，见下图。\n![](/media/15331709094483.jpg)\n![](/media/15331709707728.jpg)\n所以如果需要支持`%sometext`方式的索引查询，还需要再做点工作：\n1. `create extension pg_trgm;`\n2. ```\nCREATE INDEX log_action_v_uri_index  ON  log_action using gist (v_uri gist_trgm_ops);\n    ```\n1. 上面`gist`索引时有损的，后来研究支持，发现`gin`更合适，速度更快 **强烈推荐**\n```\nCREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n```\n\n\n然后重新执行`explain`，就能看到命中索引了\n![](/media/15331719609935.jpg)\n\n关于`btree`索引与`gist`索引的应用场景，我们以后再探讨。 现在我们先看看同样支持`sometext%`查询命中索引的情况下，我们该用哪种呢。\n1. 首先是查询速度，这次我们换百万行的数据来测试\n    * 先看`btree`的![](/media/15331926585276.jpg)\n    * 再看`gist`的![](/media/15331926156740.jpg)\n    * 直观来看，采用`gist`索引规划期给的时间是更快的。但是如果采用`explain analyse`尝试获取真实结果的话，答案就恰恰相反了\n    * 先看`btree`![](/media/15331929892802.jpg)\n    * 再看`gist`![](/media/15331930513697.jpg)\n    * 结果匪夷所思，在`gist`索引的情况下，不论怎么测试，最终的`Execution time`都保持在500ms以上。而`btree`实际执行时间才1ms多。我尝试重启数据库，来保证数据没有缓存，但是`btree`反馈的实际执行时间也不过就11ms多，之后又会下降了1ms量级。这其中的原因，是因为`gist`是一种有损索引，所以不能像`btree`索引那样，直接把值取出来。\n    * **结论：通常情况下btree的查询速度会远好于gist，但是如果gist索引列只参与条件判断，不参与select，gist的速度还是比较理想的**\n2. 然是是创建索引的速度\n    * 先看`btree`![](/media/15331936107582.jpg)\n    * 再看`gist`![](/media/15331936413004.jpg)\n    * **结论：创建索引的速度，btree远好于gist**\n3. 还有功能上**gist索引不支持=查询，也就是如果除了模糊匹配，还需要精确匹配的话，必须引入btree索引**\n\n### 总结\n* `varchar`类型，如果需要模糊查询，需要这么来\n    ```\n    CREATE INDEX table_name_md5_index_btree ON table_name (md5 text_pattern_ops);\n    ```\n    但是此方案只支持`左锚定`\n* 如果需要不局限于`左锚定`的模糊查询，还需要这么来\n    ```\n    create extension pg_trgm;\n    CREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n    ```\n* 如果还需要精确等值查询，请务必保留`btree`索引\n \n\n\n\n","slug":"PostgreSQL_select_varchar_like_front_","published":1,"updated":"2018-08-03T02:12:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmi001cy0mz03p36ili","content":"<p>上一篇中，我们学习了<code>PostgreSQL</code>中想要让<code>varchar</code>类型支持<code>like</code>查询能够命中索引，需要注意的地方。但是即便是创建索引时，指定了操作符类<code>varchar_pattern_ops</code>，在使用<code>like</code>查询的时候，还是只能保证<code>sometext%</code>这种查询能够命中索引，但是<code>%sometext</code>这种是无能为力的，见下图。<br><img src=\"/media/15331709094483.jpg\"><br><img src=\"/media/15331709707728.jpg\"><br>所以如果需要支持<code>%sometext</code>方式的索引查询，还需要再做点工作：</p>\n<ol>\n<li><code>create extension pg_trgm;</code></li>\n<li><pre><code>CREATE INDEX log_action_v_uri_index  ON  log_action using gist (v_uri gist_trgm_ops);\n <figure class=\"highlight autohotkey\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. 上面`gist`索引时有损的，后来研究支持，发现`gin`更合适，速度更快 **强烈推荐**</span><br></pre></td></tr></table></figure>\nCREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">然后重新执行<span class=\"code\">`explain`</span>，就能看到命中索引了</span><br><span class=\"line\">![](<span class=\"link\">/media/15331719609935.jpg</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">关于<span class=\"code\">`btree`</span>索引与<span class=\"code\">`gist`</span>索引的应用场景，我们以后再探讨。 现在我们先看看同样支持<span class=\"code\">`sometext%`</span>查询命中索引的情况下，我们该用哪种呢。</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 首先是查询速度，这次我们换百万行的数据来测试</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 先看<span class=\"code\">`btree`</span>的![](<span class=\"link\">/media/15331926585276.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 再看<span class=\"code\">`gist`</span>的![](<span class=\"link\">/media/15331926156740.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 直观来看，采用<span class=\"code\">`gist`</span>索引规划期给的时间是更快的。但是如果采用<span class=\"code\">`explain analyse`</span>尝试获取真实结果的话，答案就恰恰相反了</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 先看<span class=\"code\">`btree`</span>![](<span class=\"link\">/media/15331929892802.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 再看<span class=\"code\">`gist`</span>![](<span class=\"link\">/media/15331930513697.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 结果匪夷所思，在<span class=\"code\">`gist`</span>索引的情况下，不论怎么测试，最终的<span class=\"code\">`Execution time`</span>都保持在500ms以上。而<span class=\"code\">`btree`</span>实际执行时间才1ms多。我尝试重启数据库，来保证数据没有缓存，但是<span class=\"code\">`btree`</span>反馈的实际执行时间也不过就11ms多，之后又会下降了1ms量级。这其中的原因，是因为<span class=\"code\">`gist`</span>是一种有损索引，所以不能像<span class=\"code\">`btree`</span>索引那样，直接把值取出来。</span><br><span class=\"line\"><span class=\"bullet\">    *</span> <span class=\"strong\">**结论：通常情况下btree的查询速度会远好于gist，但是如果gist索引列只参与条件判断，不参与select，gist的速度还是比较理想的**</span></span><br><span class=\"line\"><span class=\"bullet\">2.</span> 然是是创建索引的速度</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 先看<span class=\"code\">`btree`</span>![](<span class=\"link\">/media/15331936107582.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 再看<span class=\"code\">`gist`</span>![](<span class=\"link\">/media/15331936413004.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> <span class=\"strong\">**结论：创建索引的速度，btree远好于gist**</span></span><br><span class=\"line\"><span class=\"bullet\">3.</span> 还有功能上<span class=\"strong\">**gist索引不支持=查询，也就是如果除了模糊匹配，还需要精确匹配的话，必须引入btree索引**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 总结</span></span><br><span class=\"line\"><span class=\"bullet\">*</span> <span class=\"code\">`varchar`</span>类型，如果需要模糊查询，需要这么来</span><br></pre></td></tr></table></figure>\n CREATE INDEX table_name_md5_index_btree ON table_name (md5 text_pattern_ops);\n <figure class=\"highlight autohotkey\"><table><tr><td class=\"code\"><pre><span class=\"line\">    但是此方案只支持`左锚定`</span><br><span class=\"line\">* 如果需要不局限于`左锚定`的模糊查询，还需要这么来</span><br></pre></td></tr></table></figure>\n create extension pg_trgm;\n CREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>如果还需要精确等值查询，请务必保留<code>btree</code>索引</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>上一篇中，我们学习了<code>PostgreSQL</code>中想要让<code>varchar</code>类型支持<code>like</code>查询能够命中索引，需要注意的地方。但是即便是创建索引时，指定了操作符类<code>varchar_pattern_ops</code>，在使用<code>like</code>查询的时候，还是只能保证<code>sometext%</code>这种查询能够命中索引，但是<code>%sometext</code>这种是无能为力的，见下图。<br><img src=\"/media/15331709094483.jpg\"><br><img src=\"/media/15331709707728.jpg\"><br>所以如果需要支持<code>%sometext</code>方式的索引查询，还需要再做点工作：</p>\n<ol>\n<li><code>create extension pg_trgm;</code></li>\n<li><pre><code>CREATE INDEX log_action_v_uri_index  ON  log_action using gist (v_uri gist_trgm_ops);\n <figure class=\"highlight autohotkey\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>. 上面`gist`索引时有损的，后来研究支持，发现`gin`更合适，速度更快 **强烈推荐**</span><br></pre></td></tr></table></figure>\nCREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">然后重新执行<span class=\"code\">`explain`</span>，就能看到命中索引了</span><br><span class=\"line\">![](<span class=\"link\">/media/15331719609935.jpg</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">关于<span class=\"code\">`btree`</span>索引与<span class=\"code\">`gist`</span>索引的应用场景，我们以后再探讨。 现在我们先看看同样支持<span class=\"code\">`sometext%`</span>查询命中索引的情况下，我们该用哪种呢。</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 首先是查询速度，这次我们换百万行的数据来测试</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 先看<span class=\"code\">`btree`</span>的![](<span class=\"link\">/media/15331926585276.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 再看<span class=\"code\">`gist`</span>的![](<span class=\"link\">/media/15331926156740.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 直观来看，采用<span class=\"code\">`gist`</span>索引规划期给的时间是更快的。但是如果采用<span class=\"code\">`explain analyse`</span>尝试获取真实结果的话，答案就恰恰相反了</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 先看<span class=\"code\">`btree`</span>![](<span class=\"link\">/media/15331929892802.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 再看<span class=\"code\">`gist`</span>![](<span class=\"link\">/media/15331930513697.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 结果匪夷所思，在<span class=\"code\">`gist`</span>索引的情况下，不论怎么测试，最终的<span class=\"code\">`Execution time`</span>都保持在500ms以上。而<span class=\"code\">`btree`</span>实际执行时间才1ms多。我尝试重启数据库，来保证数据没有缓存，但是<span class=\"code\">`btree`</span>反馈的实际执行时间也不过就11ms多，之后又会下降了1ms量级。这其中的原因，是因为<span class=\"code\">`gist`</span>是一种有损索引，所以不能像<span class=\"code\">`btree`</span>索引那样，直接把值取出来。</span><br><span class=\"line\"><span class=\"bullet\">    *</span> <span class=\"strong\">**结论：通常情况下btree的查询速度会远好于gist，但是如果gist索引列只参与条件判断，不参与select，gist的速度还是比较理想的**</span></span><br><span class=\"line\"><span class=\"bullet\">2.</span> 然是是创建索引的速度</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 先看<span class=\"code\">`btree`</span>![](<span class=\"link\">/media/15331936107582.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> 再看<span class=\"code\">`gist`</span>![](<span class=\"link\">/media/15331936413004.jpg</span>)</span><br><span class=\"line\"><span class=\"bullet\">    *</span> <span class=\"strong\">**结论：创建索引的速度，btree远好于gist**</span></span><br><span class=\"line\"><span class=\"bullet\">3.</span> 还有功能上<span class=\"strong\">**gist索引不支持=查询，也就是如果除了模糊匹配，还需要精确匹配的话，必须引入btree索引**</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 总结</span></span><br><span class=\"line\"><span class=\"bullet\">*</span> <span class=\"code\">`varchar`</span>类型，如果需要模糊查询，需要这么来</span><br></pre></td></tr></table></figure>\n CREATE INDEX table_name_md5_index_btree ON table_name (md5 text_pattern_ops);\n <figure class=\"highlight autohotkey\"><table><tr><td class=\"code\"><pre><span class=\"line\">    但是此方案只支持`左锚定`</span><br><span class=\"line\">* 如果需要不局限于`左锚定`的模糊查询，还需要这么来</span><br></pre></td></tr></table></figure>\n create extension pg_trgm;\n CREATE INDEX table_name_md5_index  ON table_name using gin (md5 gin_trgm_ops);\n</code></pre>\n</li>\n</ol>\n<ul>\n<li>如果还需要精确等值查询，请务必保留<code>btree</code>索引</li>\n</ul>\n"},{"title":"PostgreSQL中varchar类型支持like查询索引","date":"2018-08-01T00:42:03.000Z","_content":"之前在使用`PostgreSQL`中的`varchar`类型时想当然的以为用最基本的索引创建语句创建的索引，就支持`like`查询的。\n类似这句：\n```\nCREATE INDEX log_action_v_uri_index ON log_action (v_uri);\n```\n但是看过`explain`才知道，单凭这样的索引，在`like`搜索的时候，仍然是顺序全表扫描，如图：\n![](/media/15330845808519.jpg)\n后来google了一下解决方案，原来是创建索引的时候追加一下参数，应该这么创建\n```\nCREATE INDEX log_action_v_uri_index ON log_action (v_uri varchar_pattern_ops);\n```\n然后对同样的语句再次`explain`结果如下：\n![](/media/15330848868005.jpg)\n可以看到，已经命中索引了。\n这其中涉及到一个重要的知识点，就是`PostgreSQL`的索引*操作符类* ，其标准语法为\n```\nCREATE INDEX name ON table (column opclass [sort options] [, ...]);\n```\n这个`opclass`可以针对不同的数据类型和查询方式提供多种多样的方案，\n![](/media/15330861199315.jpg)\n可以看到光`btree`索引有关的操作符类就非常多，有些`is_default`是`true`也就是正好列类型吻合的话，这个操作符类就不要特意说明了。而`varchar`或者`text`的默认用的是`text_ops`，它支持的查询方式仅有\n![](/media/15330876281185.jpg)\n所以想用模糊查询的话，还是得用`text_pattern_ops`或者`varchar_pattern_ops`(这哥俩是一个东西)，它支持正则模糊匹配，也支持`like %`的方式\n![](/media/15330878032471.jpg)\n\n* 更多信息，可以查看官方文档[操作符类和操作符族](http://www.postgres.cn/docs/9.6/indexes-opclass.html)","source":"_posts/PostgreSQL_select_varchar_like_index.md","raw":"---\ntitle: PostgreSQL中varchar类型支持like查询索引\ndate: 2018-08-01 08:42:03\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n之前在使用`PostgreSQL`中的`varchar`类型时想当然的以为用最基本的索引创建语句创建的索引，就支持`like`查询的。\n类似这句：\n```\nCREATE INDEX log_action_v_uri_index ON log_action (v_uri);\n```\n但是看过`explain`才知道，单凭这样的索引，在`like`搜索的时候，仍然是顺序全表扫描，如图：\n![](/media/15330845808519.jpg)\n后来google了一下解决方案，原来是创建索引的时候追加一下参数，应该这么创建\n```\nCREATE INDEX log_action_v_uri_index ON log_action (v_uri varchar_pattern_ops);\n```\n然后对同样的语句再次`explain`结果如下：\n![](/media/15330848868005.jpg)\n可以看到，已经命中索引了。\n这其中涉及到一个重要的知识点，就是`PostgreSQL`的索引*操作符类* ，其标准语法为\n```\nCREATE INDEX name ON table (column opclass [sort options] [, ...]);\n```\n这个`opclass`可以针对不同的数据类型和查询方式提供多种多样的方案，\n![](/media/15330861199315.jpg)\n可以看到光`btree`索引有关的操作符类就非常多，有些`is_default`是`true`也就是正好列类型吻合的话，这个操作符类就不要特意说明了。而`varchar`或者`text`的默认用的是`text_ops`，它支持的查询方式仅有\n![](/media/15330876281185.jpg)\n所以想用模糊查询的话，还是得用`text_pattern_ops`或者`varchar_pattern_ops`(这哥俩是一个东西)，它支持正则模糊匹配，也支持`like %`的方式\n![](/media/15330878032471.jpg)\n\n* 更多信息，可以查看官方文档[操作符类和操作符族](http://www.postgres.cn/docs/9.6/indexes-opclass.html)","slug":"PostgreSQL_select_varchar_like_index","published":1,"updated":"2018-08-01T02:13:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmi001fy0mz491j79af","content":"<p>之前在使用<code>PostgreSQL</code>中的<code>varchar</code>类型时想当然的以为用最基本的索引创建语句创建的索引，就支持<code>like</code>查询的。<br>类似这句：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> log_action_v_uri_index <span class=\"keyword\">ON</span> log_action (v_uri);</span><br></pre></td></tr></table></figure>\n<p>但是看过<code>explain</code>才知道，单凭这样的索引，在<code>like</code>搜索的时候，仍然是顺序全表扫描，如图：<br><img src=\"/media/15330845808519.jpg\"><br>后来google了一下解决方案，原来是创建索引的时候追加一下参数，应该这么创建</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> log_action_v_uri_index <span class=\"keyword\">ON</span> log_action (v_uri varchar_pattern_ops);</span><br></pre></td></tr></table></figure>\n<p>然后对同样的语句再次<code>explain</code>结果如下：<br><img src=\"/media/15330848868005.jpg\"><br>可以看到，已经命中索引了。<br>这其中涉及到一个重要的知识点，就是<code>PostgreSQL</code>的索引<em>操作符类</em> ，其标准语法为</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> name <span class=\"keyword\">ON</span> <span class=\"keyword\">table</span> (column opclass [sort <span class=\"keyword\">options</span>] [, ...]);</span><br></pre></td></tr></table></figure>\n<p>这个<code>opclass</code>可以针对不同的数据类型和查询方式提供多种多样的方案，<br><img src=\"/media/15330861199315.jpg\"><br>可以看到光<code>btree</code>索引有关的操作符类就非常多，有些<code>is_default</code>是<code>true</code>也就是正好列类型吻合的话，这个操作符类就不要特意说明了。而<code>varchar</code>或者<code>text</code>的默认用的是<code>text_ops</code>，它支持的查询方式仅有<br><img src=\"/media/15330876281185.jpg\"><br>所以想用模糊查询的话，还是得用<code>text_pattern_ops</code>或者<code>varchar_pattern_ops</code>(这哥俩是一个东西)，它支持正则模糊匹配，也支持<code>like %</code>的方式<br><img src=\"/media/15330878032471.jpg\"></p>\n<ul>\n<li>更多信息，可以查看官方文档<a href=\"http://www.postgres.cn/docs/9.6/indexes-opclass.html\">操作符类和操作符族</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在使用<code>PostgreSQL</code>中的<code>varchar</code>类型时想当然的以为用最基本的索引创建语句创建的索引，就支持<code>like</code>查询的。<br>类似这句：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> log_action_v_uri_index <span class=\"keyword\">ON</span> log_action (v_uri);</span><br></pre></td></tr></table></figure>\n<p>但是看过<code>explain</code>才知道，单凭这样的索引，在<code>like</code>搜索的时候，仍然是顺序全表扫描，如图：<br><img src=\"/media/15330845808519.jpg\"><br>后来google了一下解决方案，原来是创建索引的时候追加一下参数，应该这么创建</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> log_action_v_uri_index <span class=\"keyword\">ON</span> log_action (v_uri varchar_pattern_ops);</span><br></pre></td></tr></table></figure>\n<p>然后对同样的语句再次<code>explain</code>结果如下：<br><img src=\"/media/15330848868005.jpg\"><br>可以看到，已经命中索引了。<br>这其中涉及到一个重要的知识点，就是<code>PostgreSQL</code>的索引<em>操作符类</em> ，其标准语法为</p>\n<figure class=\"highlight sas\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">INDEX</span> name <span class=\"keyword\">ON</span> <span class=\"keyword\">table</span> (column opclass [sort <span class=\"keyword\">options</span>] [, ...]);</span><br></pre></td></tr></table></figure>\n<p>这个<code>opclass</code>可以针对不同的数据类型和查询方式提供多种多样的方案，<br><img src=\"/media/15330861199315.jpg\"><br>可以看到光<code>btree</code>索引有关的操作符类就非常多，有些<code>is_default</code>是<code>true</code>也就是正好列类型吻合的话，这个操作符类就不要特意说明了。而<code>varchar</code>或者<code>text</code>的默认用的是<code>text_ops</code>，它支持的查询方式仅有<br><img src=\"/media/15330876281185.jpg\"><br>所以想用模糊查询的话，还是得用<code>text_pattern_ops</code>或者<code>varchar_pattern_ops</code>(这哥俩是一个东西)，它支持正则模糊匹配，也支持<code>like %</code>的方式<br><img src=\"/media/15330878032471.jpg\"></p>\n<ul>\n<li>更多信息，可以查看官方文档<a href=\"http://www.postgres.cn/docs/9.6/indexes-opclass.html\">操作符类和操作符族</a></li>\n</ul>\n"},{"title":"PostgreSQL打开SQL日志","date":"2018-08-21T23:25:04.000Z","_content":"找到`PostgreSQL`安装目录所在的地方，编辑配置文件`postgresql.conf`\n确保\n```\nlog_destination = 'stderr'\n```\n这样可以打开日志功能\n然后找到`atement`设置成`all`\n```\nlog_statement = 'all'\n```\n重启服务之后就可以跟踪到所有的`SQL`语句了。\n\n当然其他还有很多配置，可以进行更细致的定制，可以参考官方文档[错误报告和日志](http://www.postgres.cn/docs/10/runtime-config-logging.html)","source":"_posts/PostgreSQL_show_SQL_logs.md","raw":"---\ntitle: PostgreSQL打开SQL日志\ndate: 2018-08-22 07:25:04\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n找到`PostgreSQL`安装目录所在的地方，编辑配置文件`postgresql.conf`\n确保\n```\nlog_destination = 'stderr'\n```\n这样可以打开日志功能\n然后找到`atement`设置成`all`\n```\nlog_statement = 'all'\n```\n重启服务之后就可以跟踪到所有的`SQL`语句了。\n\n当然其他还有很多配置，可以进行更细致的定制，可以参考官方文档[错误报告和日志](http://www.postgres.cn/docs/10/runtime-config-logging.html)","slug":"PostgreSQL_show_SQL_logs","published":1,"updated":"2018-08-22T00:56:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmi001jy0mzfl5t8czx","content":"<p>找到<code>PostgreSQL</code>安装目录所在的地方，编辑配置文件<code>postgresql.conf</code><br>确保</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log_destination</span> = <span class=\"string\">&#x27;stderr&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>这样可以打开日志功能<br>然后找到<code>atement</code>设置成<code>all</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log_statement</span> = <span class=\"string\">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>重启服务之后就可以跟踪到所有的<code>SQL</code>语句了。</p>\n<p>当然其他还有很多配置，可以进行更细致的定制，可以参考官方文档<a href=\"http://www.postgres.cn/docs/10/runtime-config-logging.html\">错误报告和日志</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>找到<code>PostgreSQL</code>安装目录所在的地方，编辑配置文件<code>postgresql.conf</code><br>确保</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log_destination</span> = <span class=\"string\">&#x27;stderr&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>这样可以打开日志功能<br>然后找到<code>atement</code>设置成<code>all</code></p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">log_statement</span> = <span class=\"string\">&#x27;all&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>重启服务之后就可以跟踪到所有的<code>SQL</code>语句了。</p>\n<p>当然其他还有很多配置，可以进行更细致的定制，可以参考官方文档<a href=\"http://www.postgres.cn/docs/10/runtime-config-logging.html\">错误报告和日志</a></p>\n"},{"title":"PostgreSQL中实现更新默认值（二）","date":"2018-08-17T00:11:01.000Z","_content":"今天我们用`表继承`+`触发器`的方案，来实现表中的更新默认值。这也许是`PostgreSQL`里最佳的解决方案。\n#### 一. 创建一张表，作为父表\n\n```sql\ncreate table basic_update\n(\n  t_update timestamp\n);\n```\n#### 二. 创建一个函数，用作最后负责修改`t_update`使用\n\n```sql\nCREATE OR REPLACE FUNCTION update_modified_column()\n  RETURNS TRIGGER AS $$\nBEGIN\n  NEW.t_update = now();\n  RETURN NEW;\nEND;\n$$\nlanguage 'plpgsql';\n```\n\n#### 三. 创建一个函数，用来给继承了`basic_update`的表新增一个触发器，怼上第二步的函数\n\n```sql\ncreate function table_create()\n  returns event_trigger\nlanguage plpgsql\nas $$\nDECLARE oid           INT;\n        table_name    VARCHAR;\n        parent_tables VARCHAR [];\n        is_update     BOOL;\n\nBEGIN\n\n  SELECT object_identity\n      INTO table_name FROM pg_event_trigger_ddl_commands();\n\n  SELECT objid\n      INTO oid FROM pg_event_trigger_ddl_commands();\n\n\n  SELECT get_parent_tables_by_oid(oid)\n      INTO parent_tables;\n\n  SELECT parent_tables :: TEXT [] @> '{basic_update}' :: TEXT []\n      INTO is_update;\n\n\n  IF is_update\n\n  THEN\n    EXECUTE 'CREATE TRIGGER tgr_auto_t_update'\n            || ' BEFORE UPDATE ON  '\n            || table_name\n            || ' FOR EACH ROW EXECUTE PROCEDURE update_modified_column()';\n  END IF;\n\nEND;\n```\n\n#### 四. 创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\n\n```sql\nCREATE EVENT TRIGGER etgr_table_create\nON ddl_command_end\nWHEN TAG IN ('CREATE TABLE')\nEXECUTE PROCEDURE table_create();\n```\n\n#### 五. 所有操作已经完成，可以创建一个表测试了\n\n```sql\ncreate table test\n(\n  id        varchar default uuid_generate_v4() not null\n    constraint test_pkey\n    primary key,\n  text      varchar,\n  t_create  timestamp default now()\n)\n  inherits (basic_update);\n```\n\n\n```\ninsert into test (text)\nvalues ('a');\n```\n\n\n```\nupdate test\nset text = 'b'\n```","source":"_posts/PostgreSQL_auto_modify_defaults_2.md","raw":"---\ntitle: PostgreSQL中实现更新默认值（二）\ndate: 2018-08-17 08:11:01\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n今天我们用`表继承`+`触发器`的方案，来实现表中的更新默认值。这也许是`PostgreSQL`里最佳的解决方案。\n#### 一. 创建一张表，作为父表\n\n```sql\ncreate table basic_update\n(\n  t_update timestamp\n);\n```\n#### 二. 创建一个函数，用作最后负责修改`t_update`使用\n\n```sql\nCREATE OR REPLACE FUNCTION update_modified_column()\n  RETURNS TRIGGER AS $$\nBEGIN\n  NEW.t_update = now();\n  RETURN NEW;\nEND;\n$$\nlanguage 'plpgsql';\n```\n\n#### 三. 创建一个函数，用来给继承了`basic_update`的表新增一个触发器，怼上第二步的函数\n\n```sql\ncreate function table_create()\n  returns event_trigger\nlanguage plpgsql\nas $$\nDECLARE oid           INT;\n        table_name    VARCHAR;\n        parent_tables VARCHAR [];\n        is_update     BOOL;\n\nBEGIN\n\n  SELECT object_identity\n      INTO table_name FROM pg_event_trigger_ddl_commands();\n\n  SELECT objid\n      INTO oid FROM pg_event_trigger_ddl_commands();\n\n\n  SELECT get_parent_tables_by_oid(oid)\n      INTO parent_tables;\n\n  SELECT parent_tables :: TEXT [] @> '{basic_update}' :: TEXT []\n      INTO is_update;\n\n\n  IF is_update\n\n  THEN\n    EXECUTE 'CREATE TRIGGER tgr_auto_t_update'\n            || ' BEFORE UPDATE ON  '\n            || table_name\n            || ' FOR EACH ROW EXECUTE PROCEDURE update_modified_column()';\n  END IF;\n\nEND;\n```\n\n#### 四. 创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\n\n```sql\nCREATE EVENT TRIGGER etgr_table_create\nON ddl_command_end\nWHEN TAG IN ('CREATE TABLE')\nEXECUTE PROCEDURE table_create();\n```\n\n#### 五. 所有操作已经完成，可以创建一个表测试了\n\n```sql\ncreate table test\n(\n  id        varchar default uuid_generate_v4() not null\n    constraint test_pkey\n    primary key,\n  text      varchar,\n  t_create  timestamp default now()\n)\n  inherits (basic_update);\n```\n\n\n```\ninsert into test (text)\nvalues ('a');\n```\n\n\n```\nupdate test\nset text = 'b'\n```","slug":"PostgreSQL_auto_modify_defaults_2","published":1,"updated":"2018-08-26T01:15:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmj001my0mzf7ytbx5t","content":"<p>今天我们用<code>表继承</code>+<code>触发器</code>的方案，来实现表中的更新默认值。这也许是<code>PostgreSQL</code>里最佳的解决方案。</p>\n<h4 id=\"一-创建一张表，作为父表\"><a href=\"#一-创建一张表，作为父表\" class=\"headerlink\" title=\"一. 创建一张表，作为父表\"></a>一. 创建一张表，作为父表</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> basic_update</span><br><span class=\"line\">(</span><br><span class=\"line\">  t_update <span class=\"type\">timestamp</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"二-创建一个函数，用作最后负责修改t-update使用\"><a href=\"#二-创建一个函数，用作最后负责修改t-update使用\" class=\"headerlink\" title=\"二. 创建一个函数，用作最后负责修改t_update使用\"></a>二. 创建一个函数，用作最后负责修改<code>t_update</code>使用</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">FUNCTION</span> update_modified_column()</span><br><span class=\"line\">  <span class=\"keyword\">RETURNS</span> <span class=\"keyword\">TRIGGER</span> <span class=\"keyword\">AS</span> $$</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  NEW.t_update <span class=\"operator\">=</span> now();</span><br><span class=\"line\">  <span class=\"keyword\">RETURN</span> <span class=\"keyword\">NEW</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\">$$</span><br><span class=\"line\"><span class=\"keyword\">language</span> <span class=\"string\">&#x27;plpgsql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三-创建一个函数，用来给继承了basic-update的表新增一个触发器，怼上第二步的函数\"><a href=\"#三-创建一个函数，用来给继承了basic-update的表新增一个触发器，怼上第二步的函数\" class=\"headerlink\" title=\"三. 创建一个函数，用来给继承了basic_update的表新增一个触发器，怼上第二步的函数\"></a>三. 创建一个函数，用来给继承了<code>basic_update</code>的表新增一个触发器，怼上第二步的函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> table_create()</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> event_trigger</span><br><span class=\"line\"><span class=\"keyword\">language</span> plpgsql</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> oid           <span class=\"type\">INT</span>;</span><br><span class=\"line\">        table_name    <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\">        parent_tables <span class=\"type\">VARCHAR</span> [];</span><br><span class=\"line\">        is_update     BOOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> object_identity</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> table_name <span class=\"keyword\">FROM</span> pg_event_trigger_ddl_commands();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> objid</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> oid <span class=\"keyword\">FROM</span> pg_event_trigger_ddl_commands();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> get_parent_tables_by_oid(oid)</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> parent_tables;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> parent_tables :: TEXT [] @<span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;&#123;basic_update&#125;&#x27;</span> :: TEXT []</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> is_update;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  IF is_update</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">EXECUTE</span> <span class=\"string\">&#x27;CREATE TRIGGER tgr_auto_t_update&#x27;</span></span><br><span class=\"line\">            <span class=\"operator\">||</span> <span class=\"string\">&#x27; BEFORE UPDATE ON  &#x27;</span></span><br><span class=\"line\">            <span class=\"operator\">||</span> table_name</span><br><span class=\"line\">            <span class=\"operator\">||</span> <span class=\"string\">&#x27; FOR EACH ROW EXECUTE PROCEDURE update_modified_column()&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\"><a href=\"#四-创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\" class=\"headerlink\" title=\"四. 创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\"></a>四. 创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EVENT <span class=\"keyword\">TRIGGER</span> etgr_table_create</span><br><span class=\"line\"><span class=\"keyword\">ON</span> ddl_command_end</span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> TAG <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;CREATE TABLE&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">PROCEDURE</span> table_create();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五-所有操作已经完成，可以创建一个表测试了\"><a href=\"#五-所有操作已经完成，可以创建一个表测试了\" class=\"headerlink\" title=\"五. 所有操作已经完成，可以创建一个表测试了\"></a>五. 所有操作已经完成，可以创建一个表测试了</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test</span><br><span class=\"line\">(</span><br><span class=\"line\">  id        <span class=\"type\">varchar</span> <span class=\"keyword\">default</span> uuid_generate_v4() <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> test_pkey</span><br><span class=\"line\">    <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">  text      <span class=\"type\">varchar</span>,</span><br><span class=\"line\">  t_create  <span class=\"type\">timestamp</span> <span class=\"keyword\">default</span> now()</span><br><span class=\"line\">)</span><br><span class=\"line\">  inherits (basic_update);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> test (<span class=\"type\">text</span>)</span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> test</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"type\">text</span> = <span class=\"string\">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>今天我们用<code>表继承</code>+<code>触发器</code>的方案，来实现表中的更新默认值。这也许是<code>PostgreSQL</code>里最佳的解决方案。</p>\n<h4 id=\"一-创建一张表，作为父表\"><a href=\"#一-创建一张表，作为父表\" class=\"headerlink\" title=\"一. 创建一张表，作为父表\"></a>一. 创建一张表，作为父表</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> basic_update</span><br><span class=\"line\">(</span><br><span class=\"line\">  t_update <span class=\"type\">timestamp</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"二-创建一个函数，用作最后负责修改t-update使用\"><a href=\"#二-创建一个函数，用作最后负责修改t-update使用\" class=\"headerlink\" title=\"二. 创建一个函数，用作最后负责修改t_update使用\"></a>二. 创建一个函数，用作最后负责修改<code>t_update</code>使用</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR</span> REPLACE <span class=\"keyword\">FUNCTION</span> update_modified_column()</span><br><span class=\"line\">  <span class=\"keyword\">RETURNS</span> <span class=\"keyword\">TRIGGER</span> <span class=\"keyword\">AS</span> $$</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">  NEW.t_update <span class=\"operator\">=</span> now();</span><br><span class=\"line\">  <span class=\"keyword\">RETURN</span> <span class=\"keyword\">NEW</span>;</span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\">$$</span><br><span class=\"line\"><span class=\"keyword\">language</span> <span class=\"string\">&#x27;plpgsql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三-创建一个函数，用来给继承了basic-update的表新增一个触发器，怼上第二步的函数\"><a href=\"#三-创建一个函数，用来给继承了basic-update的表新增一个触发器，怼上第二步的函数\" class=\"headerlink\" title=\"三. 创建一个函数，用来给继承了basic_update的表新增一个触发器，怼上第二步的函数\"></a>三. 创建一个函数，用来给继承了<code>basic_update</code>的表新增一个触发器，怼上第二步的函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> table_create()</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> event_trigger</span><br><span class=\"line\"><span class=\"keyword\">language</span> plpgsql</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> oid           <span class=\"type\">INT</span>;</span><br><span class=\"line\">        table_name    <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\">        parent_tables <span class=\"type\">VARCHAR</span> [];</span><br><span class=\"line\">        is_update     BOOL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> object_identity</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> table_name <span class=\"keyword\">FROM</span> pg_event_trigger_ddl_commands();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> objid</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> oid <span class=\"keyword\">FROM</span> pg_event_trigger_ddl_commands();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> get_parent_tables_by_oid(oid)</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> parent_tables;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> parent_tables :: TEXT [] @<span class=\"operator\">&gt;</span> <span class=\"string\">&#x27;&#123;basic_update&#125;&#x27;</span> :: TEXT []</span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> is_update;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  IF is_update</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    <span class=\"keyword\">EXECUTE</span> <span class=\"string\">&#x27;CREATE TRIGGER tgr_auto_t_update&#x27;</span></span><br><span class=\"line\">            <span class=\"operator\">||</span> <span class=\"string\">&#x27; BEFORE UPDATE ON  &#x27;</span></span><br><span class=\"line\">            <span class=\"operator\">||</span> table_name</span><br><span class=\"line\">            <span class=\"operator\">||</span> <span class=\"string\">&#x27; FOR EACH ROW EXECUTE PROCEDURE update_modified_column()&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"四-创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\"><a href=\"#四-创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\" class=\"headerlink\" title=\"四. 创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数\"></a>四. 创建一个建表时的触发器，接管创建表的时机，怼上第三步的函数</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EVENT <span class=\"keyword\">TRIGGER</span> etgr_table_create</span><br><span class=\"line\"><span class=\"keyword\">ON</span> ddl_command_end</span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> TAG <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;CREATE TABLE&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">PROCEDURE</span> table_create();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"五-所有操作已经完成，可以创建一个表测试了\"><a href=\"#五-所有操作已经完成，可以创建一个表测试了\" class=\"headerlink\" title=\"五. 所有操作已经完成，可以创建一个表测试了\"></a>五. 所有操作已经完成，可以创建一个表测试了</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test</span><br><span class=\"line\">(</span><br><span class=\"line\">  id        <span class=\"type\">varchar</span> <span class=\"keyword\">default</span> uuid_generate_v4() <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> test_pkey</span><br><span class=\"line\">    <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">  text      <span class=\"type\">varchar</span>,</span><br><span class=\"line\">  t_create  <span class=\"type\">timestamp</span> <span class=\"keyword\">default</span> now()</span><br><span class=\"line\">)</span><br><span class=\"line\">  inherits (basic_update);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> test (<span class=\"type\">text</span>)</span><br><span class=\"line\"><span class=\"keyword\">values</span> (<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">update</span> test</span><br><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"type\">text</span> = <span class=\"string\">&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>"},{"title":"PostgreSQL中用递归CTE获取一张表的所有祖先表","date":"2018-08-15T02:18:00.000Z","_content":"今天介绍两个知识点：\n1. PostgreSQL的表继承\n2. PostgreSQL中的可递归CTE\n\n### 表继承\n表继承是PostgreSQL独有的功能，就是在`create table`的时候可以通过`inherits`关键字指定若干个父表，如：\n\n```sql\ncreate table test\n(\n  id       varchar default uuid_generate_v4() not null\n    constraint test_pkey\n    primary key,\n  text     varchar,\n  t_create timestamp default now()\n)\n  inherits (basic_update);\n```\n继承父表，有如下几个特性：\n* 父表的字段会自动加入子表中来\n* 父表上的所有检查约束和非空约束都将自动被它的后代所继承， 除非使用 NO INHERIT子句明确指定。其他类型的约束（唯一、主键和外键约束）则不会被继承\n* 插入子表的数据，在父表中默认是可以查询到的，除非在对父表查询时，表名前加入`only`修饰符\n\n### 递归CTE\n可选的RECURSIVE修饰符将WITH从单纯的句法便利变成了一种在标准SQL中不能完成的特性。通过使用RECURSIVE，一个WITH查询可以引用它自己的输出。一个非常简单的例子是计算从1到100的整数合的查询：\n\n```sql\nWITH RECURSIVE t(n) AS (\n    VALUES (1)\n  UNION ALL\n    SELECT n+1 FROM t WHERE n < 100\n)\nSELECT sum(n) FROM t;\n```\n\n### 回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\n这里我直接通过创建一个函数来封装这个功能，具体逻辑就在函数中，相信有前面两个知识点的铺垫，小伙伴们应该也能看懂了\n\n```sql\ncreate function get_parent_tables_by_oid(me integer)\n  returns character varying []\nlanguage plpgsql\nas $$\nDECLARE parent_tables VARCHAR [];\n\nBEGIN\n\n\n  WITH RECURSIVE x AS (SELECT * FROM pg_inherits WHERE inhrelid = me\n\n      UNION ALL\n\n      SELECT pg_inherits.* FROM x\n                                  JOIN pg_inherits ON x.inhparent = pg_inherits.inhrelid)\n\n\n  SELECT array_agg(pg_stat_user_tables.relname)\n\n      INTO parent_tables\n\n  FROM x\n         INNER JOIN pg_stat_user_tables ON x.inhparent = pg_stat_user_tables.relid;\n\n\n  RETURN parent_tables;\n\nEND;\n\n\n\n$$;\n```\n\n其中`inhrelid`是`PostgreSQL`中的一种元数据，可以理解成表的`id`，在知道表名的情况下怎么知道它的`id`呢，可以去元数据里面查，如下\n\n```sql\nSELECT relid FROM pg_stat_user_tables WHERE relname = 'a_table';\n```","source":"_posts/PostgreSQL_with_recursive.md","raw":"---\ntitle: PostgreSQL中用递归CTE获取一张表的所有祖先表\ndate: 2018-08-15 10:18:00\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n今天介绍两个知识点：\n1. PostgreSQL的表继承\n2. PostgreSQL中的可递归CTE\n\n### 表继承\n表继承是PostgreSQL独有的功能，就是在`create table`的时候可以通过`inherits`关键字指定若干个父表，如：\n\n```sql\ncreate table test\n(\n  id       varchar default uuid_generate_v4() not null\n    constraint test_pkey\n    primary key,\n  text     varchar,\n  t_create timestamp default now()\n)\n  inherits (basic_update);\n```\n继承父表，有如下几个特性：\n* 父表的字段会自动加入子表中来\n* 父表上的所有检查约束和非空约束都将自动被它的后代所继承， 除非使用 NO INHERIT子句明确指定。其他类型的约束（唯一、主键和外键约束）则不会被继承\n* 插入子表的数据，在父表中默认是可以查询到的，除非在对父表查询时，表名前加入`only`修饰符\n\n### 递归CTE\n可选的RECURSIVE修饰符将WITH从单纯的句法便利变成了一种在标准SQL中不能完成的特性。通过使用RECURSIVE，一个WITH查询可以引用它自己的输出。一个非常简单的例子是计算从1到100的整数合的查询：\n\n```sql\nWITH RECURSIVE t(n) AS (\n    VALUES (1)\n  UNION ALL\n    SELECT n+1 FROM t WHERE n < 100\n)\nSELECT sum(n) FROM t;\n```\n\n### 回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\n这里我直接通过创建一个函数来封装这个功能，具体逻辑就在函数中，相信有前面两个知识点的铺垫，小伙伴们应该也能看懂了\n\n```sql\ncreate function get_parent_tables_by_oid(me integer)\n  returns character varying []\nlanguage plpgsql\nas $$\nDECLARE parent_tables VARCHAR [];\n\nBEGIN\n\n\n  WITH RECURSIVE x AS (SELECT * FROM pg_inherits WHERE inhrelid = me\n\n      UNION ALL\n\n      SELECT pg_inherits.* FROM x\n                                  JOIN pg_inherits ON x.inhparent = pg_inherits.inhrelid)\n\n\n  SELECT array_agg(pg_stat_user_tables.relname)\n\n      INTO parent_tables\n\n  FROM x\n         INNER JOIN pg_stat_user_tables ON x.inhparent = pg_stat_user_tables.relid;\n\n\n  RETURN parent_tables;\n\nEND;\n\n\n\n$$;\n```\n\n其中`inhrelid`是`PostgreSQL`中的一种元数据，可以理解成表的`id`，在知道表名的情况下怎么知道它的`id`呢，可以去元数据里面查，如下\n\n```sql\nSELECT relid FROM pg_stat_user_tables WHERE relname = 'a_table';\n```","slug":"PostgreSQL_with_recursive","published":1,"updated":"2018-08-15T03:06:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmj001qy0mzaiigdsmk","content":"<p>今天介绍两个知识点：</p>\n<ol>\n<li>PostgreSQL的表继承</li>\n<li>PostgreSQL中的可递归CTE</li>\n</ol>\n<h3 id=\"表继承\"><a href=\"#表继承\" class=\"headerlink\" title=\"表继承\"></a>表继承</h3><p>表继承是PostgreSQL独有的功能，就是在<code>create table</code>的时候可以通过<code>inherits</code>关键字指定若干个父表，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test</span><br><span class=\"line\">(</span><br><span class=\"line\">  id       <span class=\"type\">varchar</span> <span class=\"keyword\">default</span> uuid_generate_v4() <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> test_pkey</span><br><span class=\"line\">    <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">  text     <span class=\"type\">varchar</span>,</span><br><span class=\"line\">  t_create <span class=\"type\">timestamp</span> <span class=\"keyword\">default</span> now()</span><br><span class=\"line\">)</span><br><span class=\"line\">  inherits (basic_update);</span><br></pre></td></tr></table></figure>\n<p>继承父表，有如下几个特性：</p>\n<ul>\n<li>父表的字段会自动加入子表中来</li>\n<li>父表上的所有检查约束和非空约束都将自动被它的后代所继承， 除非使用 NO INHERIT子句明确指定。其他类型的约束（唯一、主键和外键约束）则不会被继承</li>\n<li>插入子表的数据，在父表中默认是可以查询到的，除非在对父表查询时，表名前加入<code>only</code>修饰符</li>\n</ul>\n<h3 id=\"递归CTE\"><a href=\"#递归CTE\" class=\"headerlink\" title=\"递归CTE\"></a>递归CTE</h3><p>可选的RECURSIVE修饰符将WITH从单纯的句法便利变成了一种在标准SQL中不能完成的特性。通过使用RECURSIVE，一个WITH查询可以引用它自己的输出。一个非常简单的例子是计算从1到100的整数合的查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> <span class=\"keyword\">RECURSIVE</span> t(n) <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> n<span class=\"operator\">+</span><span class=\"number\">1</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> n <span class=\"operator\">&lt;</span> <span class=\"number\">100</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(n) <span class=\"keyword\">FROM</span> t;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\"><a href=\"#回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\" class=\"headerlink\" title=\"回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\"></a>回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表</h3><p>这里我直接通过创建一个函数来封装这个功能，具体逻辑就在函数中，相信有前面两个知识点的铺垫，小伙伴们应该也能看懂了</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> get_parent_tables_by_oid(me <span class=\"type\">integer</span>)</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">character</span> <span class=\"type\">varying</span> []</span><br><span class=\"line\"><span class=\"keyword\">language</span> plpgsql</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> parent_tables <span class=\"type\">VARCHAR</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">WITH</span> <span class=\"keyword\">RECURSIVE</span> x <span class=\"keyword\">AS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> pg_inherits <span class=\"keyword\">WHERE</span> inhrelid <span class=\"operator\">=</span> me</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span> pg_inherits.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">                                  <span class=\"keyword\">JOIN</span> pg_inherits <span class=\"keyword\">ON</span> x.inhparent <span class=\"operator\">=</span> pg_inherits.inhrelid)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> <span class=\"built_in\">array_agg</span>(pg_stat_user_tables.relname)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> parent_tables</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">         <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> pg_stat_user_tables <span class=\"keyword\">ON</span> x.inhparent <span class=\"operator\">=</span> pg_stat_user_tables.relid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">RETURN</span> parent_tables;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$$;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>inhrelid</code>是<code>PostgreSQL</code>中的一种元数据，可以理解成表的<code>id</code>，在知道表名的情况下怎么知道它的<code>id</code>呢，可以去元数据里面查，如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> relid <span class=\"keyword\">FROM</span> pg_stat_user_tables <span class=\"keyword\">WHERE</span> relname <span class=\"operator\">=</span> <span class=\"string\">&#x27;a_table&#x27;</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>今天介绍两个知识点：</p>\n<ol>\n<li>PostgreSQL的表继承</li>\n<li>PostgreSQL中的可递归CTE</li>\n</ol>\n<h3 id=\"表继承\"><a href=\"#表继承\" class=\"headerlink\" title=\"表继承\"></a>表继承</h3><p>表继承是PostgreSQL独有的功能，就是在<code>create table</code>的时候可以通过<code>inherits</code>关键字指定若干个父表，如：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">table</span> test</span><br><span class=\"line\">(</span><br><span class=\"line\">  id       <span class=\"type\">varchar</span> <span class=\"keyword\">default</span> uuid_generate_v4() <span class=\"keyword\">not</span> <span class=\"keyword\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">constraint</span> test_pkey</span><br><span class=\"line\">    <span class=\"keyword\">primary</span> key,</span><br><span class=\"line\">  text     <span class=\"type\">varchar</span>,</span><br><span class=\"line\">  t_create <span class=\"type\">timestamp</span> <span class=\"keyword\">default</span> now()</span><br><span class=\"line\">)</span><br><span class=\"line\">  inherits (basic_update);</span><br></pre></td></tr></table></figure>\n<p>继承父表，有如下几个特性：</p>\n<ul>\n<li>父表的字段会自动加入子表中来</li>\n<li>父表上的所有检查约束和非空约束都将自动被它的后代所继承， 除非使用 NO INHERIT子句明确指定。其他类型的约束（唯一、主键和外键约束）则不会被继承</li>\n<li>插入子表的数据，在父表中默认是可以查询到的，除非在对父表查询时，表名前加入<code>only</code>修饰符</li>\n</ul>\n<h3 id=\"递归CTE\"><a href=\"#递归CTE\" class=\"headerlink\" title=\"递归CTE\"></a>递归CTE</h3><p>可选的RECURSIVE修饰符将WITH从单纯的句法便利变成了一种在标准SQL中不能完成的特性。通过使用RECURSIVE，一个WITH查询可以引用它自己的输出。一个非常简单的例子是计算从1到100的整数合的查询：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">WITH</span> <span class=\"keyword\">RECURSIVE</span> t(n) <span class=\"keyword\">AS</span> (</span><br><span class=\"line\">    <span class=\"keyword\">VALUES</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\">    <span class=\"keyword\">SELECT</span> n<span class=\"operator\">+</span><span class=\"number\">1</span> <span class=\"keyword\">FROM</span> t <span class=\"keyword\">WHERE</span> n <span class=\"operator\">&lt;</span> <span class=\"number\">100</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"built_in\">sum</span>(n) <span class=\"keyword\">FROM</span> t;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\"><a href=\"#回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\" class=\"headerlink\" title=\"回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表\"></a>回到今天的主题，PostgreSQL中用递归CTE获取一张表的所有祖先表</h3><p>这里我直接通过创建一个函数来封装这个功能，具体逻辑就在函数中，相信有前面两个知识点的铺垫，小伙伴们应该也能看懂了</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> get_parent_tables_by_oid(me <span class=\"type\">integer</span>)</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">character</span> <span class=\"type\">varying</span> []</span><br><span class=\"line\"><span class=\"keyword\">language</span> plpgsql</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> parent_tables <span class=\"type\">VARCHAR</span> [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">WITH</span> <span class=\"keyword\">RECURSIVE</span> x <span class=\"keyword\">AS</span> (<span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> pg_inherits <span class=\"keyword\">WHERE</span> inhrelid <span class=\"operator\">=</span> me</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">UNION</span> <span class=\"keyword\">ALL</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">SELECT</span> pg_inherits.<span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">                                  <span class=\"keyword\">JOIN</span> pg_inherits <span class=\"keyword\">ON</span> x.inhparent <span class=\"operator\">=</span> pg_inherits.inhrelid)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> <span class=\"built_in\">array_agg</span>(pg_stat_user_tables.relname)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">INTO</span> parent_tables</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> x</span><br><span class=\"line\">         <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> pg_stat_user_tables <span class=\"keyword\">ON</span> x.inhparent <span class=\"operator\">=</span> pg_stat_user_tables.relid;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">RETURN</span> parent_tables;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$$;</span><br></pre></td></tr></table></figure>\n\n<p>其中<code>inhrelid</code>是<code>PostgreSQL</code>中的一种元数据，可以理解成表的<code>id</code>，在知道表名的情况下怎么知道它的<code>id</code>呢，可以去元数据里面查，如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> relid <span class=\"keyword\">FROM</span> pg_stat_user_tables <span class=\"keyword\">WHERE</span> relname <span class=\"operator\">=</span> <span class=\"string\">&#x27;a_table&#x27;</span>;</span><br></pre></td></tr></table></figure>"},{"title":"PostgreSQL中实现更新默认值（一）","date":"2018-08-15T23:18:18.000Z","_content":"业务系统中，经常会在设计表的时候，考虑这两个字段：新增时间、修改时间。前者用数据库的基础功能即可实现，后者就要采取一些手段了。\n在`PostgreSQL`中的最佳实践是采用触发器，捕捉`UPDATE`实践，虽然听起来很可怕，但其实并不难。\n1. 首先创建一个函数，作用就是给一行数据，追加某个值（这里我用的字段名是`t_update`）\n    \n    ```\n    CREATE OR REPLACE FUNCTION update_modified_column()\n      RETURNS TRIGGER AS $$\n    BEGIN\n      NEW.t_update = now();\n      RETURN NEW;\n    END;\n    $$\n    language 'plpgsql';\n    ```\n    \n2. 然后就是把这个函数怼到触发器上\n    \n    ```\n    CREATE TRIGGER tgr_auto_t_update\n      BEFORE UPDATE\n      ON a_table\n      FOR EACH ROW EXECUTE PROCEDURE update_modified_column()\n    ```\n    \n这样就大功告成了。但是如果有很多表的话，感觉还是有重复劳动，不够优雅。明天我将结合昨天提到的表继承，最大化的减少工作量，用更优雅的方法实现更新默认值的功能。","source":"_posts/PostgreSQL_auto_modify_defaults_1.md","raw":"---\ntitle: PostgreSQL中实现更新默认值（一）\ndate: 2018-08-16 07:18:18\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n业务系统中，经常会在设计表的时候，考虑这两个字段：新增时间、修改时间。前者用数据库的基础功能即可实现，后者就要采取一些手段了。\n在`PostgreSQL`中的最佳实践是采用触发器，捕捉`UPDATE`实践，虽然听起来很可怕，但其实并不难。\n1. 首先创建一个函数，作用就是给一行数据，追加某个值（这里我用的字段名是`t_update`）\n    \n    ```\n    CREATE OR REPLACE FUNCTION update_modified_column()\n      RETURNS TRIGGER AS $$\n    BEGIN\n      NEW.t_update = now();\n      RETURN NEW;\n    END;\n    $$\n    language 'plpgsql';\n    ```\n    \n2. 然后就是把这个函数怼到触发器上\n    \n    ```\n    CREATE TRIGGER tgr_auto_t_update\n      BEFORE UPDATE\n      ON a_table\n      FOR EACH ROW EXECUTE PROCEDURE update_modified_column()\n    ```\n    \n这样就大功告成了。但是如果有很多表的话，感觉还是有重复劳动，不够优雅。明天我将结合昨天提到的表继承，最大化的减少工作量，用更优雅的方法实现更新默认值的功能。","slug":"PostgreSQL_auto_modify_defaults_1","published":1,"updated":"2018-08-15T23:40:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmj001ty0mz3j0i5a5x","content":"<p>业务系统中，经常会在设计表的时候，考虑这两个字段：新增时间、修改时间。前者用数据库的基础功能即可实现，后者就要采取一些手段了。<br>在<code>PostgreSQL</code>中的最佳实践是采用触发器，捕捉<code>UPDATE</code>实践，虽然听起来很可怕，但其实并不难。</p>\n<ol>\n<li><p>首先创建一个函数，作用就是给一行数据，追加某个值（这里我用的字段名是<code>t_update</code>）</p>\n <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR REPLACE</span> <span class=\"keyword\">FUNCTION</span> update_modified_column()</span><br><span class=\"line\">  <span class=\"keyword\">RETURNS</span> <span class=\"type\">TRIGGER</span> <span class=\"keyword\">AS</span> $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">BEGIN</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">  <span class=\"built_in\">NEW</span>.t_update = now();</span></span><br><span class=\"line\"><span class=\"language-pgsql\">  <span class=\"keyword\">RETURN</span> <span class=\"built_in\">NEW</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">END</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">$$</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> <span class=\"string\">&#x27;plpgsql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就是把这个函数怼到触发器上</p>\n <figure class=\"highlight oxygene\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> TRIGGER tgr_auto_t_update</span><br><span class=\"line\">  BEFORE UPDATE</span><br><span class=\"line\">  <span class=\"keyword\">ON</span> a_table</span><br><span class=\"line\">  <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> ROW EXECUTE <span class=\"keyword\">PROCEDURE</span> <span class=\"title function_\">update_modified_column</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这样就大功告成了。但是如果有很多表的话，感觉还是有重复劳动，不够优雅。明天我将结合昨天提到的表继承，最大化的减少工作量，用更优雅的方法实现更新默认值的功能。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>业务系统中，经常会在设计表的时候，考虑这两个字段：新增时间、修改时间。前者用数据库的基础功能即可实现，后者就要采取一些手段了。<br>在<code>PostgreSQL</code>中的最佳实践是采用触发器，捕捉<code>UPDATE</code>实践，虽然听起来很可怕，但其实并不难。</p>\n<ol>\n<li><p>首先创建一个函数，作用就是给一行数据，追加某个值（这里我用的字段名是<code>t_update</code>）</p>\n <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">OR REPLACE</span> <span class=\"keyword\">FUNCTION</span> update_modified_column()</span><br><span class=\"line\">  <span class=\"keyword\">RETURNS</span> <span class=\"type\">TRIGGER</span> <span class=\"keyword\">AS</span> $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">BEGIN</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">  <span class=\"built_in\">NEW</span>.t_update = now();</span></span><br><span class=\"line\"><span class=\"language-pgsql\">  <span class=\"keyword\">RETURN</span> <span class=\"built_in\">NEW</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">END</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">$$</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> <span class=\"string\">&#x27;plpgsql&#x27;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就是把这个函数怼到触发器上</p>\n <figure class=\"highlight oxygene\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> TRIGGER tgr_auto_t_update</span><br><span class=\"line\">  BEFORE UPDATE</span><br><span class=\"line\">  <span class=\"keyword\">ON</span> a_table</span><br><span class=\"line\">  <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> ROW EXECUTE <span class=\"keyword\">PROCEDURE</span> <span class=\"title function_\">update_modified_column</span><span class=\"params\">()</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这样就大功告成了。但是如果有很多表的话，感觉还是有重复劳动，不够优雅。明天我将结合昨天提到的表继承，最大化的减少工作量，用更优雅的方法实现更新默认值的功能。</p>\n"},{"title":"PostgreSQL中对用户重命名需要注意的","date":"2018-09-25T03:05:17.000Z","_content":"在`PostgreSQL`中，如果需要对数据库用户重命名，其实很简单，就是\n```\nALTER USER name RENAME TO new_name\n```\n但是你会收到一个提示\n```\nNOTICE:  MD5 password cleared because of role rename\n```\n这里面传递了两个信息：\n1. 改用户名，就是改角色名，因为在`PostgreSQL`中，用户等价于角色，唯一的区别就是，角色分可以登陆和不可以登陆的，而用户就是能登陆的角色。\n2. 改了用户名，密码就丢了。\n\n今天主要讨论的，就是上面第二点问题。为啥**改个用户名，密码就给我干掉了？**，这很违背常识。\n但其实是有原因的：\n* 首先，`PostgreSQL`中存放的密码，是MD5加密的，当然是不可逆的，这个大家能理解。\n    这个通过这条`SQL`能够查到\n    ```\n    SELECT rolname,rolpassword FROM pg_authid;\n    ```\n* 但是`rolpassword`并不是`md5(password)`直接得出的，里面存的其实是\n    ```\n    \"md5\"+md5(username+password)\n    ```\n    这么一个情况，也就是说，如果你设置`joe`用户的密码是`xyz`的话，实际上`rolpassword`列存的值，相当于\n    ```\n    select 'md5'||md5('joe'||'xyz');\n    ```\n* 这就解释了，为什么用户名改了，密码就丢了。因为用户名本就是密码的一部分，如果加密过后的值不跟着改变的话，新的用户名沿用固定的算法，是无法登陆的。而`PostgreSQL`永远也不会知道曾经的密码是多少，所以不能自动帮用户更新`rolpassword`，这就只能靠用户自己重新设置一次密码了。\n* 说白了，`PostgreSQL`也是好心，她是有苦衷的。\n","source":"_posts/PostgreSQL_rename_notice.md","raw":"---\ntitle: PostgreSQL中对用户重命名需要注意的\ndate: 2018-09-25 11:05:17\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n在`PostgreSQL`中，如果需要对数据库用户重命名，其实很简单，就是\n```\nALTER USER name RENAME TO new_name\n```\n但是你会收到一个提示\n```\nNOTICE:  MD5 password cleared because of role rename\n```\n这里面传递了两个信息：\n1. 改用户名，就是改角色名，因为在`PostgreSQL`中，用户等价于角色，唯一的区别就是，角色分可以登陆和不可以登陆的，而用户就是能登陆的角色。\n2. 改了用户名，密码就丢了。\n\n今天主要讨论的，就是上面第二点问题。为啥**改个用户名，密码就给我干掉了？**，这很违背常识。\n但其实是有原因的：\n* 首先，`PostgreSQL`中存放的密码，是MD5加密的，当然是不可逆的，这个大家能理解。\n    这个通过这条`SQL`能够查到\n    ```\n    SELECT rolname,rolpassword FROM pg_authid;\n    ```\n* 但是`rolpassword`并不是`md5(password)`直接得出的，里面存的其实是\n    ```\n    \"md5\"+md5(username+password)\n    ```\n    这么一个情况，也就是说，如果你设置`joe`用户的密码是`xyz`的话，实际上`rolpassword`列存的值，相当于\n    ```\n    select 'md5'||md5('joe'||'xyz');\n    ```\n* 这就解释了，为什么用户名改了，密码就丢了。因为用户名本就是密码的一部分，如果加密过后的值不跟着改变的话，新的用户名沿用固定的算法，是无法登陆的。而`PostgreSQL`永远也不会知道曾经的密码是多少，所以不能自动帮用户更新`rolpassword`，这就只能靠用户自己重新设置一次密码了。\n* 说白了，`PostgreSQL`也是好心，她是有苦衷的。\n","slug":"PostgreSQL_rename_notice","published":1,"updated":"2018-09-25T03:21:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmj001wy0mz26qi101z","content":"<p>在<code>PostgreSQL</code>中，如果需要对数据库用户重命名，其实很简单，就是</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"type\">name</span> <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> new_name</span><br></pre></td></tr></table></figure>\n<p>但是你会收到一个提示</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">NOTICE</span>:  MD5 <span class=\"keyword\">password</span> cleared because <span class=\"keyword\">of</span> <span class=\"keyword\">role</span> <span class=\"keyword\">rename</span></span><br></pre></td></tr></table></figure>\n<p>这里面传递了两个信息：</p>\n<ol>\n<li>改用户名，就是改角色名，因为在<code>PostgreSQL</code>中，用户等价于角色，唯一的区别就是，角色分可以登陆和不可以登陆的，而用户就是能登陆的角色。</li>\n<li>改了用户名，密码就丢了。</li>\n</ol>\n<p>今天主要讨论的，就是上面第二点问题。为啥<strong>改个用户名，密码就给我干掉了？</strong>，这很违背常识。<br>但其实是有原因的：</p>\n<ul>\n<li>首先，<code>PostgreSQL</code>中存放的密码，是MD5加密的，当然是不可逆的，这个大家能理解。<br>  这个通过这条<code>SQL</code>能够查到  <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> rolname,rolpassword <span class=\"keyword\">FROM</span> pg_authid;</span><br></pre></td></tr></table></figure></li>\n<li>但是<code>rolpassword</code>并不是<code>md5(password)</code>直接得出的，里面存的其实是  <figure class=\"highlight isbl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;md5&quot;</span>+<span class=\"function\"><span class=\"title\">md5</span>(<span class=\"variable\">username</span>+<span class=\"variable\">password</span>)</span></span><br></pre></td></tr></table></figure>\n  这么一个情况，也就是说，如果你设置<code>joe</code>用户的密码是<code>xyz</code>的话，实际上<code>rolpassword</code>列存的值，相当于  <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;md5&#x27;</span>||md5(<span class=\"string\">&#x27;joe&#x27;</span>||<span class=\"string\">&#x27;xyz&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>这就解释了，为什么用户名改了，密码就丢了。因为用户名本就是密码的一部分，如果加密过后的值不跟着改变的话，新的用户名沿用固定的算法，是无法登陆的。而<code>PostgreSQL</code>永远也不会知道曾经的密码是多少，所以不能自动帮用户更新<code>rolpassword</code>，这就只能靠用户自己重新设置一次密码了。</li>\n<li>说白了，<code>PostgreSQL</code>也是好心，她是有苦衷的。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在<code>PostgreSQL</code>中，如果需要对数据库用户重命名，其实很简单，就是</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"type\">name</span> <span class=\"keyword\">RENAME</span> <span class=\"keyword\">TO</span> new_name</span><br></pre></td></tr></table></figure>\n<p>但是你会收到一个提示</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">NOTICE</span>:  MD5 <span class=\"keyword\">password</span> cleared because <span class=\"keyword\">of</span> <span class=\"keyword\">role</span> <span class=\"keyword\">rename</span></span><br></pre></td></tr></table></figure>\n<p>这里面传递了两个信息：</p>\n<ol>\n<li>改用户名，就是改角色名，因为在<code>PostgreSQL</code>中，用户等价于角色，唯一的区别就是，角色分可以登陆和不可以登陆的，而用户就是能登陆的角色。</li>\n<li>改了用户名，密码就丢了。</li>\n</ol>\n<p>今天主要讨论的，就是上面第二点问题。为啥<strong>改个用户名，密码就给我干掉了？</strong>，这很违背常识。<br>但其实是有原因的：</p>\n<ul>\n<li>首先，<code>PostgreSQL</code>中存放的密码，是MD5加密的，当然是不可逆的，这个大家能理解。<br>  这个通过这条<code>SQL</code>能够查到  <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> rolname,rolpassword <span class=\"keyword\">FROM</span> pg_authid;</span><br></pre></td></tr></table></figure></li>\n<li>但是<code>rolpassword</code>并不是<code>md5(password)</code>直接得出的，里面存的其实是  <figure class=\"highlight isbl\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;md5&quot;</span>+<span class=\"function\"><span class=\"title\">md5</span>(<span class=\"variable\">username</span>+<span class=\"variable\">password</span>)</span></span><br></pre></td></tr></table></figure>\n  这么一个情况，也就是说，如果你设置<code>joe</code>用户的密码是<code>xyz</code>的话，实际上<code>rolpassword</code>列存的值，相当于  <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"string\">&#x27;md5&#x27;</span>||md5(<span class=\"string\">&#x27;joe&#x27;</span>||<span class=\"string\">&#x27;xyz&#x27;</span>);</span><br></pre></td></tr></table></figure></li>\n<li>这就解释了，为什么用户名改了，密码就丢了。因为用户名本就是密码的一部分，如果加密过后的值不跟着改变的话，新的用户名沿用固定的算法，是无法登陆的。而<code>PostgreSQL</code>永远也不会知道曾经的密码是多少，所以不能自动帮用户更新<code>rolpassword</code>，这就只能靠用户自己重新设置一次密码了。</li>\n<li>说白了，<code>PostgreSQL</code>也是好心，她是有苦衷的。</li>\n</ul>\n"},{"title":"Safari 12不再支持不安全的扩展","date":"2018-09-27T02:23:52.000Z","_content":"升级到`Safari 12`后，好几个浏览器扩展都直接挂了，当我尝试重新安装`惠惠购物助手`时，出现了如下提示：\n![Safari浏览器不再支持不安全的扩展](/media/15380151275481.jpg)\n\n现在转过弯了，`Safari 12`肯定是更新了扩展安装策略。向`Chrome`的思路靠拢了，没经过官方审核的扩展无法安装。\n道高一尺，魔高一丈。还是有办法绕过这个机制的。\n网上搜了一些解决方案，大多没有配图，而且有些步骤还是比较模糊。下面我给出具体步骤：\n1. 下载浏览器扩展，此处我以`youdaogouwu.safariextz`为例\n2. 解压`youdaogouwu.safariextz`，这里有个关键点，用老办法重命名后缀为`zip`是无法解压的。但是重命名后缀为`rar`就可以了。这可能跟你电脑里装的软件解压工具有关。我电脑里装的是`keka`。解压成功后如图：![](/media/15380172675854.jpg)\n\n3. 打开`Safari`的设置，找到`高级`，勾选`在菜单栏中显示“开发”菜单`，如图：![](/media/15380173560777.jpg)\n\n4. 在`开发`菜单中找到`显示扩展构建器`，如图：![](/media/15380174874853.jpg)\n\n5. 打开之，找到左下角的`➕`，选`添加扩展`，如图：![](/media/15380182351986.jpg)\n\n\n6. 之后在弹框中选择直接解压后文件中的文件夹`YoudaoGouwu.safariextension`，如图：![](/media/15380177660522.jpg)\n\n7. 之后就会在`扩展构建器`中看到`惠惠购物助手`了，然后点击右上角的运行，如图：![](/media/15380183216923.jpg)\n\n\n\n8. 按提示输入一次密码后大功告成，现在回到`Safari`的设置中，就可以看到`惠惠购物助手`已经安装完毕了：![](/media/15380180870297.jpg)\n\n## 注意\n上面解压缩的文件夹不可以删除，如果删除，当`Safari`重启后，扩展也会跟着丢失。所以记得好好保存。","source":"_posts/Safari12_install_safariextz.md","raw":"---\ntitle: Safari 12不再支持不安全的扩展\ndate: 2018-09-27 10:23:52\ncategories: 工具技巧\n---\n升级到`Safari 12`后，好几个浏览器扩展都直接挂了，当我尝试重新安装`惠惠购物助手`时，出现了如下提示：\n![Safari浏览器不再支持不安全的扩展](/media/15380151275481.jpg)\n\n现在转过弯了，`Safari 12`肯定是更新了扩展安装策略。向`Chrome`的思路靠拢了，没经过官方审核的扩展无法安装。\n道高一尺，魔高一丈。还是有办法绕过这个机制的。\n网上搜了一些解决方案，大多没有配图，而且有些步骤还是比较模糊。下面我给出具体步骤：\n1. 下载浏览器扩展，此处我以`youdaogouwu.safariextz`为例\n2. 解压`youdaogouwu.safariextz`，这里有个关键点，用老办法重命名后缀为`zip`是无法解压的。但是重命名后缀为`rar`就可以了。这可能跟你电脑里装的软件解压工具有关。我电脑里装的是`keka`。解压成功后如图：![](/media/15380172675854.jpg)\n\n3. 打开`Safari`的设置，找到`高级`，勾选`在菜单栏中显示“开发”菜单`，如图：![](/media/15380173560777.jpg)\n\n4. 在`开发`菜单中找到`显示扩展构建器`，如图：![](/media/15380174874853.jpg)\n\n5. 打开之，找到左下角的`➕`，选`添加扩展`，如图：![](/media/15380182351986.jpg)\n\n\n6. 之后在弹框中选择直接解压后文件中的文件夹`YoudaoGouwu.safariextension`，如图：![](/media/15380177660522.jpg)\n\n7. 之后就会在`扩展构建器`中看到`惠惠购物助手`了，然后点击右上角的运行，如图：![](/media/15380183216923.jpg)\n\n\n\n8. 按提示输入一次密码后大功告成，现在回到`Safari`的设置中，就可以看到`惠惠购物助手`已经安装完毕了：![](/media/15380180870297.jpg)\n\n## 注意\n上面解压缩的文件夹不可以删除，如果删除，当`Safari`重启后，扩展也会跟着丢失。所以记得好好保存。","slug":"Safari12_install_safariextz","published":1,"updated":"2018-09-27T03:24:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmk001zy0mzb8hlc48m","content":"<p>升级到<code>Safari 12</code>后，好几个浏览器扩展都直接挂了，当我尝试重新安装<code>惠惠购物助手</code>时，出现了如下提示：<br><img src=\"/media/15380151275481.jpg\" alt=\"Safari浏览器不再支持不安全的扩展\"></p>\n<p>现在转过弯了，<code>Safari 12</code>肯定是更新了扩展安装策略。向<code>Chrome</code>的思路靠拢了，没经过官方审核的扩展无法安装。<br>道高一尺，魔高一丈。还是有办法绕过这个机制的。<br>网上搜了一些解决方案，大多没有配图，而且有些步骤还是比较模糊。下面我给出具体步骤：</p>\n<ol>\n<li><p>下载浏览器扩展，此处我以<code>youdaogouwu.safariextz</code>为例</p>\n</li>\n<li><p>解压<code>youdaogouwu.safariextz</code>，这里有个关键点，用老办法重命名后缀为<code>zip</code>是无法解压的。但是重命名后缀为<code>rar</code>就可以了。这可能跟你电脑里装的软件解压工具有关。我电脑里装的是<code>keka</code>。解压成功后如图：<img src=\"/media/15380172675854.jpg\"></p>\n</li>\n<li><p>打开<code>Safari</code>的设置，找到<code>高级</code>，勾选<code>在菜单栏中显示“开发”菜单</code>，如图：<img src=\"/media/15380173560777.jpg\"></p>\n</li>\n<li><p>在<code>开发</code>菜单中找到<code>显示扩展构建器</code>，如图：<img src=\"/media/15380174874853.jpg\"></p>\n</li>\n<li><p>打开之，找到左下角的<code>➕</code>，选<code>添加扩展</code>，如图：<img src=\"/media/15380182351986.jpg\"></p>\n</li>\n<li><p>之后在弹框中选择直接解压后文件中的文件夹<code>YoudaoGouwu.safariextension</code>，如图：<img src=\"/media/15380177660522.jpg\"></p>\n</li>\n<li><p>之后就会在<code>扩展构建器</code>中看到<code>惠惠购物助手</code>了，然后点击右上角的运行，如图：<img src=\"/media/15380183216923.jpg\"></p>\n</li>\n<li><p>按提示输入一次密码后大功告成，现在回到<code>Safari</code>的设置中，就可以看到<code>惠惠购物助手</code>已经安装完毕了：<img src=\"/media/15380180870297.jpg\"></p>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>上面解压缩的文件夹不可以删除，如果删除，当<code>Safari</code>重启后，扩展也会跟着丢失。所以记得好好保存。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>升级到<code>Safari 12</code>后，好几个浏览器扩展都直接挂了，当我尝试重新安装<code>惠惠购物助手</code>时，出现了如下提示：<br><img src=\"/media/15380151275481.jpg\" alt=\"Safari浏览器不再支持不安全的扩展\"></p>\n<p>现在转过弯了，<code>Safari 12</code>肯定是更新了扩展安装策略。向<code>Chrome</code>的思路靠拢了，没经过官方审核的扩展无法安装。<br>道高一尺，魔高一丈。还是有办法绕过这个机制的。<br>网上搜了一些解决方案，大多没有配图，而且有些步骤还是比较模糊。下面我给出具体步骤：</p>\n<ol>\n<li><p>下载浏览器扩展，此处我以<code>youdaogouwu.safariextz</code>为例</p>\n</li>\n<li><p>解压<code>youdaogouwu.safariextz</code>，这里有个关键点，用老办法重命名后缀为<code>zip</code>是无法解压的。但是重命名后缀为<code>rar</code>就可以了。这可能跟你电脑里装的软件解压工具有关。我电脑里装的是<code>keka</code>。解压成功后如图：<img src=\"/media/15380172675854.jpg\"></p>\n</li>\n<li><p>打开<code>Safari</code>的设置，找到<code>高级</code>，勾选<code>在菜单栏中显示“开发”菜单</code>，如图：<img src=\"/media/15380173560777.jpg\"></p>\n</li>\n<li><p>在<code>开发</code>菜单中找到<code>显示扩展构建器</code>，如图：<img src=\"/media/15380174874853.jpg\"></p>\n</li>\n<li><p>打开之，找到左下角的<code>➕</code>，选<code>添加扩展</code>，如图：<img src=\"/media/15380182351986.jpg\"></p>\n</li>\n<li><p>之后在弹框中选择直接解压后文件中的文件夹<code>YoudaoGouwu.safariextension</code>，如图：<img src=\"/media/15380177660522.jpg\"></p>\n</li>\n<li><p>之后就会在<code>扩展构建器</code>中看到<code>惠惠购物助手</code>了，然后点击右上角的运行，如图：<img src=\"/media/15380183216923.jpg\"></p>\n</li>\n<li><p>按提示输入一次密码后大功告成，现在回到<code>Safari</code>的设置中，就可以看到<code>惠惠购物助手</code>已经安装完毕了：<img src=\"/media/15380180870297.jpg\"></p>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>上面解压缩的文件夹不可以删除，如果删除，当<code>Safari</code>重启后，扩展也会跟着丢失。所以记得好好保存。</p>\n"},{"title":"PostgreSQL中的distinct on","date":"2018-08-09T00:24:27.000Z","_content":"想象有这么一张表，存放若干学生不同课程的考试成绩，需求是，找出每门课程中，成绩最好的学生。原始表大概如下：\n\n```\n+--------------------------------------+-----------------+----------------+-----------+\n| id                                   | v_studentname   | v_coursename   | i_score   |\n|--------------------------------------+-----------------+----------------+-----------|\n| fb9fe43a-6f57-4f92-8678-139167693e72 | 张三            | 语文           | 91        |\n| 0898afd7-4253-496e-9190-36fae14bddf2 | 张三            | 数学           | 77        |\n| 2a1f810d-55ee-42cc-ac17-ee970154cecb | 张三            | 英语           | 90        |\n| fa975cd4-af5f-49d0-a89e-6f88665629eb | 李四            | 语文           | 88        |\n| 8833a07c-de8d-4b15-aa34-d9340c2e82c3 | 李四            | 数学           | 87        |\n| 1a9dfbdf-7c44-45d7-8141-590203aa26a9 | 李四            | 英语           | 89        |\n| cd3ec937-0ab9-4745-ad1a-c9f85839eaeb | 王五            | 语文           | 89        |\n| 431b7ccd-3a25-4ff4-9cc2-2e9f111f5c06 | 王五            | 数学           | 91        |\n| 8021e41d-09f5-49fb-a9e2-750d14bbff50 | 王五            | 英语           | 79        |\n+--------------------------------------+-----------------+----------------+-----------+\n```\n## 传统方案\n传统的方法，要找每门课程成绩最好的学生的话，需要借助聚合函数，而且要几步操作：\n1. 找到每门课程的最好成绩\n    ```\nselect v_coursename, max(i_score)\nfrom achievement\ngroup by v_coursename;\n    ```\n2. 再跟`achievement`表`join`，才能找到该课程最高分对应的学生姓名。即使在有`CTE`支持的情况下，实现起来也很复杂\n    ```\nwith cte as (select v_coursename, max(i_score) as i_score from achievement group by v_coursename)\nselect cte.*, achievement.v_studentname\nfrom cte\n       join achievement on cte.i_score = achievement.i_score and cte.v_coursename = achievement.v_coursename\norder by cte.v_coursename;\n    ```\n    要是没有`CTE`的支持，估计用纯数据库实现，就捉襟见肘了。\n    \n## 使用distinct on的方案\n\n```\nselect distinct on (v_coursename) * \nfrom achievement\norder by v_coursename, i_score desc;\n```\n    \n一句话解决，是不是很开森。\n\n#### 原理回顾\n`DISTINCT ON`是将结果集按指定字段值的去重，具体实现方法是先对结果集按照`DISTINCT ON`指定的字段进行排序，然后筛选出每个字段第一次出现时所在的记录，其余的记录都剔除。\n`ON`修饰符支持多列，运算时会基于多列的总体唯一性进行去重操作。同时查询语句必须要有`ORDER BY`，并且要保证排序字段从左至右的的顺序，应该是跟`DISTINCT ON`命中字段顺序相符合，当然`ORDER BY`可以追加更多的字段。","source":"_posts/PostgreSQL_distinct-on.md","raw":"---\ntitle: PostgreSQL中的distinct on\ndate: 2018-08-09 08:24:27\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n想象有这么一张表，存放若干学生不同课程的考试成绩，需求是，找出每门课程中，成绩最好的学生。原始表大概如下：\n\n```\n+--------------------------------------+-----------------+----------------+-----------+\n| id                                   | v_studentname   | v_coursename   | i_score   |\n|--------------------------------------+-----------------+----------------+-----------|\n| fb9fe43a-6f57-4f92-8678-139167693e72 | 张三            | 语文           | 91        |\n| 0898afd7-4253-496e-9190-36fae14bddf2 | 张三            | 数学           | 77        |\n| 2a1f810d-55ee-42cc-ac17-ee970154cecb | 张三            | 英语           | 90        |\n| fa975cd4-af5f-49d0-a89e-6f88665629eb | 李四            | 语文           | 88        |\n| 8833a07c-de8d-4b15-aa34-d9340c2e82c3 | 李四            | 数学           | 87        |\n| 1a9dfbdf-7c44-45d7-8141-590203aa26a9 | 李四            | 英语           | 89        |\n| cd3ec937-0ab9-4745-ad1a-c9f85839eaeb | 王五            | 语文           | 89        |\n| 431b7ccd-3a25-4ff4-9cc2-2e9f111f5c06 | 王五            | 数学           | 91        |\n| 8021e41d-09f5-49fb-a9e2-750d14bbff50 | 王五            | 英语           | 79        |\n+--------------------------------------+-----------------+----------------+-----------+\n```\n## 传统方案\n传统的方法，要找每门课程成绩最好的学生的话，需要借助聚合函数，而且要几步操作：\n1. 找到每门课程的最好成绩\n    ```\nselect v_coursename, max(i_score)\nfrom achievement\ngroup by v_coursename;\n    ```\n2. 再跟`achievement`表`join`，才能找到该课程最高分对应的学生姓名。即使在有`CTE`支持的情况下，实现起来也很复杂\n    ```\nwith cte as (select v_coursename, max(i_score) as i_score from achievement group by v_coursename)\nselect cte.*, achievement.v_studentname\nfrom cte\n       join achievement on cte.i_score = achievement.i_score and cte.v_coursename = achievement.v_coursename\norder by cte.v_coursename;\n    ```\n    要是没有`CTE`的支持，估计用纯数据库实现，就捉襟见肘了。\n    \n## 使用distinct on的方案\n\n```\nselect distinct on (v_coursename) * \nfrom achievement\norder by v_coursename, i_score desc;\n```\n    \n一句话解决，是不是很开森。\n\n#### 原理回顾\n`DISTINCT ON`是将结果集按指定字段值的去重，具体实现方法是先对结果集按照`DISTINCT ON`指定的字段进行排序，然后筛选出每个字段第一次出现时所在的记录，其余的记录都剔除。\n`ON`修饰符支持多列，运算时会基于多列的总体唯一性进行去重操作。同时查询语句必须要有`ORDER BY`，并且要保证排序字段从左至右的的顺序，应该是跟`DISTINCT ON`命中字段顺序相符合，当然`ORDER BY`可以追加更多的字段。","slug":"PostgreSQL_distinct-on","published":1,"updated":"2018-08-09T01:28:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmk0021y0mz88mp2vfl","content":"<p>想象有这么一张表，存放若干学生不同课程的考试成绩，需求是，找出每门课程中，成绩最好的学生。原始表大概如下：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------------------------+-----------------+----------------+-----------+</span><br><span class=\"line\">|<span class=\"string\"> id                                   </span>|<span class=\"string\"> v_studentname   </span>|<span class=\"string\"> v_coursename   </span>|<span class=\"string\"> i_score   </span>|</span><br><span class=\"line\">|<span class=\"string\">--------------------------------------+-----------------+----------------+-----------</span>|</span><br><span class=\"line\">|<span class=\"string\"> fb9fe43a-6f57-4f92-8678-139167693e72 </span>|<span class=\"string\"> 张三            </span>|<span class=\"string\"> 语文           </span>|<span class=\"string\"> 91        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 0898afd7-4253-496e-9190-36fae14bddf2 </span>|<span class=\"string\"> 张三            </span>|<span class=\"string\"> 数学           </span>|<span class=\"string\"> 77        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2a1f810d-55ee-42cc-ac17-ee970154cecb </span>|<span class=\"string\"> 张三            </span>|<span class=\"string\"> 英语           </span>|<span class=\"string\"> 90        </span>|</span><br><span class=\"line\">|<span class=\"string\"> fa975cd4-af5f-49d0-a89e-6f88665629eb </span>|<span class=\"string\"> 李四            </span>|<span class=\"string\"> 语文           </span>|<span class=\"string\"> 88        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 8833a07c-de8d-4b15-aa34-d9340c2e82c3 </span>|<span class=\"string\"> 李四            </span>|<span class=\"string\"> 数学           </span>|<span class=\"string\"> 87        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 1a9dfbdf-7c44-45d7-8141-590203aa26a9 </span>|<span class=\"string\"> 李四            </span>|<span class=\"string\"> 英语           </span>|<span class=\"string\"> 89        </span>|</span><br><span class=\"line\">|<span class=\"string\"> cd3ec937-0ab9-4745-ad1a-c9f85839eaeb </span>|<span class=\"string\"> 王五            </span>|<span class=\"string\"> 语文           </span>|<span class=\"string\"> 89        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 431b7ccd-3a25-4ff4-9cc2-2e9f111f5c06 </span>|<span class=\"string\"> 王五            </span>|<span class=\"string\"> 数学           </span>|<span class=\"string\"> 91        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 8021e41d-09f5-49fb-a9e2-750d14bbff50 </span>|<span class=\"string\"> 王五            </span>|<span class=\"string\"> 英语           </span>|<span class=\"string\"> 79        </span>|</span><br><span class=\"line\">+--------------------------------------+-----------------+----------------+-----------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"传统方案\"><a href=\"#传统方案\" class=\"headerlink\" title=\"传统方案\"></a>传统方案</h2><p>传统的方法，要找每门课程成绩最好的学生的话，需要借助聚合函数，而且要几步操作：</p>\n<ol>\n<li>找到每门课程的最好成绩 <figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> v_coursename, <span class=\"built_in\">max</span>(i_score)</span><br><span class=\"line\"><span class=\"keyword\">from</span> achievement</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> v_coursename;</span><br></pre></td></tr></table></figure></li>\n<li>再跟<code>achievement</code>表<code>join</code>，才能找到该课程最高分对应的学生姓名。即使在有<code>CTE</code>支持的情况下，实现起来也很复杂 <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> cte <span class=\"keyword\">as</span> (<span class=\"keyword\">select</span> v_coursename, max(i_score) <span class=\"keyword\">as</span> i_score <span class=\"keyword\">from</span> achievement <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> v_coursename)</span><br><span class=\"line\"><span class=\"keyword\">select</span> cte.*, achievement.v_studentname</span><br><span class=\"line\"><span class=\"keyword\">from</span> cte</span><br><span class=\"line\">       <span class=\"keyword\">join</span> achievement <span class=\"keyword\">on</span> cte.i_score = achievement.i_score <span class=\"keyword\">and</span> cte.v_coursename = achievement.v_coursename</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> cte.v_coursename;</span><br></pre></td></tr></table></figure>\n 要是没有<code>CTE</code>的支持，估计用纯数据库实现，就捉襟见肘了。</li>\n</ol>\n<h2 id=\"使用distinct-on的方案\"><a href=\"#使用distinct-on的方案\" class=\"headerlink\" title=\"使用distinct on的方案\"></a>使用distinct on的方案</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"keyword\">on</span> (v_coursename) * </span><br><span class=\"line\"><span class=\"keyword\">from</span> achievement</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> v_coursename, i_score <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<p>一句话解决，是不是很开森。</p>\n<h4 id=\"原理回顾\"><a href=\"#原理回顾\" class=\"headerlink\" title=\"原理回顾\"></a>原理回顾</h4><p><code>DISTINCT ON</code>是将结果集按指定字段值的去重，具体实现方法是先对结果集按照<code>DISTINCT ON</code>指定的字段进行排序，然后筛选出每个字段第一次出现时所在的记录，其余的记录都剔除。<br><code>ON</code>修饰符支持多列，运算时会基于多列的总体唯一性进行去重操作。同时查询语句必须要有<code>ORDER BY</code>，并且要保证排序字段从左至右的的顺序，应该是跟<code>DISTINCT ON</code>命中字段顺序相符合，当然<code>ORDER BY</code>可以追加更多的字段。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>想象有这么一张表，存放若干学生不同课程的考试成绩，需求是，找出每门课程中，成绩最好的学生。原始表大概如下：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------------------------+-----------------+----------------+-----------+</span><br><span class=\"line\">|<span class=\"string\"> id                                   </span>|<span class=\"string\"> v_studentname   </span>|<span class=\"string\"> v_coursename   </span>|<span class=\"string\"> i_score   </span>|</span><br><span class=\"line\">|<span class=\"string\">--------------------------------------+-----------------+----------------+-----------</span>|</span><br><span class=\"line\">|<span class=\"string\"> fb9fe43a-6f57-4f92-8678-139167693e72 </span>|<span class=\"string\"> 张三            </span>|<span class=\"string\"> 语文           </span>|<span class=\"string\"> 91        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 0898afd7-4253-496e-9190-36fae14bddf2 </span>|<span class=\"string\"> 张三            </span>|<span class=\"string\"> 数学           </span>|<span class=\"string\"> 77        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 2a1f810d-55ee-42cc-ac17-ee970154cecb </span>|<span class=\"string\"> 张三            </span>|<span class=\"string\"> 英语           </span>|<span class=\"string\"> 90        </span>|</span><br><span class=\"line\">|<span class=\"string\"> fa975cd4-af5f-49d0-a89e-6f88665629eb </span>|<span class=\"string\"> 李四            </span>|<span class=\"string\"> 语文           </span>|<span class=\"string\"> 88        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 8833a07c-de8d-4b15-aa34-d9340c2e82c3 </span>|<span class=\"string\"> 李四            </span>|<span class=\"string\"> 数学           </span>|<span class=\"string\"> 87        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 1a9dfbdf-7c44-45d7-8141-590203aa26a9 </span>|<span class=\"string\"> 李四            </span>|<span class=\"string\"> 英语           </span>|<span class=\"string\"> 89        </span>|</span><br><span class=\"line\">|<span class=\"string\"> cd3ec937-0ab9-4745-ad1a-c9f85839eaeb </span>|<span class=\"string\"> 王五            </span>|<span class=\"string\"> 语文           </span>|<span class=\"string\"> 89        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 431b7ccd-3a25-4ff4-9cc2-2e9f111f5c06 </span>|<span class=\"string\"> 王五            </span>|<span class=\"string\"> 数学           </span>|<span class=\"string\"> 91        </span>|</span><br><span class=\"line\">|<span class=\"string\"> 8021e41d-09f5-49fb-a9e2-750d14bbff50 </span>|<span class=\"string\"> 王五            </span>|<span class=\"string\"> 英语           </span>|<span class=\"string\"> 79        </span>|</span><br><span class=\"line\">+--------------------------------------+-----------------+----------------+-----------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"传统方案\"><a href=\"#传统方案\" class=\"headerlink\" title=\"传统方案\"></a>传统方案</h2><p>传统的方法，要找每门课程成绩最好的学生的话，需要借助聚合函数，而且要几步操作：</p>\n<ol>\n<li>找到每门课程的最好成绩 <figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> v_coursename, <span class=\"built_in\">max</span>(i_score)</span><br><span class=\"line\"><span class=\"keyword\">from</span> achievement</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> v_coursename;</span><br></pre></td></tr></table></figure></li>\n<li>再跟<code>achievement</code>表<code>join</code>，才能找到该课程最高分对应的学生姓名。即使在有<code>CTE</code>支持的情况下，实现起来也很复杂 <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> cte <span class=\"keyword\">as</span> (<span class=\"keyword\">select</span> v_coursename, max(i_score) <span class=\"keyword\">as</span> i_score <span class=\"keyword\">from</span> achievement <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> v_coursename)</span><br><span class=\"line\"><span class=\"keyword\">select</span> cte.*, achievement.v_studentname</span><br><span class=\"line\"><span class=\"keyword\">from</span> cte</span><br><span class=\"line\">       <span class=\"keyword\">join</span> achievement <span class=\"keyword\">on</span> cte.i_score = achievement.i_score <span class=\"keyword\">and</span> cte.v_coursename = achievement.v_coursename</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> cte.v_coursename;</span><br></pre></td></tr></table></figure>\n 要是没有<code>CTE</code>的支持，估计用纯数据库实现，就捉襟见肘了。</li>\n</ol>\n<h2 id=\"使用distinct-on的方案\"><a href=\"#使用distinct-on的方案\" class=\"headerlink\" title=\"使用distinct on的方案\"></a>使用distinct on的方案</h2><figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> <span class=\"keyword\">on</span> (v_coursename) * </span><br><span class=\"line\"><span class=\"keyword\">from</span> achievement</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> v_coursename, i_score <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure>\n<p>一句话解决，是不是很开森。</p>\n<h4 id=\"原理回顾\"><a href=\"#原理回顾\" class=\"headerlink\" title=\"原理回顾\"></a>原理回顾</h4><p><code>DISTINCT ON</code>是将结果集按指定字段值的去重，具体实现方法是先对结果集按照<code>DISTINCT ON</code>指定的字段进行排序，然后筛选出每个字段第一次出现时所在的记录，其余的记录都剔除。<br><code>ON</code>修饰符支持多列，运算时会基于多列的总体唯一性进行去重操作。同时查询语句必须要有<code>ORDER BY</code>，并且要保证排序字段从左至右的的顺序，应该是跟<code>DISTINCT ON</code>命中字段顺序相符合，当然<code>ORDER BY</code>可以追加更多的字段。</p>\n"},{"title":"PostgreSQL频繁更新数据的大表查询计划可能会搞错的应对方案","date":"2020-11-05T00:57:49.000Z","_content":"当表的数据比较多（大概百万级以上）的时候，对表的使用是重度依赖analyze采集的数据的。尤其是当表处于被频繁的update、insert操作下，之前analyze的数据如果不及时更新，极有可能让查询计划走歪，然后导致一个查询可能要付出10倍以上的时间——我遇到过好几次，每次都是通过手动vaccum解决。\n本来pg是有autovacuum的，这里之所以没有触发，还是因为表比较大，百万行的数据，update个几万行，变更率才百分之几，而调度autovacuum_analyze的默认阈值是百分之十。\n这就比较尴尬了，好在pg支持针对单表做详细的定制。这里给出一个参考SQL：\n```sql\nalter table demo_table SET (fillfactor=85, autovacuum_vacuum_scale_factor=0.02, autovacuum_analyze_scale_factor=0.02);\n```\n这就把阈值定在2%了。\n理论上，这样autovacuum能调度的更频繁一点。查询计划相对来说也要更准确点。","source":"_posts/autovacuum-analyze-scale-factor.md","raw":"---\ntitle: PostgreSQL频繁更新数据的大表查询计划可能会搞错的应对方案\ndate: 2020-11-05 08:57:49\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n当表的数据比较多（大概百万级以上）的时候，对表的使用是重度依赖analyze采集的数据的。尤其是当表处于被频繁的update、insert操作下，之前analyze的数据如果不及时更新，极有可能让查询计划走歪，然后导致一个查询可能要付出10倍以上的时间——我遇到过好几次，每次都是通过手动vaccum解决。\n本来pg是有autovacuum的，这里之所以没有触发，还是因为表比较大，百万行的数据，update个几万行，变更率才百分之几，而调度autovacuum_analyze的默认阈值是百分之十。\n这就比较尴尬了，好在pg支持针对单表做详细的定制。这里给出一个参考SQL：\n```sql\nalter table demo_table SET (fillfactor=85, autovacuum_vacuum_scale_factor=0.02, autovacuum_analyze_scale_factor=0.02);\n```\n这就把阈值定在2%了。\n理论上，这样autovacuum能调度的更频繁一点。查询计划相对来说也要更准确点。","slug":"autovacuum-analyze-scale-factor","published":1,"updated":"2020-11-26T09:11:26.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmk0025y0mz5m705a0r","content":"<p>当表的数据比较多（大概百万级以上）的时候，对表的使用是重度依赖analyze采集的数据的。尤其是当表处于被频繁的update、insert操作下，之前analyze的数据如果不及时更新，极有可能让查询计划走歪，然后导致一个查询可能要付出10倍以上的时间——我遇到过好几次，每次都是通过手动vaccum解决。<br>本来pg是有autovacuum的，这里之所以没有触发，还是因为表比较大，百万行的数据，update个几万行，变更率才百分之几，而调度autovacuum_analyze的默认阈值是百分之十。<br>这就比较尴尬了，好在pg支持针对单表做详细的定制。这里给出一个参考SQL：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> demo_table <span class=\"keyword\">SET</span> (fillfactor<span class=\"operator\">=</span><span class=\"number\">85</span>, autovacuum_vacuum_scale_factor<span class=\"operator\">=</span><span class=\"number\">0.02</span>, autovacuum_analyze_scale_factor<span class=\"operator\">=</span><span class=\"number\">0.02</span>);</span><br></pre></td></tr></table></figure>\n<p>这就把阈值定在2%了。<br>理论上，这样autovacuum能调度的更频繁一点。查询计划相对来说也要更准确点。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>当表的数据比较多（大概百万级以上）的时候，对表的使用是重度依赖analyze采集的数据的。尤其是当表处于被频繁的update、insert操作下，之前analyze的数据如果不及时更新，极有可能让查询计划走歪，然后导致一个查询可能要付出10倍以上的时间——我遇到过好几次，每次都是通过手动vaccum解决。<br>本来pg是有autovacuum的，这里之所以没有触发，还是因为表比较大，百万行的数据，update个几万行，变更率才百分之几，而调度autovacuum_analyze的默认阈值是百分之十。<br>这就比较尴尬了，好在pg支持针对单表做详细的定制。这里给出一个参考SQL：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> demo_table <span class=\"keyword\">SET</span> (fillfactor<span class=\"operator\">=</span><span class=\"number\">85</span>, autovacuum_vacuum_scale_factor<span class=\"operator\">=</span><span class=\"number\">0.02</span>, autovacuum_analyze_scale_factor<span class=\"operator\">=</span><span class=\"number\">0.02</span>);</span><br></pre></td></tr></table></figure>\n<p>这就把阈值定在2%了。<br>理论上，这样autovacuum能调度的更频繁一点。查询计划相对来说也要更准确点。</p>\n"},{"title":"如何在cas登录成功页面显示用户名","date":"2018-07-20T00:14:24.000Z","_content":"[CAS](https://www.apereo.org/projects/cas)这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。\n领导说，想再cas成功后的欢迎页，也就是`casGenericSuccess.jsp`页面，可以显示`欢迎:xxx`的字样。\n不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是[google groups](https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko)上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。\n现在给出我的思路：\n1. 在`deployerConfigContext.xml`文件中，找到`authenticationHandlers`参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。\n2. 然后在那个类里的`authenticate`方法，可以通过追加`HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession`这么一行，获取到`session`，这就嗨皮了。\n3. 可以在`authenticate`方法需要返回`true`的时候，之前增加一行`session.setAttribute(\"username\",balabala);`，这样我们就顺利把username塞到`session`里的\n4. 最后，修改`casGenericSuccess.jsp`，在需要显示用户名的地方，加入`<%=session.getAttribute(\"username\")%>`，就可以实现在登录成功页面显示用户名了\n5. 如果想显示更复杂数据内容，可以留意下`deployerConfigContext.xml`里面的`credentialsToPrincipalResolvers`所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。\n","source":"_posts/cas_show_username_in_login_success_page.md","raw":"---\ntitle: 如何在cas登录成功页面显示用户名\ndate: 2018-07-20 08:14:24\ncategories: 程序人生\ntags:\n    - cas\n---\n[CAS](https://www.apereo.org/projects/cas)这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。\n领导说，想再cas成功后的欢迎页，也就是`casGenericSuccess.jsp`页面，可以显示`欢迎:xxx`的字样。\n不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是[google groups](https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko)上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。\n现在给出我的思路：\n1. 在`deployerConfigContext.xml`文件中，找到`authenticationHandlers`参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。\n2. 然后在那个类里的`authenticate`方法，可以通过追加`HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession`这么一行，获取到`session`，这就嗨皮了。\n3. 可以在`authenticate`方法需要返回`true`的时候，之前增加一行`session.setAttribute(\"username\",balabala);`，这样我们就顺利把username塞到`session`里的\n4. 最后，修改`casGenericSuccess.jsp`，在需要显示用户名的地方，加入`<%=session.getAttribute(\"username\")%>`，就可以实现在登录成功页面显示用户名了\n5. 如果想显示更复杂数据内容，可以留意下`deployerConfigContext.xml`里面的`credentialsToPrincipalResolvers`所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。\n","slug":"cas_show_username_in_login_success_page","published":1,"updated":"2018-07-20T01:12:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmk0027y0mz57b1djds","content":"<p><a href=\"https://www.apereo.org/projects/cas\">CAS</a>这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。<br>领导说，想再cas成功后的欢迎页，也就是<code>casGenericSuccess.jsp</code>页面，可以显示<code>欢迎:xxx</code>的字样。<br>不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是<a href=\"https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko\">google groups</a>上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。<br>现在给出我的思路：</p>\n<ol>\n<li>在<code>deployerConfigContext.xml</code>文件中，找到<code>authenticationHandlers</code>参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。</li>\n<li>然后在那个类里的<code>authenticate</code>方法，可以通过追加<code>HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession</code>这么一行，获取到<code>session</code>，这就嗨皮了。</li>\n<li>可以在<code>authenticate</code>方法需要返回<code>true</code>的时候，之前增加一行<code>session.setAttribute(&quot;username&quot;,balabala);</code>，这样我们就顺利把username塞到<code>session</code>里的</li>\n<li>最后，修改<code>casGenericSuccess.jsp</code>，在需要显示用户名的地方，加入<code>&lt;%=session.getAttribute(&quot;username&quot;)%&gt;</code>，就可以实现在登录成功页面显示用户名了</li>\n<li>如果想显示更复杂数据内容，可以留意下<code>deployerConfigContext.xml</code>里面的<code>credentialsToPrincipalResolvers</code>所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.apereo.org/projects/cas\">CAS</a>这种本来业务场景就很细分，再加上其上古时代存续至今的特质。估计还在用它的公司已经不多了。间接导致，其中文资料比较匮乏。<br>领导说，想再cas成功后的欢迎页，也就是<code>casGenericSuccess.jsp</code>页面，可以显示<code>欢迎:xxx</code>的字样。<br>不得不说，这个需求非常常规。然而不仅cas默认没有实现，甚至翻遍google，都很难找到满意的答案。比较有参考价值的可能就是<a href=\"https://groups.google.com/forum/#!topic/jasig-cas-user/q_pjYXCe7ko\">google groups</a>上的这篇。居然要借助额外的jar包(还是个已停止维护的)才能实现。不得已，只能自己想办法。<br>现在给出我的思路：</p>\n<ol>\n<li>在<code>deployerConfigContext.xml</code>文件中，找到<code>authenticationHandlers</code>参数，其应该对应一个类。十有八九，那个类是你自己实现的，如果不是，可以自己继承一下原有参数配置的类。</li>\n<li>然后在那个类里的<code>authenticate</code>方法，可以通过追加<code>HttpSession session = RequestContextHolder.getRequestAttributes().getSessionMutex().session as HttpSession</code>这么一行，获取到<code>session</code>，这就嗨皮了。</li>\n<li>可以在<code>authenticate</code>方法需要返回<code>true</code>的时候，之前增加一行<code>session.setAttribute(&quot;username&quot;,balabala);</code>，这样我们就顺利把username塞到<code>session</code>里的</li>\n<li>最后，修改<code>casGenericSuccess.jsp</code>，在需要显示用户名的地方，加入<code>&lt;%=session.getAttribute(&quot;username&quot;)%&gt;</code>，就可以实现在登录成功页面显示用户名了</li>\n<li>如果想显示更复杂数据内容，可以留意下<code>deployerConfigContext.xml</code>里面的<code>credentialsToPrincipalResolvers</code>所对应的类。它的时间节点是判定用户登录成功之后，组织用户信息用的。</li>\n</ol>\n"},{"title":"Vert.x项目监测代码变化自动冷重启","date":"2018-08-14T01:15:17.000Z","_content":"传统的Java Web开发一般都会提供热重载的方式，方便开发人员在代码发生变化的时候，无需手动重启应用，就可以刷新到效果。用惯了的人，在用`Vert.x`开发的时候多少会有点不习惯，不过`Vert.x`程序启动速度还是很可观的，所以也勉强能忍。\n后来通读文档的时候，发现有个关于`redeploy`的介绍，似乎能用，又似乎不好用的，直到看到官方的[Vert.x 3.2 Gradle redeploy project](https://github.com/vert-x3/vertx-examples/tree/master/gradle-redeploy)总算豁然开朗了。\n核心代码无非下面几行\n```\n// Vert.x watches for file changes in all subdirectories\n// of src/ but only for files with .java extension\ndef watchForChange = 'src/**/*.java'\n\n// Vert.x will call this task on changes\ndef doOnChange\nif (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n  doOnChange = '.\\\\gradlew classes'\n} else {\n  doOnChange = './gradlew classes'\n}\n\nrun {\n  args = ['run', mainVerticleName, \"--redeploy=$watchForChange\", \"--launcher-class=$mainClassName\", \"--on-redeploy=$doOnChange\"]\n}\n```\n我也尝试了一下，的确可用，但是这个官方示例还是有个地方写的不好，就是关于文件分割符的判断，恰好这个在我之前的帖子里面提到过，见[编写跨操作系统Java代码时动态获取文件分隔符](https://www.kankanzhijian.com/2018/07/26separator_in_java/)\n所以上面的`gradle`代码关于`doOnChange`声明就可以简化成下面的样子了\n```\ndef doOnChange = \".${File.separator}gradlew classes\"\n```\n测试成功\n\n","source":"_posts/Vert-x_redeploy.md","raw":"---\ntitle: Vert.x项目监测代码变化自动冷重启\ndate: 2018-08-14 09:15:17\ncategories: 程序人生\ntags:\n    - Vert.x\n---\n传统的Java Web开发一般都会提供热重载的方式，方便开发人员在代码发生变化的时候，无需手动重启应用，就可以刷新到效果。用惯了的人，在用`Vert.x`开发的时候多少会有点不习惯，不过`Vert.x`程序启动速度还是很可观的，所以也勉强能忍。\n后来通读文档的时候，发现有个关于`redeploy`的介绍，似乎能用，又似乎不好用的，直到看到官方的[Vert.x 3.2 Gradle redeploy project](https://github.com/vert-x3/vertx-examples/tree/master/gradle-redeploy)总算豁然开朗了。\n核心代码无非下面几行\n```\n// Vert.x watches for file changes in all subdirectories\n// of src/ but only for files with .java extension\ndef watchForChange = 'src/**/*.java'\n\n// Vert.x will call this task on changes\ndef doOnChange\nif (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n  doOnChange = '.\\\\gradlew classes'\n} else {\n  doOnChange = './gradlew classes'\n}\n\nrun {\n  args = ['run', mainVerticleName, \"--redeploy=$watchForChange\", \"--launcher-class=$mainClassName\", \"--on-redeploy=$doOnChange\"]\n}\n```\n我也尝试了一下，的确可用，但是这个官方示例还是有个地方写的不好，就是关于文件分割符的判断，恰好这个在我之前的帖子里面提到过，见[编写跨操作系统Java代码时动态获取文件分隔符](https://www.kankanzhijian.com/2018/07/26separator_in_java/)\n所以上面的`gradle`代码关于`doOnChange`声明就可以简化成下面的样子了\n```\ndef doOnChange = \".${File.separator}gradlew classes\"\n```\n测试成功\n\n","slug":"Vert-x_redeploy","published":1,"updated":"2018-09-12T01:05:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmk002ay0mz94cg0b0t","content":"<p>传统的Java Web开发一般都会提供热重载的方式，方便开发人员在代码发生变化的时候，无需手动重启应用，就可以刷新到效果。用惯了的人，在用<code>Vert.x</code>开发的时候多少会有点不习惯，不过<code>Vert.x</code>程序启动速度还是很可观的，所以也勉强能忍。<br>后来通读文档的时候，发现有个关于<code>redeploy</code>的介绍，似乎能用，又似乎不好用的，直到看到官方的<a href=\"https://github.com/vert-x3/vertx-examples/tree/master/gradle-redeploy\">Vert.x 3.2 Gradle redeploy project</a>总算豁然开朗了。<br>核心代码无非下面几行</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vert.x watches for file changes in all subdirectories</span></span><br><span class=\"line\"><span class=\"comment\">// of src/ but only for files with .java extension</span></span><br><span class=\"line\">def watchForChange = <span class=\"string\">&#x27;src/**/*.java&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vert.x will call this task on changes</span></span><br><span class=\"line\">def doOnChange</span><br><span class=\"line\"><span class=\"keyword\">if</span> (System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;windows&quot;</span>)) &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;.\\\\gradlew classes&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;./gradlew classes&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run &#123;</span><br><span class=\"line\">  args = [<span class=\"string\">&#x27;run&#x27;</span>, mainVerticleName, <span class=\"string\">&quot;--redeploy=<span class=\"subst\">$watchForChange</span>&quot;</span>, <span class=\"string\">&quot;--launcher-class=<span class=\"subst\">$mainClassName</span>&quot;</span>, <span class=\"string\">&quot;--on-redeploy=<span class=\"subst\">$doOnChange</span>&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我也尝试了一下，的确可用，但是这个官方示例还是有个地方写的不好，就是关于文件分割符的判断，恰好这个在我之前的帖子里面提到过，见<a href=\"https://www.kankanzhijian.com/2018/07/26separator_in_java/\">编写跨操作系统Java代码时动态获取文件分隔符</a><br>所以上面的<code>gradle</code>代码关于<code>doOnChange</code>声明就可以简化成下面的样子了</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\">def <span class=\"attr\">doOnChange</span> = <span class=\"string\">&quot;.<span class=\"subst\">$&#123;File.separator&#125;</span>gradlew classes&quot;</span></span><br></pre></td></tr></table></figure>\n<p>测试成功</p>\n","site":{"data":{}},"excerpt":"","more":"<p>传统的Java Web开发一般都会提供热重载的方式，方便开发人员在代码发生变化的时候，无需手动重启应用，就可以刷新到效果。用惯了的人，在用<code>Vert.x</code>开发的时候多少会有点不习惯，不过<code>Vert.x</code>程序启动速度还是很可观的，所以也勉强能忍。<br>后来通读文档的时候，发现有个关于<code>redeploy</code>的介绍，似乎能用，又似乎不好用的，直到看到官方的<a href=\"https://github.com/vert-x3/vertx-examples/tree/master/gradle-redeploy\">Vert.x 3.2 Gradle redeploy project</a>总算豁然开朗了。<br>核心代码无非下面几行</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vert.x watches for file changes in all subdirectories</span></span><br><span class=\"line\"><span class=\"comment\">// of src/ but only for files with .java extension</span></span><br><span class=\"line\">def watchForChange = <span class=\"string\">&#x27;src/**/*.java&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Vert.x will call this task on changes</span></span><br><span class=\"line\">def doOnChange</span><br><span class=\"line\"><span class=\"keyword\">if</span> (System.getProperty(<span class=\"string\">&quot;os.name&quot;</span>).toLowerCase().contains(<span class=\"string\">&quot;windows&quot;</span>)) &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;.\\\\gradlew classes&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;./gradlew classes&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run &#123;</span><br><span class=\"line\">  args = [<span class=\"string\">&#x27;run&#x27;</span>, mainVerticleName, <span class=\"string\">&quot;--redeploy=<span class=\"subst\">$watchForChange</span>&quot;</span>, <span class=\"string\">&quot;--launcher-class=<span class=\"subst\">$mainClassName</span>&quot;</span>, <span class=\"string\">&quot;--on-redeploy=<span class=\"subst\">$doOnChange</span>&quot;</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我也尝试了一下，的确可用，但是这个官方示例还是有个地方写的不好，就是关于文件分割符的判断，恰好这个在我之前的帖子里面提到过，见<a href=\"https://www.kankanzhijian.com/2018/07/26separator_in_java/\">编写跨操作系统Java代码时动态获取文件分隔符</a><br>所以上面的<code>gradle</code>代码关于<code>doOnChange</code>声明就可以简化成下面的样子了</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\">def <span class=\"attr\">doOnChange</span> = <span class=\"string\">&quot;.<span class=\"subst\">$&#123;File.separator&#125;</span>gradlew classes&quot;</span></span><br></pre></td></tr></table></figure>\n<p>测试成功</p>\n"},{"title":"使用certbot-auto给nginx加上免费https证书","date":"2018-09-19T05:42:43.000Z","_content":"### 准备python3环境\n```\n# 非唯一方法，仅供参考\nyum install rh-python36\nscl enable rh-python36 bash\n```\n\n### 准备`certbot-auto`工具\n```\nwget https://dl.eff.org/certbot-auto\nchmod +x certbot-auto\n```\n\n### 准备nginx站点\n```\nyum install nginx\n```\n然后去`/etc/nginx/conf.d/`准备自己的站点配置文件，命名为`www.yourdomain.com.conf`\n最简单的配置内容如下：\n```\nserver {\n        listen       80 ;\n        server_name  www.yourdomain.com;\n        root         /usr/share/nginx/html;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n\n### 运行`certbot-auto`\n```\n./certbot-auto --nginx\n```\n之后根据向导一步步操作即可，大概就是输入一下自己的有效邮箱，输入几个`Y`（同意），选一下刚创建的那个`nginx`配置文件就ok了。\n如果出现\n```\nNo supported Python package available to install. Aborting bootstrap!\n```\n可以尝试这个命令\n```\n./certbot-auto --nginx --no-bootstrop\n```\n\n### 定时更新证书\n默认证书的有效期是90天，所以我们需要设置定时任务，隔断时间就`renew`下，通过`crontab -e`配置即可，内容如下\n```\n0 3 * * * /root/letsencrypt/certbot-auto renew --quiet\n```\n`renew`命令会在确定证书快要到期的时候，才真正`renew`证书的。\n\n### 其他技巧：\n* `debug`，访问https://letsdebug.net\n* 查看证书情况（有效期），访问https://crt.sh","source":"_posts/certbot-auto_nginx.md","raw":"---\ntitle: 使用certbot-auto给nginx加上免费https证书\ndate: 2018-09-19 13:42:43\ncategories: 程序人生\ntags:\n    - nginx\n    - https\n---\n### 准备python3环境\n```\n# 非唯一方法，仅供参考\nyum install rh-python36\nscl enable rh-python36 bash\n```\n\n### 准备`certbot-auto`工具\n```\nwget https://dl.eff.org/certbot-auto\nchmod +x certbot-auto\n```\n\n### 准备nginx站点\n```\nyum install nginx\n```\n然后去`/etc/nginx/conf.d/`准备自己的站点配置文件，命名为`www.yourdomain.com.conf`\n最简单的配置内容如下：\n```\nserver {\n        listen       80 ;\n        server_name  www.yourdomain.com;\n        root         /usr/share/nginx/html;\n\n        location / {\n        }\n\n        error_page 404 /404.html;\n            location = /40x.html {\n        }\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n    }\n```\n\n### 运行`certbot-auto`\n```\n./certbot-auto --nginx\n```\n之后根据向导一步步操作即可，大概就是输入一下自己的有效邮箱，输入几个`Y`（同意），选一下刚创建的那个`nginx`配置文件就ok了。\n如果出现\n```\nNo supported Python package available to install. Aborting bootstrap!\n```\n可以尝试这个命令\n```\n./certbot-auto --nginx --no-bootstrop\n```\n\n### 定时更新证书\n默认证书的有效期是90天，所以我们需要设置定时任务，隔断时间就`renew`下，通过`crontab -e`配置即可，内容如下\n```\n0 3 * * * /root/letsencrypt/certbot-auto renew --quiet\n```\n`renew`命令会在确定证书快要到期的时候，才真正`renew`证书的。\n\n### 其他技巧：\n* `debug`，访问https://letsdebug.net\n* 查看证书情况（有效期），访问https://crt.sh","slug":"certbot-auto_nginx","published":1,"updated":"2018-09-19T06:53:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqml002dy0mzam6m6ekp","content":"<h3 id=\"准备python3环境\"><a href=\"#准备python3环境\" class=\"headerlink\" title=\"准备python3环境\"></a>准备python3环境</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非唯一方法，仅供参考</span></span><br><span class=\"line\">yum <span class=\"keyword\">install </span>rh-python36</span><br><span class=\"line\"><span class=\"keyword\">scl </span>enable rh-python36 <span class=\"keyword\">bash</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备certbot-auto工具\"><a href=\"#准备certbot-auto工具\" class=\"headerlink\" title=\"准备certbot-auto工具\"></a>准备<code>certbot-auto</code>工具</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//dl.eff.org/certbot-auto</span></span><br><span class=\"line\">chmod +x certbot-<span class=\"built_in\">auto</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备nginx站点\"><a href=\"#准备nginx站点\" class=\"headerlink\" title=\"准备nginx站点\"></a>准备nginx站点</h3><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> nginx</span><br></pre></td></tr></table></figure>\n<p>然后去<code>/etc/nginx/conf.d/</code>准备自己的站点配置文件，命名为<code>www.yourdomain.com.conf</code><br>最简单的配置内容如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span> ;</span><br><span class=\"line\">        server_name  www.yourdomain.com;</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;</span></span><br><span class=\"line\"><span class=\"title\">        &#125;</span></span><br><span class=\"line\"><span class=\"title\"></span></span><br><span class=\"line\"><span class=\"title\">        error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">            <span class=\"keyword\">location</span> <span class=\"title\">= /40x</span>.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">            <span class=\"keyword\">location</span> <span class=\"title\">= /50x</span>.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行certbot-auto\"><a href=\"#运行certbot-auto\" class=\"headerlink\" title=\"运行certbot-auto\"></a>运行<code>certbot-auto</code></h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./certbot-auto</span> <span class=\"params\">--nginx</span></span><br></pre></td></tr></table></figure>\n<p>之后根据向导一步步操作即可，大概就是输入一下自己的有效邮箱，输入几个<code>Y</code>（同意），选一下刚创建的那个<code>nginx</code>配置文件就ok了。<br>如果出现</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">No supported Python <span class=\"keyword\">package</span> <span class=\"title\">available to install. Aborting bootstrap!</span></span><br></pre></td></tr></table></figure>\n<p>可以尝试这个命令</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./certbot-auto</span> <span class=\"params\">--nginx</span> <span class=\"params\">--no-bootstrop</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定时更新证书\"><a href=\"#定时更新证书\" class=\"headerlink\" title=\"定时更新证书\"></a>定时更新证书</h3><p>默认证书的有效期是90天，所以我们需要设置定时任务，隔断时间就<code>renew</code>下，通过<code>crontab -e</code>配置即可，内容如下</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">3</span> * * * /root/letsencrypt/certbot-<span class=\"keyword\">auto</span> renew --quiet</span><br></pre></td></tr></table></figure>\n<p><code>renew</code>命令会在确定证书快要到期的时候，才真正<code>renew</code>证书的。</p>\n<h3 id=\"其他技巧：\"><a href=\"#其他技巧：\" class=\"headerlink\" title=\"其他技巧：\"></a>其他技巧：</h3><ul>\n<li><code>debug</code>，访问<a href=\"https://letsdebug.net/\">https://letsdebug.net</a></li>\n<li>查看证书情况（有效期），访问<a href=\"https://crt.sh/\">https://crt.sh</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"准备python3环境\"><a href=\"#准备python3环境\" class=\"headerlink\" title=\"准备python3环境\"></a>准备python3环境</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 非唯一方法，仅供参考</span></span><br><span class=\"line\">yum <span class=\"keyword\">install </span>rh-python36</span><br><span class=\"line\"><span class=\"keyword\">scl </span>enable rh-python36 <span class=\"keyword\">bash</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备certbot-auto工具\"><a href=\"#准备certbot-auto工具\" class=\"headerlink\" title=\"准备certbot-auto工具\"></a>准备<code>certbot-auto</code>工具</h3><figure class=\"highlight angelscript\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https:<span class=\"comment\">//dl.eff.org/certbot-auto</span></span><br><span class=\"line\">chmod +x certbot-<span class=\"built_in\">auto</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"准备nginx站点\"><a href=\"#准备nginx站点\" class=\"headerlink\" title=\"准备nginx站点\"></a>准备nginx站点</h3><figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> nginx</span><br></pre></td></tr></table></figure>\n<p>然后去<code>/etc/nginx/conf.d/</code>准备自己的站点配置文件，命名为<code>www.yourdomain.com.conf</code><br>最简单的配置内容如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">        listen       <span class=\"number\">80</span> ;</span><br><span class=\"line\">        server_name  www.yourdomain.com;</span><br><span class=\"line\">        root         /usr/share/nginx/html;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">location</span> <span class=\"title\">/ &#123;</span></span><br><span class=\"line\"><span class=\"title\">        &#125;</span></span><br><span class=\"line\"><span class=\"title\"></span></span><br><span class=\"line\"><span class=\"title\">        error_page</span> <span class=\"number\">404</span> /<span class=\"number\">404</span>.html;</span><br><span class=\"line\">            <span class=\"keyword\">location</span> <span class=\"title\">= /40x</span>.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        error_page <span class=\"number\">500</span> <span class=\"number\">502</span> <span class=\"number\">503</span> <span class=\"number\">504</span> /<span class=\"number\">50</span>x.html;</span><br><span class=\"line\">            <span class=\"keyword\">location</span> <span class=\"title\">= /50x</span>.html &#123;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行certbot-auto\"><a href=\"#运行certbot-auto\" class=\"headerlink\" title=\"运行certbot-auto\"></a>运行<code>certbot-auto</code></h3><figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./certbot-auto</span> <span class=\"params\">--nginx</span></span><br></pre></td></tr></table></figure>\n<p>之后根据向导一步步操作即可，大概就是输入一下自己的有效邮箱，输入几个<code>Y</code>（同意），选一下刚创建的那个<code>nginx</code>配置文件就ok了。<br>如果出现</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\">No supported Python <span class=\"keyword\">package</span> <span class=\"title\">available to install. Aborting bootstrap!</span></span><br></pre></td></tr></table></figure>\n<p>可以尝试这个命令</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">./certbot-auto</span> <span class=\"params\">--nginx</span> <span class=\"params\">--no-bootstrop</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定时更新证书\"><a href=\"#定时更新证书\" class=\"headerlink\" title=\"定时更新证书\"></a>定时更新证书</h3><p>默认证书的有效期是90天，所以我们需要设置定时任务，隔断时间就<code>renew</code>下，通过<code>crontab -e</code>配置即可，内容如下</p>\n<figure class=\"highlight basic\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">0 </span><span class=\"number\">3</span> * * * /root/letsencrypt/certbot-<span class=\"keyword\">auto</span> renew --quiet</span><br></pre></td></tr></table></figure>\n<p><code>renew</code>命令会在确定证书快要到期的时候，才真正<code>renew</code>证书的。</p>\n<h3 id=\"其他技巧：\"><a href=\"#其他技巧：\" class=\"headerlink\" title=\"其他技巧：\"></a>其他技巧：</h3><ul>\n<li><code>debug</code>，访问<a href=\"https://letsdebug.net/\">https://letsdebug.net</a></li>\n<li>查看证书情况（有效期），访问<a href=\"https://crt.sh/\">https://crt.sh</a></li>\n</ul>\n"},{"title":"深度学习入门 矩阵的乘法","date":"2018-09-18T09:47:29.000Z","_content":"刚开始看`《深度学习入门 基于Python的理论与实现》`，非常好的一本书。\n复习一个重要的知识点，矩阵的乘法：![](/media/IMG_6764.jpg)\n\n","source":"_posts/deep_learning_start_matrix_dot.md","raw":"---\ntitle: 深度学习入门 矩阵的乘法\ndate: 2018-09-18 17:47:29\ncategories: 程序人生\ntags:\n    - 深度学习\n---\n刚开始看`《深度学习入门 基于Python的理论与实现》`，非常好的一本书。\n复习一个重要的知识点，矩阵的乘法：![](/media/IMG_6764.jpg)\n\n","slug":"deep_learning_start_matrix_dot","published":1,"updated":"2018-09-18T09:52:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqml002gy0mzbb3jeyly","content":"<p>刚开始看<code>《深度学习入门 基于Python的理论与实现》</code>，非常好的一本书。<br>复习一个重要的知识点，矩阵的乘法：<img src=\"/media/IMG_6764.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚开始看<code>《深度学习入门 基于Python的理论与实现》</code>，非常好的一本书。<br>复习一个重要的知识点，矩阵的乘法：<img src=\"/media/IMG_6764.jpg\"></p>\n"},{"title":"免百度网盘客户端下载大文件并突破非会员限速","date":"2018-09-06T00:59:30.000Z","_content":"在网盘市场洗过几次牌后的今天，百度网盘可以说是如今的头牌了。网上充斥的各种资源，几乎都在用百度网盘分享。但是百度这家公司怎么说呢，就是骨子里，有一点`X`，*你懂的*。遇到稍微大一点的文件，不让从浏览器直接下载不说，限速起来更是毫无人性。\n不过正所谓道高一尺，魔高一丈。在互联网的江湖，一切皆有可能。今天我们就来介绍一种借助浏览器插件突破百度网盘限制的一种方法。\n### 1. 安装浏览器插件`tampermonkey`\n就和安装其他浏览器插件一样，没什么难度，可以去它的官网查看http://tampermonkey.net 。看看官网是怎么介绍它的\n```\nTampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera Next, 和 Firefox。 \n```\n\n### 2. 安装针对百度网盘的拓展脚本`EX-百度云盘`\n项目地址：[EX-百度云盘](https://greasyfork.org/zh-CN/scripts/26638-ex-百度云盘)，访问这个项目页面时，可以看到大大的`安装此脚本`按钮，大胆点击它就好了。\n\n### 3. 访问任意一个百度网盘分享页面就能够发现惊喜了\n![](/media/15361965426250.jpg)\n此时通过点击`普通下载`就能够突破百度网盘网页版对于大文件不允许下载的限制了\n\n### 4. 突破速度限制\n接上图，通过`复制链接`按钮，我们就能获取该资源的原始下载链接，此时我们通过任意多线程下载工具（包括迅雷，但不怎么好用就是了），就能获得几乎峰值的下载速度了。\n![](/media/15361968542946.jpg)\n截图中，我使用的工具是`Aria2GUI`，这是一款针对`mac OS`的下载工具（[点此下载](https://github.com/yangshun1029/aria2gui/releases)）。如果你是`windows`用户，可以试试`IDM`或者`flashget`，如果动手能力强可以搜索`aria2 windows`关键词，打开新世界的大门。\n","source":"_posts/break_through_baiduwangpan.md","raw":"---\ntitle: 免百度网盘客户端下载大文件并突破非会员限速\ndate: 2018-09-06 08:59:30\ncategories: 实用技巧\n---\n在网盘市场洗过几次牌后的今天，百度网盘可以说是如今的头牌了。网上充斥的各种资源，几乎都在用百度网盘分享。但是百度这家公司怎么说呢，就是骨子里，有一点`X`，*你懂的*。遇到稍微大一点的文件，不让从浏览器直接下载不说，限速起来更是毫无人性。\n不过正所谓道高一尺，魔高一丈。在互联网的江湖，一切皆有可能。今天我们就来介绍一种借助浏览器插件突破百度网盘限制的一种方法。\n### 1. 安装浏览器插件`tampermonkey`\n就和安装其他浏览器插件一样，没什么难度，可以去它的官网查看http://tampermonkey.net 。看看官网是怎么介绍它的\n```\nTampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera Next, 和 Firefox。 \n```\n\n### 2. 安装针对百度网盘的拓展脚本`EX-百度云盘`\n项目地址：[EX-百度云盘](https://greasyfork.org/zh-CN/scripts/26638-ex-百度云盘)，访问这个项目页面时，可以看到大大的`安装此脚本`按钮，大胆点击它就好了。\n\n### 3. 访问任意一个百度网盘分享页面就能够发现惊喜了\n![](/media/15361965426250.jpg)\n此时通过点击`普通下载`就能够突破百度网盘网页版对于大文件不允许下载的限制了\n\n### 4. 突破速度限制\n接上图，通过`复制链接`按钮，我们就能获取该资源的原始下载链接，此时我们通过任意多线程下载工具（包括迅雷，但不怎么好用就是了），就能获得几乎峰值的下载速度了。\n![](/media/15361968542946.jpg)\n截图中，我使用的工具是`Aria2GUI`，这是一款针对`mac OS`的下载工具（[点此下载](https://github.com/yangshun1029/aria2gui/releases)）。如果你是`windows`用户，可以试试`IDM`或者`flashget`，如果动手能力强可以搜索`aria2 windows`关键词，打开新世界的大门。\n","slug":"break_through_baiduwangpan","published":1,"updated":"2018-09-06T01:55:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqml002jy0mza4zr9ge0","content":"<p>在网盘市场洗过几次牌后的今天，百度网盘可以说是如今的头牌了。网上充斥的各种资源，几乎都在用百度网盘分享。但是百度这家公司怎么说呢，就是骨子里，有一点<code>X</code>，<em>你懂的</em>。遇到稍微大一点的文件，不让从浏览器直接下载不说，限速起来更是毫无人性。<br>不过正所谓道高一尺，魔高一丈。在互联网的江湖，一切皆有可能。今天我们就来介绍一种借助浏览器插件突破百度网盘限制的一种方法。</p>\n<h3 id=\"1-安装浏览器插件tampermonkey\"><a href=\"#1-安装浏览器插件tampermonkey\" class=\"headerlink\" title=\"1. 安装浏览器插件tampermonkey\"></a>1. 安装浏览器插件<code>tampermonkey</code></h3><p>就和安装其他浏览器插件一样，没什么难度，可以去它的官网查看<a href=\"http://tampermonkey.net/\">http://tampermonkey.net</a> 。看看官网是怎么介绍它的</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera <span class=\"keyword\">Next</span>, 和 Firefox。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装针对百度网盘的拓展脚本EX-百度云盘\"><a href=\"#2-安装针对百度网盘的拓展脚本EX-百度云盘\" class=\"headerlink\" title=\"2. 安装针对百度网盘的拓展脚本EX-百度云盘\"></a>2. 安装针对百度网盘的拓展脚本<code>EX-百度云盘</code></h3><p>项目地址：<a href=\"https://greasyfork.org/zh-CN/scripts/26638-ex-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98\">EX-百度云盘</a>，访问这个项目页面时，可以看到大大的<code>安装此脚本</code>按钮，大胆点击它就好了。</p>\n<h3 id=\"3-访问任意一个百度网盘分享页面就能够发现惊喜了\"><a href=\"#3-访问任意一个百度网盘分享页面就能够发现惊喜了\" class=\"headerlink\" title=\"3. 访问任意一个百度网盘分享页面就能够发现惊喜了\"></a>3. 访问任意一个百度网盘分享页面就能够发现惊喜了</h3><p><img src=\"/media/15361965426250.jpg\"><br>此时通过点击<code>普通下载</code>就能够突破百度网盘网页版对于大文件不允许下载的限制了</p>\n<h3 id=\"4-突破速度限制\"><a href=\"#4-突破速度限制\" class=\"headerlink\" title=\"4. 突破速度限制\"></a>4. 突破速度限制</h3><p>接上图，通过<code>复制链接</code>按钮，我们就能获取该资源的原始下载链接，此时我们通过任意多线程下载工具（包括迅雷，但不怎么好用就是了），就能获得几乎峰值的下载速度了。<br><img src=\"/media/15361968542946.jpg\"><br>截图中，我使用的工具是<code>Aria2GUI</code>，这是一款针对<code>mac OS</code>的下载工具（<a href=\"https://github.com/yangshun1029/aria2gui/releases\">点此下载</a>）。如果你是<code>windows</code>用户，可以试试<code>IDM</code>或者<code>flashget</code>，如果动手能力强可以搜索<code>aria2 windows</code>关键词，打开新世界的大门。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在网盘市场洗过几次牌后的今天，百度网盘可以说是如今的头牌了。网上充斥的各种资源，几乎都在用百度网盘分享。但是百度这家公司怎么说呢，就是骨子里，有一点<code>X</code>，<em>你懂的</em>。遇到稍微大一点的文件，不让从浏览器直接下载不说，限速起来更是毫无人性。<br>不过正所谓道高一尺，魔高一丈。在互联网的江湖，一切皆有可能。今天我们就来介绍一种借助浏览器插件突破百度网盘限制的一种方法。</p>\n<h3 id=\"1-安装浏览器插件tampermonkey\"><a href=\"#1-安装浏览器插件tampermonkey\" class=\"headerlink\" title=\"1. 安装浏览器插件tampermonkey\"></a>1. 安装浏览器插件<code>tampermonkey</code></h3><p>就和安装其他浏览器插件一样，没什么难度，可以去它的官网查看<a href=\"http://tampermonkey.net/\">http://tampermonkey.net</a> 。看看官网是怎么介绍它的</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">Tampermonkey 是一款免费的浏览器扩展和最为流行的用户脚本管理器，它适用于 Chrome, Microsoft Edge, Safari, Opera <span class=\"keyword\">Next</span>, 和 Firefox。 </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-安装针对百度网盘的拓展脚本EX-百度云盘\"><a href=\"#2-安装针对百度网盘的拓展脚本EX-百度云盘\" class=\"headerlink\" title=\"2. 安装针对百度网盘的拓展脚本EX-百度云盘\"></a>2. 安装针对百度网盘的拓展脚本<code>EX-百度云盘</code></h3><p>项目地址：<a href=\"https://greasyfork.org/zh-CN/scripts/26638-ex-%E7%99%BE%E5%BA%A6%E4%BA%91%E7%9B%98\">EX-百度云盘</a>，访问这个项目页面时，可以看到大大的<code>安装此脚本</code>按钮，大胆点击它就好了。</p>\n<h3 id=\"3-访问任意一个百度网盘分享页面就能够发现惊喜了\"><a href=\"#3-访问任意一个百度网盘分享页面就能够发现惊喜了\" class=\"headerlink\" title=\"3. 访问任意一个百度网盘分享页面就能够发现惊喜了\"></a>3. 访问任意一个百度网盘分享页面就能够发现惊喜了</h3><p><img src=\"/media/15361965426250.jpg\"><br>此时通过点击<code>普通下载</code>就能够突破百度网盘网页版对于大文件不允许下载的限制了</p>\n<h3 id=\"4-突破速度限制\"><a href=\"#4-突破速度限制\" class=\"headerlink\" title=\"4. 突破速度限制\"></a>4. 突破速度限制</h3><p>接上图，通过<code>复制链接</code>按钮，我们就能获取该资源的原始下载链接，此时我们通过任意多线程下载工具（包括迅雷，但不怎么好用就是了），就能获得几乎峰值的下载速度了。<br><img src=\"/media/15361968542946.jpg\"><br>截图中，我使用的工具是<code>Aria2GUI</code>，这是一款针对<code>mac OS</code>的下载工具（<a href=\"https://github.com/yangshun1029/aria2gui/releases\">点此下载</a>）。如果你是<code>windows</code>用户，可以试试<code>IDM</code>或者<code>flashget</code>，如果动手能力强可以搜索<code>aria2 windows</code>关键词，打开新世界的大门。</p>\n"},{"title":"免开发环境在GitHub站点上快速给开源项目贡献代码","date":"2018-08-18T06:13:27.000Z","_content":"给开源项目贡献代码应该算是进阶程序员的一条必经之路。今天我就简单介绍一下，如何在不clone代码，不使用本地开发环境的情况下，给GitHub上的开源项目贡献代码。\n还没有GitHub账号的小伙伴，就抓紧注册个吧，其他就没有任何必要条件了。\n\n### 第一步，发现问题\n这个我可教不了，只能介绍一下我自己的经验，就是多看，多想。比如我今天举例的就是`JVM`下知名项目`Vert.x`，官方维护的[vertx-examples](https://github.com/vert-x3/vertx-examples)，我发现他在介绍`gradle-redeploy`的时候，其中`build.gradle`有一段写得就不够严谨，他是这么写的：\n\n```\n// Vert.x will call this task on changes\ndef doOnChange\nif (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n  doOnChange = '.\\\\gradlew classes'\n} else {\n  doOnChange = './gradlew classes'\n}\n```\n看过我之前博客的小伙伴应该知道，操作系统的文件分割符，`Java`中是提供静态方法等多种方式来获取的，不需要通过自己手动判断操作系统的名字来自己实现。所以我决定把这段代码优化一下。也就是这篇博客的起因。\n\n### 第二步，`Fork`代码\n点这里即可：\n![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_23.png)\n`Fork`成功之后，会自动进入到自己命名空间下的项目\n![](/media/15345735455740.jpg)\n\n### 第三步，创建分支\n`GitHub`上的`Pull Request`都是基于分支的，也就是说想要贡献代码，要先创建一个分支，在上面承载你的代码变更。其实做起来也相当简单，如图：![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_28.png)\n\n### 第四步，修改代码\n之后就会进入到自己新建的分支，找到要修改的代码后，点编辑按钮，如图![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_32.png)\n\n把我之前说的代码改成：\n\n```\ndef doOnChange = \".${File.separator}gradlew classes\"\n```\n一行搞定，是不是简单多了。\n编辑完代码后，在屏幕最下方，提交代码，注意要写一个理由充分的提交注释，证明你改变代码的必要性\n![](/media/15345741245811.jpg)\n\n### 第五步，发起`Pull Request`\n把修改`commit`之后，回到自己的项目首页，就可以看到一句提示，问你要不要把刚修改的那个分支去跟原始项目比较，并且发起`pull request`，如图![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_39.png)\n\n点击这个按钮后，进入最后的`Open a pull request`界面，再次要把提交说明写到位，就可以点`Create pull request`按钮正式发起贡献代码请求了。\n\n### 其他\n1. 基本开源项目都有自动化的代码审查，比如单元测试、格式规范检查之类的，发起`PR`之后也要留意观看，万一发现自己代码有问题，还可以继续更改\n2. 之后还回到自己分支，产生的更改，就不用重新发起`PR`了，只要`commit`之后，之前的`PR`可以直接看到\n3. 一旦`PR`成功，就可以在原始项目的`contributors`中找到自己的账户了。希望你到时候可以榜上有名；）","source":"_posts/github-pull-request.md","raw":"---\ntitle: 免开发环境在GitHub站点上快速给开源项目贡献代码\ndate: 2018-08-18 14:13:27\ncategories: 程序人生\ntags:\n    - GitHub\n---\n给开源项目贡献代码应该算是进阶程序员的一条必经之路。今天我就简单介绍一下，如何在不clone代码，不使用本地开发环境的情况下，给GitHub上的开源项目贡献代码。\n还没有GitHub账号的小伙伴，就抓紧注册个吧，其他就没有任何必要条件了。\n\n### 第一步，发现问题\n这个我可教不了，只能介绍一下我自己的经验，就是多看，多想。比如我今天举例的就是`JVM`下知名项目`Vert.x`，官方维护的[vertx-examples](https://github.com/vert-x3/vertx-examples)，我发现他在介绍`gradle-redeploy`的时候，其中`build.gradle`有一段写得就不够严谨，他是这么写的：\n\n```\n// Vert.x will call this task on changes\ndef doOnChange\nif (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n  doOnChange = '.\\\\gradlew classes'\n} else {\n  doOnChange = './gradlew classes'\n}\n```\n看过我之前博客的小伙伴应该知道，操作系统的文件分割符，`Java`中是提供静态方法等多种方式来获取的，不需要通过自己手动判断操作系统的名字来自己实现。所以我决定把这段代码优化一下。也就是这篇博客的起因。\n\n### 第二步，`Fork`代码\n点这里即可：\n![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_23.png)\n`Fork`成功之后，会自动进入到自己命名空间下的项目\n![](/media/15345735455740.jpg)\n\n### 第三步，创建分支\n`GitHub`上的`Pull Request`都是基于分支的，也就是说想要贡献代码，要先创建一个分支，在上面承载你的代码变更。其实做起来也相当简单，如图：![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_28.png)\n\n### 第四步，修改代码\n之后就会进入到自己新建的分支，找到要修改的代码后，点编辑按钮，如图![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_32.png)\n\n把我之前说的代码改成：\n\n```\ndef doOnChange = \".${File.separator}gradlew classes\"\n```\n一行搞定，是不是简单多了。\n编辑完代码后，在屏幕最下方，提交代码，注意要写一个理由充分的提交注释，证明你改变代码的必要性\n![](/media/15345741245811.jpg)\n\n### 第五步，发起`Pull Request`\n把修改`commit`之后，回到自己的项目首页，就可以看到一句提示，问你要不要把刚修改的那个分支去跟原始项目比较，并且发起`pull request`，如图![](/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_39.png)\n\n点击这个按钮后，进入最后的`Open a pull request`界面，再次要把提交说明写到位，就可以点`Create pull request`按钮正式发起贡献代码请求了。\n\n### 其他\n1. 基本开源项目都有自动化的代码审查，比如单元测试、格式规范检查之类的，发起`PR`之后也要留意观看，万一发现自己代码有问题，还可以继续更改\n2. 之后还回到自己分支，产生的更改，就不用重新发起`PR`了，只要`commit`之后，之前的`PR`可以直接看到\n3. 一旦`PR`成功，就可以在原始项目的`contributors`中找到自己的账户了。希望你到时候可以榜上有名；）","slug":"github-pull-request","published":1,"updated":"2018-08-18T06:59:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmm002my0mzevvlgawk","content":"<p>给开源项目贡献代码应该算是进阶程序员的一条必经之路。今天我就简单介绍一下，如何在不clone代码，不使用本地开发环境的情况下，给GitHub上的开源项目贡献代码。<br>还没有GitHub账号的小伙伴，就抓紧注册个吧，其他就没有任何必要条件了。</p>\n<h3 id=\"第一步，发现问题\"><a href=\"#第一步，发现问题\" class=\"headerlink\" title=\"第一步，发现问题\"></a>第一步，发现问题</h3><p>这个我可教不了，只能介绍一下我自己的经验，就是多看，多想。比如我今天举例的就是<code>JVM</code>下知名项目<code>Vert.x</code>，官方维护的<a href=\"https://github.com/vert-x3/vertx-examples\">vertx-examples</a>，我发现他在介绍<code>gradle-redeploy</code>的时候，其中<code>build.gradle</code>有一段写得就不够严谨，他是这么写的：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vert.x will call this task on changes</span></span><br><span class=\"line\"><span class=\"function\">def doOnChange</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span> (<span class=\"params\">System.getProperty(<span class=\"string\">&quot;os.name&quot;</span></span>).<span class=\"title\">toLowerCase</span>().<span class=\"title\">contains</span>(<span class=\"params\"><span class=\"string\">&quot;windows&quot;</span></span>))</span> &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;.\\\\gradlew classes&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;./gradlew classes&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看过我之前博客的小伙伴应该知道，操作系统的文件分割符，<code>Java</code>中是提供静态方法等多种方式来获取的，不需要通过自己手动判断操作系统的名字来自己实现。所以我决定把这段代码优化一下。也就是这篇博客的起因。</p>\n<h3 id=\"第二步，Fork代码\"><a href=\"#第二步，Fork代码\" class=\"headerlink\" title=\"第二步，Fork代码\"></a>第二步，<code>Fork</code>代码</h3><p>点这里即可：<br><img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_23.png\"><br><code>Fork</code>成功之后，会自动进入到自己命名空间下的项目<br><img src=\"/media/15345735455740.jpg\"></p>\n<h3 id=\"第三步，创建分支\"><a href=\"#第三步，创建分支\" class=\"headerlink\" title=\"第三步，创建分支\"></a>第三步，创建分支</h3><p><code>GitHub</code>上的<code>Pull Request</code>都是基于分支的，也就是说想要贡献代码，要先创建一个分支，在上面承载你的代码变更。其实做起来也相当简单，如图：<img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_28.png\"></p>\n<h3 id=\"第四步，修改代码\"><a href=\"#第四步，修改代码\" class=\"headerlink\" title=\"第四步，修改代码\"></a>第四步，修改代码</h3><p>之后就会进入到自己新建的分支，找到要修改的代码后，点编辑按钮，如图<img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_32.png\"></p>\n<p>把我之前说的代码改成：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\">def <span class=\"attr\">doOnChange</span> = <span class=\"string\">&quot;.<span class=\"subst\">$&#123;File.separator&#125;</span>gradlew classes&quot;</span></span><br></pre></td></tr></table></figure>\n<p>一行搞定，是不是简单多了。<br>编辑完代码后，在屏幕最下方，提交代码，注意要写一个理由充分的提交注释，证明你改变代码的必要性<br><img src=\"/media/15345741245811.jpg\"></p>\n<h3 id=\"第五步，发起Pull-Request\"><a href=\"#第五步，发起Pull-Request\" class=\"headerlink\" title=\"第五步，发起Pull Request\"></a>第五步，发起<code>Pull Request</code></h3><p>把修改<code>commit</code>之后，回到自己的项目首页，就可以看到一句提示，问你要不要把刚修改的那个分支去跟原始项目比较，并且发起<code>pull request</code>，如图<img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_39.png\"></p>\n<p>点击这个按钮后，进入最后的<code>Open a pull request</code>界面，再次要把提交说明写到位，就可以点<code>Create pull request</code>按钮正式发起贡献代码请求了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>基本开源项目都有自动化的代码审查，比如单元测试、格式规范检查之类的，发起<code>PR</code>之后也要留意观看，万一发现自己代码有问题，还可以继续更改</li>\n<li>之后还回到自己分支，产生的更改，就不用重新发起<code>PR</code>了，只要<code>commit</code>之后，之前的<code>PR</code>可以直接看到</li>\n<li>一旦<code>PR</code>成功，就可以在原始项目的<code>contributors</code>中找到自己的账户了。希望你到时候可以榜上有名；）</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>给开源项目贡献代码应该算是进阶程序员的一条必经之路。今天我就简单介绍一下，如何在不clone代码，不使用本地开发环境的情况下，给GitHub上的开源项目贡献代码。<br>还没有GitHub账号的小伙伴，就抓紧注册个吧，其他就没有任何必要条件了。</p>\n<h3 id=\"第一步，发现问题\"><a href=\"#第一步，发现问题\" class=\"headerlink\" title=\"第一步，发现问题\"></a>第一步，发现问题</h3><p>这个我可教不了，只能介绍一下我自己的经验，就是多看，多想。比如我今天举例的就是<code>JVM</code>下知名项目<code>Vert.x</code>，官方维护的<a href=\"https://github.com/vert-x3/vertx-examples\">vertx-examples</a>，我发现他在介绍<code>gradle-redeploy</code>的时候，其中<code>build.gradle</code>有一段写得就不够严谨，他是这么写的：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Vert.x will call this task on changes</span></span><br><span class=\"line\"><span class=\"function\">def doOnChange</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span> (<span class=\"params\">System.getProperty(<span class=\"string\">&quot;os.name&quot;</span></span>).<span class=\"title\">toLowerCase</span>().<span class=\"title\">contains</span>(<span class=\"params\"><span class=\"string\">&quot;windows&quot;</span></span>))</span> &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;.\\\\gradlew classes&#x27;</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  doOnChange = <span class=\"string\">&#x27;./gradlew classes&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>看过我之前博客的小伙伴应该知道，操作系统的文件分割符，<code>Java</code>中是提供静态方法等多种方式来获取的，不需要通过自己手动判断操作系统的名字来自己实现。所以我决定把这段代码优化一下。也就是这篇博客的起因。</p>\n<h3 id=\"第二步，Fork代码\"><a href=\"#第二步，Fork代码\" class=\"headerlink\" title=\"第二步，Fork代码\"></a>第二步，<code>Fork</code>代码</h3><p>点这里即可：<br><img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_23.png\"><br><code>Fork</code>成功之后，会自动进入到自己命名空间下的项目<br><img src=\"/media/15345735455740.jpg\"></p>\n<h3 id=\"第三步，创建分支\"><a href=\"#第三步，创建分支\" class=\"headerlink\" title=\"第三步，创建分支\"></a>第三步，创建分支</h3><p><code>GitHub</code>上的<code>Pull Request</code>都是基于分支的，也就是说想要贡献代码，要先创建一个分支，在上面承载你的代码变更。其实做起来也相当简单，如图：<img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_28.png\"></p>\n<h3 id=\"第四步，修改代码\"><a href=\"#第四步，修改代码\" class=\"headerlink\" title=\"第四步，修改代码\"></a>第四步，修改代码</h3><p>之后就会进入到自己新建的分支，找到要修改的代码后，点编辑按钮，如图<img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_32.png\"></p>\n<p>把我之前说的代码改成：</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"code\"><pre><span class=\"line\">def <span class=\"attr\">doOnChange</span> = <span class=\"string\">&quot;.<span class=\"subst\">$&#123;File.separator&#125;</span>gradlew classes&quot;</span></span><br></pre></td></tr></table></figure>\n<p>一行搞定，是不是简单多了。<br>编辑完代码后，在屏幕最下方，提交代码，注意要写一个理由充分的提交注释，证明你改变代码的必要性<br><img src=\"/media/15345741245811.jpg\"></p>\n<h3 id=\"第五步，发起Pull-Request\"><a href=\"#第五步，发起Pull-Request\" class=\"headerlink\" title=\"第五步，发起Pull Request\"></a>第五步，发起<code>Pull Request</code></h3><p>把修改<code>commit</code>之后，回到自己的项目首页，就可以看到一句提示，问你要不要把刚修改的那个分支去跟原始项目比较，并且发起<code>pull request</code>，如图<img src=\"/media/%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%872018_8_18_14_39.png\"></p>\n<p>点击这个按钮后，进入最后的<code>Open a pull request</code>界面，再次要把提交说明写到位，就可以点<code>Create pull request</code>按钮正式发起贡献代码请求了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>基本开源项目都有自动化的代码审查，比如单元测试、格式规范检查之类的，发起<code>PR</code>之后也要留意观看，万一发现自己代码有问题，还可以继续更改</li>\n<li>之后还回到自己分支，产生的更改，就不用重新发起<code>PR</code>了，只要<code>commit</code>之后，之前的<code>PR</code>可以直接看到</li>\n<li>一旦<code>PR</code>成功，就可以在原始项目的<code>contributors</code>中找到自己的账户了。希望你到时候可以榜上有名；）</li>\n</ol>\n"},{"title":"记一个因为JDBC及PostgreSQL过于优秀而导致的坑","date":"2018-08-22T23:16:21.000Z","_content":"假设存在这么一张表，记录全国各地大学的名称，以及所处的行政区划\n```sql\nCREATE TABLE 大学信息表\n(\n    id varchar DEFAULT uuid_generate_v4() PRIMARY KEY,\n    v_name varchar,\n    v_所处行政区划代码 varchar\n);\n```\n其中，行政区划是国家标准的，也就是你身份证开头的6位，能够精确到区、县的。两位一个级别，前六位，可以笼统的概括成，省及、市级、县级，当然还有直辖市、特别行政区什么的，先不必深究，暂且简化这个逻辑就好了。\n现在问题来了，如果想统计各省份大学的数量，是不是该用这条`SQL`\n```sql\nselect left(v_所处行政区划代码, 2), count(*)\nfrom 大学信息表\ngroup by left(v_所处行政区划代码, 2);\n```\n对需求敏感的小伙伴肯定看出来了，上面的`2`在设计接口的时候应该设计成参数，万一要统计各城市的大学数量，直接传`4`不就好了。\n所以在`Java`中，我们大约会写这么一段代码\n```sql\nPreparedStatement pstmt = conn.prepareStatement(\"\"\"\nselect left(v_所处行政区划代码, ?), count(*) as num\nfrom 大学信息表\ngroup by left(v_所处行政区划代码, ?);\n\"\"\");\n\npstmt.setInt(1, 2);\npstmt.setInt(2, 2);\n```\n就是用两处`?`占位，然后传入相同的参数。**可惜事与愿违，这段`SQL`一定是报错的**，会有提示\n```sql\ncolumn \"大学信息表.v_所处行政区划代码\" must appear in the GROUP BY clause or be used in an aggregate function\n```\n简单的说，数据库不认为`select`中的`left(v_所处行政区划代码, ?)`跟`group by`中的`left(v_所处行政区划代码, ?)`是一个东西，所以认为我们在查询了一个没有`group by`也没有聚合函数的数据，属于`SQL`语法错误。\n下面尝试分析原因：\n1. 原始`SQL`在`PostgreSQL`中独立执行，完全没问题，所以肯定不是`PostgreSQL`的问题\n2. 用`Python`（`psycopg2`）实现了同样的逻辑，然而没有报错，所以还得从`JDBC`+`PostgreSQL`上找原因\n3. 去数据库服务器看日志，发现问题，当`JDBC`请求的时候，后台日志是\n```sql\nSTATEMENT:\n\tselect left(v_所处行政区划代码, $1), count(*) as num\n\tfrom 大学信息表\n\tgroup by left(v_所处行政区划代码, $2)\nDETAIL:  parameters: $1 = '2', $2 = '2'\n```\n    而当`Python`请求时，后台日志是\n```sql\nselect left(v_所处行政区划代码, 2), count(*) as num\n\t\tfrom 大学信息表\n\t\tgroup by left(v_所处行政区划代码, 2)\n```\n    是不是有一种见了鬼的感觉，\n\n### 结论\n在使用`JDBC`操作`PostgreSQL`时，`JAVA`中的`prepareStatement`会精准换算成`PostgreSQL`中的[PREPARE](http://www.postgres.cn/docs/10/sql-prepare.html)，而在`PREPARE`的时候，参数还没给出，所以`PostgreSQL`会认为`select`的`left(v_所处行政区划代码, $1)`并未参与`group by`，因而`PREPARE`报错，导致最终`SQL`执行失败。\n而在`psycopg2`+`PostgreSQL`的环境中，并没有像`JDBC`那样充分利用`PostgreSQL`的`PREPARE`特性，而是在程序侧就换算好了`SQL`语句，所以反而不会报错。\n*显然，是`JDBC`的设计更细致，但是却给自己挖了个坑*","source":"_posts/defect_jdbc_postgresql.md","raw":"---\ntitle: 记一个因为JDBC及PostgreSQL过于优秀而导致的坑\ndate: 2018-08-23 07:16:21\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n假设存在这么一张表，记录全国各地大学的名称，以及所处的行政区划\n```sql\nCREATE TABLE 大学信息表\n(\n    id varchar DEFAULT uuid_generate_v4() PRIMARY KEY,\n    v_name varchar,\n    v_所处行政区划代码 varchar\n);\n```\n其中，行政区划是国家标准的，也就是你身份证开头的6位，能够精确到区、县的。两位一个级别，前六位，可以笼统的概括成，省及、市级、县级，当然还有直辖市、特别行政区什么的，先不必深究，暂且简化这个逻辑就好了。\n现在问题来了，如果想统计各省份大学的数量，是不是该用这条`SQL`\n```sql\nselect left(v_所处行政区划代码, 2), count(*)\nfrom 大学信息表\ngroup by left(v_所处行政区划代码, 2);\n```\n对需求敏感的小伙伴肯定看出来了，上面的`2`在设计接口的时候应该设计成参数，万一要统计各城市的大学数量，直接传`4`不就好了。\n所以在`Java`中，我们大约会写这么一段代码\n```sql\nPreparedStatement pstmt = conn.prepareStatement(\"\"\"\nselect left(v_所处行政区划代码, ?), count(*) as num\nfrom 大学信息表\ngroup by left(v_所处行政区划代码, ?);\n\"\"\");\n\npstmt.setInt(1, 2);\npstmt.setInt(2, 2);\n```\n就是用两处`?`占位，然后传入相同的参数。**可惜事与愿违，这段`SQL`一定是报错的**，会有提示\n```sql\ncolumn \"大学信息表.v_所处行政区划代码\" must appear in the GROUP BY clause or be used in an aggregate function\n```\n简单的说，数据库不认为`select`中的`left(v_所处行政区划代码, ?)`跟`group by`中的`left(v_所处行政区划代码, ?)`是一个东西，所以认为我们在查询了一个没有`group by`也没有聚合函数的数据，属于`SQL`语法错误。\n下面尝试分析原因：\n1. 原始`SQL`在`PostgreSQL`中独立执行，完全没问题，所以肯定不是`PostgreSQL`的问题\n2. 用`Python`（`psycopg2`）实现了同样的逻辑，然而没有报错，所以还得从`JDBC`+`PostgreSQL`上找原因\n3. 去数据库服务器看日志，发现问题，当`JDBC`请求的时候，后台日志是\n```sql\nSTATEMENT:\n\tselect left(v_所处行政区划代码, $1), count(*) as num\n\tfrom 大学信息表\n\tgroup by left(v_所处行政区划代码, $2)\nDETAIL:  parameters: $1 = '2', $2 = '2'\n```\n    而当`Python`请求时，后台日志是\n```sql\nselect left(v_所处行政区划代码, 2), count(*) as num\n\t\tfrom 大学信息表\n\t\tgroup by left(v_所处行政区划代码, 2)\n```\n    是不是有一种见了鬼的感觉，\n\n### 结论\n在使用`JDBC`操作`PostgreSQL`时，`JAVA`中的`prepareStatement`会精准换算成`PostgreSQL`中的[PREPARE](http://www.postgres.cn/docs/10/sql-prepare.html)，而在`PREPARE`的时候，参数还没给出，所以`PostgreSQL`会认为`select`的`left(v_所处行政区划代码, $1)`并未参与`group by`，因而`PREPARE`报错，导致最终`SQL`执行失败。\n而在`psycopg2`+`PostgreSQL`的环境中，并没有像`JDBC`那样充分利用`PostgreSQL`的`PREPARE`特性，而是在程序侧就换算好了`SQL`语句，所以反而不会报错。\n*显然，是`JDBC`的设计更细致，但是却给自己挖了个坑*","slug":"defect_jdbc_postgresql","published":1,"updated":"2018-08-23T00:54:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmm002py0mz7dr5akbv","content":"<p>假设存在这么一张表，记录全国各地大学的名称，以及所处的行政区划</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 大学信息表</span><br><span class=\"line\">(</span><br><span class=\"line\">    id <span class=\"type\">varchar</span> <span class=\"keyword\">DEFAULT</span> uuid_generate_v4() <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    v_name <span class=\"type\">varchar</span>,</span><br><span class=\"line\">    v_所处行政区划代码 <span class=\"type\">varchar</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>其中，行政区划是国家标准的，也就是你身份证开头的6位，能够精确到区、县的。两位一个级别，前六位，可以笼统的概括成，省及、市级、县级，当然还有直辖市、特别行政区什么的，先不必深究，暂且简化这个逻辑就好了。<br>现在问题来了，如果想统计各省份大学的数量，是不是该用这条<code>SQL</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>), <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>)</span><br><span class=\"line\"><span class=\"keyword\">from</span> 大学信息表</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>对需求敏感的小伙伴肯定看出来了，上面的<code>2</code>在设计接口的时候应该设计成参数，万一要统计各城市的大学数量，直接传<code>4</code>不就好了。<br>所以在<code>Java</code>中，我们大约会写这么一段代码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">PreparedStatement pstmt <span class=\"operator\">=</span> conn.prepareStatement(&quot;&quot;&quot;</span><br><span class=\"line\">select left(v_所处行政区划代码, ?), count(*) as num</span><br><span class=\"line\">from 大学信息表</span><br><span class=\"line\">group by left(v_所处行政区划代码, ?);</span><br><span class=\"line\">&quot;&quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">pstmt.setInt(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">pstmt.setInt(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>就是用两处<code>?</code>占位，然后传入相同的参数。<strong>可惜事与愿违，这段<code>SQL</code>一定是报错的</strong>，会有提示</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">column</span> &quot;大学信息表.v_所处行政区划代码&quot; must appear <span class=\"keyword\">in</span> the <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> clause <span class=\"keyword\">or</span> be used <span class=\"keyword\">in</span> an aggregate <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n<p>简单的说，数据库不认为<code>select</code>中的<code>left(v_所处行政区划代码, ?)</code>跟<code>group by</code>中的<code>left(v_所处行政区划代码, ?)</code>是一个东西，所以认为我们在查询了一个没有<code>group by</code>也没有聚合函数的数据，属于<code>SQL</code>语法错误。<br>下面尝试分析原因：</p>\n<ol>\n<li>原始<code>SQL</code>在<code>PostgreSQL</code>中独立执行，完全没问题，所以肯定不是<code>PostgreSQL</code>的问题</li>\n<li>用<code>Python</code>（<code>psycopg2</code>）实现了同样的逻辑，然而没有报错，所以还得从<code>JDBC</code>+<code>PostgreSQL</code>上找原因</li>\n<li>去数据库服务器看日志，发现问题，当<code>JDBC</code>请求的时候，后台日志是<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">STATEMENT:</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, $<span class=\"number\">1</span>), <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> num</span><br><span class=\"line\">\t<span class=\"keyword\">from</span> 大学信息表</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, $<span class=\"number\">2</span>)</span><br><span class=\"line\">DETAIL:  parameters: $<span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;2&#x27;</span>, $<span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>\n 而当<code>Python</code>请求时，后台日志是<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>), <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> num</span><br><span class=\"line\">\t\t<span class=\"keyword\">from</span> 大学信息表</span><br><span class=\"line\">\t\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n 是不是有一种见了鬼的感觉，</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在使用<code>JDBC</code>操作<code>PostgreSQL</code>时，<code>JAVA</code>中的<code>prepareStatement</code>会精准换算成<code>PostgreSQL</code>中的<a href=\"http://www.postgres.cn/docs/10/sql-prepare.html\">PREPARE</a>，而在<code>PREPARE</code>的时候，参数还没给出，所以<code>PostgreSQL</code>会认为<code>select</code>的<code>left(v_所处行政区划代码, $1)</code>并未参与<code>group by</code>，因而<code>PREPARE</code>报错，导致最终<code>SQL</code>执行失败。<br>而在<code>psycopg2</code>+<code>PostgreSQL</code>的环境中，并没有像<code>JDBC</code>那样充分利用<code>PostgreSQL</code>的<code>PREPARE</code>特性，而是在程序侧就换算好了<code>SQL</code>语句，所以反而不会报错。<br><em>显然，是<code>JDBC</code>的设计更细致，但是却给自己挖了个坑</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>假设存在这么一张表，记录全国各地大学的名称，以及所处的行政区划</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> 大学信息表</span><br><span class=\"line\">(</span><br><span class=\"line\">    id <span class=\"type\">varchar</span> <span class=\"keyword\">DEFAULT</span> uuid_generate_v4() <span class=\"keyword\">PRIMARY</span> KEY,</span><br><span class=\"line\">    v_name <span class=\"type\">varchar</span>,</span><br><span class=\"line\">    v_所处行政区划代码 <span class=\"type\">varchar</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>其中，行政区划是国家标准的，也就是你身份证开头的6位，能够精确到区、县的。两位一个级别，前六位，可以笼统的概括成，省及、市级、县级，当然还有直辖市、特别行政区什么的，先不必深究，暂且简化这个逻辑就好了。<br>现在问题来了，如果想统计各省份大学的数量，是不是该用这条<code>SQL</code></p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>), <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>)</span><br><span class=\"line\"><span class=\"keyword\">from</span> 大学信息表</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>对需求敏感的小伙伴肯定看出来了，上面的<code>2</code>在设计接口的时候应该设计成参数，万一要统计各城市的大学数量，直接传<code>4</code>不就好了。<br>所以在<code>Java</code>中，我们大约会写这么一段代码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">PreparedStatement pstmt <span class=\"operator\">=</span> conn.prepareStatement(&quot;&quot;&quot;</span><br><span class=\"line\">select left(v_所处行政区划代码, ?), count(*) as num</span><br><span class=\"line\">from 大学信息表</span><br><span class=\"line\">group by left(v_所处行政区划代码, ?);</span><br><span class=\"line\">&quot;&quot;&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">pstmt.setInt(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">pstmt.setInt(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<p>就是用两处<code>?</code>占位，然后传入相同的参数。<strong>可惜事与愿违，这段<code>SQL</code>一定是报错的</strong>，会有提示</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">column</span> &quot;大学信息表.v_所处行政区划代码&quot; must appear <span class=\"keyword\">in</span> the <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> clause <span class=\"keyword\">or</span> be used <span class=\"keyword\">in</span> an aggregate <span class=\"keyword\">function</span></span><br></pre></td></tr></table></figure>\n<p>简单的说，数据库不认为<code>select</code>中的<code>left(v_所处行政区划代码, ?)</code>跟<code>group by</code>中的<code>left(v_所处行政区划代码, ?)</code>是一个东西，所以认为我们在查询了一个没有<code>group by</code>也没有聚合函数的数据，属于<code>SQL</code>语法错误。<br>下面尝试分析原因：</p>\n<ol>\n<li>原始<code>SQL</code>在<code>PostgreSQL</code>中独立执行，完全没问题，所以肯定不是<code>PostgreSQL</code>的问题</li>\n<li>用<code>Python</code>（<code>psycopg2</code>）实现了同样的逻辑，然而没有报错，所以还得从<code>JDBC</code>+<code>PostgreSQL</code>上找原因</li>\n<li>去数据库服务器看日志，发现问题，当<code>JDBC</code>请求的时候，后台日志是<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">STATEMENT:</span><br><span class=\"line\">\t<span class=\"keyword\">select</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, $<span class=\"number\">1</span>), <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> num</span><br><span class=\"line\">\t<span class=\"keyword\">from</span> 大学信息表</span><br><span class=\"line\">\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, $<span class=\"number\">2</span>)</span><br><span class=\"line\">DETAIL:  parameters: $<span class=\"number\">1</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;2&#x27;</span>, $<span class=\"number\">2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>\n 而当<code>Python</code>请求时，后台日志是<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>), <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"keyword\">as</span> num</span><br><span class=\"line\">\t\t<span class=\"keyword\">from</span> 大学信息表</span><br><span class=\"line\">\t\t<span class=\"keyword\">group</span> <span class=\"keyword\">by</span> <span class=\"keyword\">left</span>(v_所处行政区划代码, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n 是不是有一种见了鬼的感觉，</li>\n</ol>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在使用<code>JDBC</code>操作<code>PostgreSQL</code>时，<code>JAVA</code>中的<code>prepareStatement</code>会精准换算成<code>PostgreSQL</code>中的<a href=\"http://www.postgres.cn/docs/10/sql-prepare.html\">PREPARE</a>，而在<code>PREPARE</code>的时候，参数还没给出，所以<code>PostgreSQL</code>会认为<code>select</code>的<code>left(v_所处行政区划代码, $1)</code>并未参与<code>group by</code>，因而<code>PREPARE</code>报错，导致最终<code>SQL</code>执行失败。<br>而在<code>psycopg2</code>+<code>PostgreSQL</code>的环境中，并没有像<code>JDBC</code>那样充分利用<code>PostgreSQL</code>的<code>PREPARE</code>特性，而是在程序侧就换算好了<code>SQL</code>语句，所以反而不会报错。<br><em>显然，是<code>JDBC</code>的设计更细致，但是却给自己挖了个坑</em></p>\n"},{"title":"Cordova插件中定制build.gradle的方法","date":"2018-08-06T01:23:31.000Z","_content":"编写`cordova`插件的时候，有时候要有进一步设置`build.gradle`文件的需求，比如追加个依赖什么的。这中问题，可以通过设置`cordova`的`plugin.xml`来解决的。分为如下几个步骤：\n1. 编写cordova.build文件，文件名可以随便叫，内容就放你需要追加的个性化内容，比如我的是\n    ```\n    android {\n        sourceSets {\n            main {\n                jniLibs.srcDirs = ['libs']\n            }\n        }\n    }\n    ```\n2. 在`plugin.xml`文件中`<platform name=\"android\"></platform>`区域内追加配置\n    ```\n    <framework src=\"src/android/cordova.gradle\" custom=\"true\" type=\"gradleReference\"/>\n    ```\n    \n更多信息可以查阅文档 https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html","source":"_posts/cordova_plugin_gradle.md","raw":"---\ntitle: Cordova插件中定制build.gradle的方法\ndate: 2018-08-06 09:23:31\ncategories: 程序人生\ntags:\n    - Cordova\n---\n编写`cordova`插件的时候，有时候要有进一步设置`build.gradle`文件的需求，比如追加个依赖什么的。这中问题，可以通过设置`cordova`的`plugin.xml`来解决的。分为如下几个步骤：\n1. 编写cordova.build文件，文件名可以随便叫，内容就放你需要追加的个性化内容，比如我的是\n    ```\n    android {\n        sourceSets {\n            main {\n                jniLibs.srcDirs = ['libs']\n            }\n        }\n    }\n    ```\n2. 在`plugin.xml`文件中`<platform name=\"android\"></platform>`区域内追加配置\n    ```\n    <framework src=\"src/android/cordova.gradle\" custom=\"true\" type=\"gradleReference\"/>\n    ```\n    \n更多信息可以查阅文档 https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html","slug":"cordova_plugin_gradle","published":1,"updated":"2018-08-06T02:02:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmm002sy0mz57x5h7b5","content":"<p>编写<code>cordova</code>插件的时候，有时候要有进一步设置<code>build.gradle</code>文件的需求，比如追加个依赖什么的。这中问题，可以通过设置<code>cordova</code>的<code>plugin.xml</code>来解决的。分为如下几个步骤：</p>\n<ol>\n<li>编写cordova.build文件，文件名可以随便叫，内容就放你需要追加的个性化内容，比如我的是 <figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">            jniLibs<span class=\"selector-class\">.srcDirs</span> = <span class=\"selector-attr\">[<span class=\"string\">&#x27;libs&#x27;</span>]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在<code>plugin.xml</code>文件中<code>&lt;platform name=&quot;android&quot;&gt;&lt;/platform&gt;</code>区域内追加配置 <figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;framework <span class=\"attribute\">src</span>=<span class=\"string\">&quot;src/android/cordova.gradle&quot;</span> <span class=\"attribute\">custom</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attribute\">type</span>=<span class=\"string\">&quot;gradleReference&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>更多信息可以查阅文档 <a href=\"https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html\">https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>编写<code>cordova</code>插件的时候，有时候要有进一步设置<code>build.gradle</code>文件的需求，比如追加个依赖什么的。这中问题，可以通过设置<code>cordova</code>的<code>plugin.xml</code>来解决的。分为如下几个步骤：</p>\n<ol>\n<li>编写cordova.build文件，文件名可以随便叫，内容就放你需要追加的个性化内容，比如我的是 <figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">main</span> &#123;</span><br><span class=\"line\">            jniLibs<span class=\"selector-class\">.srcDirs</span> = <span class=\"selector-attr\">[<span class=\"string\">&#x27;libs&#x27;</span>]</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在<code>plugin.xml</code>文件中<code>&lt;platform name=&quot;android&quot;&gt;&lt;/platform&gt;</code>区域内追加配置 <figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;framework <span class=\"attribute\">src</span>=<span class=\"string\">&quot;src/android/cordova.gradle&quot;</span> <span class=\"attribute\">custom</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"attribute\">type</span>=<span class=\"string\">&quot;gradleReference&quot;</span>/&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>更多信息可以查阅文档 <a href=\"https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html\">https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html</a></p>\n"},{"title":"相当靠谱的FastDFS Docker镜像","date":"2018-09-01T07:46:09.000Z","_content":"该项目是我在网上搜的，迄今为止个人感觉最靠谱的`FastDFS`镜像，项目地址https://github.com/luhuiguo/fastdfs-docker\n\n开启一个`tracker`\n```\ndocker run -dti --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs luhuiguo/fastdfs tracker\n```\n开启一个`storage`\n```\ndocker run -dti --network=host --name storage0 -e TRACKER_SERVER=192.168.0.88:22122 -v /var/fdfs/storage0:/var/fdfs luhuiguo/fastdfs storage\n```\n开启一个`storage`，并指定`Group`\n```\ndocker run -dti --network=host --name storage2 -e TRACKER_SERVER=10.1.5.85:22122 -e GROUP_NAME=group2 -e PORT=22222 -v /var/fdfs/storage2:/var/fdfs luhuiguo/fastdfs storage\n```","source":"_posts/fastdfs_docker.md","raw":"---\ntitle: 相当靠谱的FastDFS Docker镜像\ndate: 2018-09-01 15:46:09\ncategories: 程序人生\ntags:\n    - Docker\n    - FastDFS\n---\n该项目是我在网上搜的，迄今为止个人感觉最靠谱的`FastDFS`镜像，项目地址https://github.com/luhuiguo/fastdfs-docker\n\n开启一个`tracker`\n```\ndocker run -dti --network=host --name tracker -v /var/fdfs/tracker:/var/fdfs luhuiguo/fastdfs tracker\n```\n开启一个`storage`\n```\ndocker run -dti --network=host --name storage0 -e TRACKER_SERVER=192.168.0.88:22122 -v /var/fdfs/storage0:/var/fdfs luhuiguo/fastdfs storage\n```\n开启一个`storage`，并指定`Group`\n```\ndocker run -dti --network=host --name storage2 -e TRACKER_SERVER=10.1.5.85:22122 -e GROUP_NAME=group2 -e PORT=22222 -v /var/fdfs/storage2:/var/fdfs luhuiguo/fastdfs storage\n```","slug":"fastdfs_docker","published":1,"updated":"2019-01-22T02:25:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmm002vy0mz1detcw1j","content":"<p>该项目是我在网上搜的，迄今为止个人感觉最靠谱的<code>FastDFS</code>镜像，项目地址<a href=\"https://github.com/luhuiguo/fastdfs-docker\">https://github.com/luhuiguo/fastdfs-docker</a></p>\n<p>开启一个<code>tracker</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -dti --network=host --name tracker -v <span class=\"regexp\">/var/</span>fdfs<span class=\"regexp\">/tracker:/</span>var<span class=\"regexp\">/fdfs luhuiguo/</span>fastdfs tracker</span><br></pre></td></tr></table></figure>\n<p>开启一个<code>storage</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -dti --network=host --name storage0 -e TRACKER_SERVER=<span class=\"number\">192.168</span>.<span class=\"number\">0.88</span>:<span class=\"number\">22122</span> -v <span class=\"regexp\">/var/</span>fdfs<span class=\"regexp\">/storage0:/</span>var<span class=\"regexp\">/fdfs luhuiguo/</span>fastdfs storage</span><br></pre></td></tr></table></figure>\n<p>开启一个<code>storage</code>，并指定<code>Group</code></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> -dti <span class=\"attribute\">--network</span>=host --name storage2 -e <span class=\"attribute\">TRACKER_SERVER</span>=10.1.5.85:22122 -e <span class=\"attribute\">GROUP_NAME</span>=group2 -e <span class=\"attribute\">PORT</span>=22222 -v /var/fdfs/storage2:/var/fdfs luhuiguo/fastdfs storage</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>该项目是我在网上搜的，迄今为止个人感觉最靠谱的<code>FastDFS</code>镜像，项目地址<a href=\"https://github.com/luhuiguo/fastdfs-docker\">https://github.com/luhuiguo/fastdfs-docker</a></p>\n<p>开启一个<code>tracker</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -dti --network=host --name tracker -v <span class=\"regexp\">/var/</span>fdfs<span class=\"regexp\">/tracker:/</span>var<span class=\"regexp\">/fdfs luhuiguo/</span>fastdfs tracker</span><br></pre></td></tr></table></figure>\n<p>开启一个<code>storage</code></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -dti --network=host --name storage0 -e TRACKER_SERVER=<span class=\"number\">192.168</span>.<span class=\"number\">0.88</span>:<span class=\"number\">22122</span> -v <span class=\"regexp\">/var/</span>fdfs<span class=\"regexp\">/storage0:/</span>var<span class=\"regexp\">/fdfs luhuiguo/</span>fastdfs storage</span><br></pre></td></tr></table></figure>\n<p>开启一个<code>storage</code>，并指定<code>Group</code></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> -dti <span class=\"attribute\">--network</span>=host --name storage2 -e <span class=\"attribute\">TRACKER_SERVER</span>=10.1.5.85:22122 -e <span class=\"attribute\">GROUP_NAME</span>=group2 -e <span class=\"attribute\">PORT</span>=22222 -v /var/fdfs/storage2:/var/fdfs luhuiguo/fastdfs storage</span><br></pre></td></tr></table></figure>"},{"title":"用Gradle打包Vue前端程序","date":"2018-07-16T22:26:30.000Z","_content":"我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。\n其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样\n```\nmyproject\n├── build.gradle\n├── frontend\n│   ├── build\n│   ├── index.html\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── javaweb\n│   ├── build\n│   ├── build.gradle\n│   ├── out\n│   └── src\n└── settings.gradle\n```\n其中`frontend`文件夹就是`vue`项目的存放路径，我们先在此文件夹中，追加文件`build.gradle`，放至在package.json隔壁。填上很简单的内容：\n```\nplugins {\n  id \"com.palantir.npm-run\" version \"0.5.0\"\n}\n```\n代表这个项目要用到gradle-npm-run的插件\n然后修改settings.gradle，追加一行\n`include 'frontend'`，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task\n![-w148](/media/15317809896046.jpg)\n其中`build`就可以实现通过`gradle frontend:build`的命令，实现gradle对vue项目的打包了。\n明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。\n","source":"_posts/gradle_build_vue.md","raw":"---\ntitle: 用Gradle打包Vue前端程序\ndate: 2018-07-17 06:26:30\ncategories: 程序人生\ntags: \n    - 前端\n    - vue\n    - gradle\n---\n我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。\n其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样\n```\nmyproject\n├── build.gradle\n├── frontend\n│   ├── build\n│   ├── index.html\n│   ├── node_modules\n│   ├── package.json\n│   └── src\n├── javaweb\n│   ├── build\n│   ├── build.gradle\n│   ├── out\n│   └── src\n└── settings.gradle\n```\n其中`frontend`文件夹就是`vue`项目的存放路径，我们先在此文件夹中，追加文件`build.gradle`，放至在package.json隔壁。填上很简单的内容：\n```\nplugins {\n  id \"com.palantir.npm-run\" version \"0.5.0\"\n}\n```\n代表这个项目要用到gradle-npm-run的插件\n然后修改settings.gradle，追加一行\n`include 'frontend'`，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task\n![-w148](/media/15317809896046.jpg)\n其中`build`就可以实现通过`gradle frontend:build`的命令，实现gradle对vue项目的打包了。\n明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。\n","slug":"gradle_build_vue","published":1,"updated":"2018-07-18T01:42:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmn002zy0mz35o07lo9","content":"<p>我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。<br>其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">myproject</span><br><span class=\"line\">├── <span class=\"keyword\">build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\"></span>├── frontend</span><br><span class=\"line\">│   ├── <span class=\"keyword\">build</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── index.html</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.<span class=\"keyword\">json</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   └── src</span><br><span class=\"line\">├── <span class=\"keyword\">javaweb</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── <span class=\"keyword\">build</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── <span class=\"keyword\">build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── out</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── settings.gradle</span><br></pre></td></tr></table></figure>\n<p>其中<code>frontend</code>文件夹就是<code>vue</code>项目的存放路径，我们先在此文件夹中，追加文件<code>build.gradle</code>，放至在package.json隔壁。填上很简单的内容：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span> <span class=\"string\">&quot;com.palantir.npm-run&quot;</span> <span class=\"built_in\">version</span> <span class=\"string\">&quot;0.5.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代表这个项目要用到gradle-npm-run的插件<br>然后修改settings.gradle，追加一行<br><code>include &#39;frontend&#39;</code>，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task<br><img src=\"/media/15317809896046.jpg\" alt=\"-w148\"><br>其中<code>build</code>就可以实现通过<code>gradle frontend:build</code>的命令，实现gradle对vue项目的打包了。<br>明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我这边打包和发布程序，属于重度依赖Gradle的状态。所以纵容前端程序游离在这个体系外，不利于团队的整体协作。于是有了这篇文章。<br>其实很简单，首先我们需要一个以Gradle为基石的项目，把前后端项目组织成这样</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">myproject</span><br><span class=\"line\">├── <span class=\"keyword\">build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\"></span>├── frontend</span><br><span class=\"line\">│   ├── <span class=\"keyword\">build</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── index.html</span><br><span class=\"line\">│   ├── node_modules</span><br><span class=\"line\">│   ├── package.<span class=\"keyword\">json</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   └── src</span><br><span class=\"line\">├── <span class=\"keyword\">javaweb</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── <span class=\"keyword\">build</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── <span class=\"keyword\">build.gradle</span></span><br><span class=\"line\"><span class=\"keyword\"></span>│   ├── out</span><br><span class=\"line\">│   └── src</span><br><span class=\"line\">└── settings.gradle</span><br></pre></td></tr></table></figure>\n<p>其中<code>frontend</code>文件夹就是<code>vue</code>项目的存放路径，我们先在此文件夹中，追加文件<code>build.gradle</code>，放至在package.json隔壁。填上很简单的内容：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span> <span class=\"string\">&quot;com.palantir.npm-run&quot;</span> <span class=\"built_in\">version</span> <span class=\"string\">&quot;0.5.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代表这个项目要用到gradle-npm-run的插件<br>然后修改settings.gradle，追加一行<br><code>include &#39;frontend&#39;</code>，这样gradle就能顺利识别vue前端项目了，并且依靠插件，我们获得了这几个task<br><img src=\"/media/15317809896046.jpg\" alt=\"-w148\"><br>其中<code>build</code>就可以实现通过<code>gradle frontend:build</code>的命令，实现gradle对vue项目的打包了。<br>明天，我将继续讲解，如何用gardle实现像Linux服务器，敬请期待。</p>\n"},{"title":"Gradle插件下载不下来的解决方案","date":"2018-09-04T07:06:51.000Z","_content":"字符乱码和互联网不互联，是困扰中国程序员的两大问题。我就在使用`gradle`的时候，会遇到官方插件下载不下来的情况。\n比如使用`org.hidetake.ssh`插件时，如果按照文档所述，直接这样写\n```\nplugins {\n  id 'org.hidetake.ssh' version '2.9.0'\n}\n```\n有时候就会遇到网络问题，因为此时要去访问`gradle.org`官网去申请插件，而不知道什么时候这个网络就不通了。\n此时我们可以通过细化`buildscript`的`repositories`来解决问题，也就是在`plugins`之前，增加`buildscript`的配置内容，整体代码如下\n```\nbuildscript {\n    repositories {\n        maven {\n            url \"http://maven.aliyun.com/nexus/content/groups/public\"\n        }\n        jcenter()\n    }\n}\n\nplugins {\n    id \"org.hidetake.ssh\" version \"2.9.0\"\n}\n```\n*这里我们通过使用阿里云的`maven`服务器地址，理论上还能在国内获得更快的资源访问速度。*","source":"_posts/gradle_plugin_download_error.md","raw":"---\ntitle: Gradle插件下载不下来的解决方案\ndate: 2018-09-04 15:06:51\ncategories: 程序人生\ntags:\n    - gradle\n---\n字符乱码和互联网不互联，是困扰中国程序员的两大问题。我就在使用`gradle`的时候，会遇到官方插件下载不下来的情况。\n比如使用`org.hidetake.ssh`插件时，如果按照文档所述，直接这样写\n```\nplugins {\n  id 'org.hidetake.ssh' version '2.9.0'\n}\n```\n有时候就会遇到网络问题，因为此时要去访问`gradle.org`官网去申请插件，而不知道什么时候这个网络就不通了。\n此时我们可以通过细化`buildscript`的`repositories`来解决问题，也就是在`plugins`之前，增加`buildscript`的配置内容，整体代码如下\n```\nbuildscript {\n    repositories {\n        maven {\n            url \"http://maven.aliyun.com/nexus/content/groups/public\"\n        }\n        jcenter()\n    }\n}\n\nplugins {\n    id \"org.hidetake.ssh\" version \"2.9.0\"\n}\n```\n*这里我们通过使用阿里云的`maven`服务器地址，理论上还能在国内获得更快的资源访问速度。*","slug":"gradle_plugin_download_error","published":1,"updated":"2018-09-04T07:30:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmn0032y0mz3jlk26np","content":"<p>字符乱码和互联网不互联，是困扰中国程序员的两大问题。我就在使用<code>gradle</code>的时候，会遇到官方插件下载不下来的情况。<br>比如使用<code>org.hidetake.ssh</code>插件时，如果按照文档所述，直接这样写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span> <span class=\"string\">&#x27;org.hidetake.ssh&#x27;</span> version <span class=\"string\">&#x27;2.9.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候就会遇到网络问题，因为此时要去访问<code>gradle.org</code>官网去申请插件，而不知道什么时候这个网络就不通了。<br>此时我们可以通过细化<code>buildscript</code>的<code>repositories</code>来解决问题，也就是在<code>plugins</code>之前，增加<code>buildscript</code>的配置内容，整体代码如下</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">maven</span> &#123;</span><br><span class=\"line\">            url <span class=\"string\">&quot;http://maven.aliyun.com/nexus/content/groups/public&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">plugins</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&quot;org.hidetake.ssh&quot;</span> version <span class=\"string\">&quot;2.9.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>这里我们通过使用阿里云的<code>maven</code>服务器地址，理论上还能在国内获得更快的资源访问速度。</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>字符乱码和互联网不互联，是困扰中国程序员的两大问题。我就在使用<code>gradle</code>的时候，会遇到官方插件下载不下来的情况。<br>比如使用<code>org.hidetake.ssh</code>插件时，如果按照文档所述，直接这样写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">  <span class=\"built_in\">id</span> <span class=\"string\">&#x27;org.hidetake.ssh&#x27;</span> version <span class=\"string\">&#x27;2.9.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候就会遇到网络问题，因为此时要去访问<code>gradle.org</code>官网去申请插件，而不知道什么时候这个网络就不通了。<br>此时我们可以通过细化<code>buildscript</code>的<code>repositories</code>来解决问题，也就是在<code>plugins</code>之前，增加<code>buildscript</code>的配置内容，整体代码如下</p>\n<figure class=\"highlight fsharp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">maven</span> &#123;</span><br><span class=\"line\">            url <span class=\"string\">&quot;http://maven.aliyun.com/nexus/content/groups/public&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">plugins</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&quot;org.hidetake.ssh&quot;</span> version <span class=\"string\">&quot;2.9.0&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>这里我们通过使用阿里云的<code>maven</code>服务器地址，理论上还能在国内获得更快的资源访问速度。</em></p>\n"},{"title":"用Gradle自动发布程序至Linux服务器","date":"2018-07-18T01:41:26.000Z","_content":"你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上`jenkins`，先拿`gradle`救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的[用Gradle打包Vue前端程序](http://www.kankanzhijian.com/2018/07/17/gradle_build_vue/)保持一定的连贯性。当然本帖拿来发布`war`包也是ok的。\n* 首先追加gradle插件，参考写法\n\n```\nplugins {\n    id 'org.hidetake.ssh' version '2.9.0'\n}\n```\n或者\n```\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'\n  }\n}\napply plugin: 'org.hidetake.ssh'\n```\n* 配置插件\n\n```\nremotes {\n    webServer {\n        host = '192.168.1.100'\n        user = 'develop'\n        port = 22\n        password = 'xyz'\n    }\n}\n```\n如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用`identity = file('id_rsa')`代替掉`password = 'xyz'`\n\n* 配置完Gradle SSH Plugin，就可以自己写`task`实现上传文件了。下面贴段我的\n\n```\ntask deployPortal {\n    group = 'release'\n    dependsOn zipPortal\n    doLast {\n        ssh.run {\n            session(remotes.webServer) {\n                put from: \"$buildDir/portal.zip\", into: \"/home/develop/\"\n                def result = execute 'unzip -o  /home/develop/portal.zip -d /home/develop/portal/'\n                println(result)\n            }\n        }\n    }\n}\n```\n这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句`put from: \"本地文件\", into: \"服务器路径\"`，实现文件上传功能。第二句`execute '执行shell命令'`，实现通过shell命令，解压缩文件。\n* 至于中间那句`dependsOn zipPortal`表示执行发布task之前，先要把文件准备好，这个`zipPortal`task我是这么写的\n    ```\n    task zipPortal(type: Zip) {\n        dependsOn(':portal:build')\n        from 'portal/www'\n        archiveName 'portal.zip'\n        destinationDir buildDir\n    }\n    ```\n*  换句话说，如果你是要上传`war`包的话，可能就不是`dependsOn zipPortal`而是`dependsOn war`了。其他的地方，大同小异。","source":"_posts/gradle_task_use_ssh.md","raw":"---\ntitle: 用Gradle自动发布程序至Linux服务器\ndate: 2018-07-18 09:41:26\ncategories: 程序人生\ntags:\n    - gradle\n---\n你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上`jenkins`，先拿`gradle`救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的[用Gradle打包Vue前端程序](http://www.kankanzhijian.com/2018/07/17/gradle_build_vue/)保持一定的连贯性。当然本帖拿来发布`war`包也是ok的。\n* 首先追加gradle插件，参考写法\n\n```\nplugins {\n    id 'org.hidetake.ssh' version '2.9.0'\n}\n```\n或者\n```\nbuildscript {\n  repositories {\n    jcenter()\n  }\n  dependencies {\n    classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'\n  }\n}\napply plugin: 'org.hidetake.ssh'\n```\n* 配置插件\n\n```\nremotes {\n    webServer {\n        host = '192.168.1.100'\n        user = 'develop'\n        port = 22\n        password = 'xyz'\n    }\n}\n```\n如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用`identity = file('id_rsa')`代替掉`password = 'xyz'`\n\n* 配置完Gradle SSH Plugin，就可以自己写`task`实现上传文件了。下面贴段我的\n\n```\ntask deployPortal {\n    group = 'release'\n    dependsOn zipPortal\n    doLast {\n        ssh.run {\n            session(remotes.webServer) {\n                put from: \"$buildDir/portal.zip\", into: \"/home/develop/\"\n                def result = execute 'unzip -o  /home/develop/portal.zip -d /home/develop/portal/'\n                println(result)\n            }\n        }\n    }\n}\n```\n这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句`put from: \"本地文件\", into: \"服务器路径\"`，实现文件上传功能。第二句`execute '执行shell命令'`，实现通过shell命令，解压缩文件。\n* 至于中间那句`dependsOn zipPortal`表示执行发布task之前，先要把文件准备好，这个`zipPortal`task我是这么写的\n    ```\n    task zipPortal(type: Zip) {\n        dependsOn(':portal:build')\n        from 'portal/www'\n        archiveName 'portal.zip'\n        destinationDir buildDir\n    }\n    ```\n*  换句话说，如果你是要上传`war`包的话，可能就不是`dependsOn zipPortal`而是`dependsOn war`了。其他的地方，大同小异。","slug":"gradle_task_use_ssh","published":1,"updated":"2018-09-12T01:04:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmn0035y0mzgpbo73gc","content":"<p>你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上<code>jenkins</code>，先拿<code>gradle</code>救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的<a href=\"http://www.kankanzhijian.com/2018/07/17/gradle_build_vue/\">用Gradle打包Vue前端程序</a>保持一定的连贯性。当然本帖拿来发布<code>war</code>包也是ok的。</p>\n<ul>\n<li>首先追加gradle插件，参考写法</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;org.hidetake.ssh&#x27;</span> version <span class=\"string\">&#x27;2.9.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;org.hidetake:gradle-ssh-plugin:2.9.0&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;org.hidetake.ssh&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置插件</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">remotes &#123;</span><br><span class=\"line\">    webServer &#123;</span><br><span class=\"line\">        host = <span class=\"string\">&#x27;192.168.1.100&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">user</span> = <span class=\"string\">&#x27;develop&#x27;</span></span><br><span class=\"line\">        port = <span class=\"number\">22</span></span><br><span class=\"line\">        <span class=\"keyword\">password</span> = <span class=\"string\">&#x27;xyz&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用<code>identity = file(&#39;id_rsa&#39;)</code>代替掉<code>password = &#39;xyz&#39;</code></p>\n<ul>\n<li>配置完Gradle SSH Plugin，就可以自己写<code>task</code>实现上传文件了。下面贴段我的</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> deployPortal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">group</span> = <span class=\"string\">&#x27;release&#x27;</span></span><br><span class=\"line\">    dependsOn zipPortal</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        ssh.run &#123;</span><br><span class=\"line\">            session(remotes.webServer) &#123;</span><br><span class=\"line\">                put <span class=\"keyword\">from</span>: <span class=\"string\">&quot;$buildDir/portal.zip&quot;</span>, <span class=\"keyword\">into</span>: <span class=\"string\">&quot;/home/develop/&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> result = execute <span class=\"string\">&#x27;unzip -o  /home/develop/portal.zip -d /home/develop/portal/&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">println</span>(result)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句<code>put from: &quot;本地文件&quot;, into: &quot;服务器路径&quot;</code>，实现文件上传功能。第二句<code>execute &#39;执行shell命令&#39;</code>，实现通过shell命令，解压缩文件。</p>\n<ul>\n<li>至于中间那句<code>dependsOn zipPortal</code>表示执行发布task之前，先要把文件准备好，这个<code>zipPortal</code>task我是这么写的  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">task <span class=\"title function_\">zipPortal</span>(<span class=\"params\"><span class=\"keyword\">type</span>: Zip</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dependsOn</span>(<span class=\"string\">&#x27;:portal:build&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">&#x27;portal/www&#x27;</span></span><br><span class=\"line\">    archiveName <span class=\"string\">&#x27;portal.zip&#x27;</span></span><br><span class=\"line\">    destinationDir buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>换句话说，如果你是要上传<code>war</code>包的话，可能就不是<code>dependsOn zipPortal</code>而是<code>dependsOn war</code>了。其他的地方，大同小异。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>你的重复劳动，一定能找“人”帮你做，聪明的程序员一定是拒绝重复的。由于公司条件限制，暂时用不上<code>jenkins</code>，先拿<code>gradle</code>救救急也是不错的。今天要实现的是，通过gradle发布静态站点到服务器。这样可以和上回的<a href=\"http://www.kankanzhijian.com/2018/07/17/gradle_build_vue/\">用Gradle打包Vue前端程序</a>保持一定的连贯性。当然本帖拿来发布<code>war</code>包也是ok的。</p>\n<ul>\n<li>首先追加gradle插件，参考写法</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"built_in\">id</span> <span class=\"string\">&#x27;org.hidetake.ssh&#x27;</span> version <span class=\"string\">&#x27;2.9.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;org.hidetake:gradle-ssh-plugin:2.9.0&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;org.hidetake.ssh&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置插件</li>\n</ul>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">remotes &#123;</span><br><span class=\"line\">    webServer &#123;</span><br><span class=\"line\">        host = <span class=\"string\">&#x27;192.168.1.100&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">user</span> = <span class=\"string\">&#x27;develop&#x27;</span></span><br><span class=\"line\">        port = <span class=\"number\">22</span></span><br><span class=\"line\">        <span class=\"keyword\">password</span> = <span class=\"string\">&#x27;xyz&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果觉得密码服务器密码明文写在这里不安全，可以用公钥ssh的方案，那么这里可以用<code>identity = file(&#39;id_rsa&#39;)</code>代替掉<code>password = &#39;xyz&#39;</code></p>\n<ul>\n<li>配置完Gradle SSH Plugin，就可以自己写<code>task</code>实现上传文件了。下面贴段我的</li>\n</ul>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">task</span> deployPortal &#123;</span><br><span class=\"line\">    <span class=\"keyword\">group</span> = <span class=\"string\">&#x27;release&#x27;</span></span><br><span class=\"line\">    dependsOn zipPortal</span><br><span class=\"line\">    <span class=\"keyword\">doLast</span> &#123;</span><br><span class=\"line\">        ssh.run &#123;</span><br><span class=\"line\">            session(remotes.webServer) &#123;</span><br><span class=\"line\">                put <span class=\"keyword\">from</span>: <span class=\"string\">&quot;$buildDir/portal.zip&quot;</span>, <span class=\"keyword\">into</span>: <span class=\"string\">&quot;/home/develop/&quot;</span></span><br><span class=\"line\">                <span class=\"keyword\">def</span> result = execute <span class=\"string\">&#x27;unzip -o  /home/develop/portal.zip -d /home/develop/portal/&#x27;</span></span><br><span class=\"line\">                <span class=\"keyword\">println</span>(result)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个task的主要作用就是把压缩好的静态站点上传至服务器，然后再解压缩。重点就两句话，第一句<code>put from: &quot;本地文件&quot;, into: &quot;服务器路径&quot;</code>，实现文件上传功能。第二句<code>execute &#39;执行shell命令&#39;</code>，实现通过shell命令，解压缩文件。</p>\n<ul>\n<li>至于中间那句<code>dependsOn zipPortal</code>表示执行发布task之前，先要把文件准备好，这个<code>zipPortal</code>task我是这么写的  <figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\">task <span class=\"title function_\">zipPortal</span>(<span class=\"params\"><span class=\"keyword\">type</span>: Zip</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">dependsOn</span>(<span class=\"string\">&#x27;:portal:build&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">from</span> <span class=\"string\">&#x27;portal/www&#x27;</span></span><br><span class=\"line\">    archiveName <span class=\"string\">&#x27;portal.zip&#x27;</span></span><br><span class=\"line\">    destinationDir buildDir</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>换句话说，如果你是要上传<code>war</code>包的话，可能就不是<code>dependsOn zipPortal</code>而是<code>dependsOn war</code>了。其他的地方，大同小异。</li>\n</ul>\n"},{"title":"在SpringBoot中使用groovy.sql.SQL高效开发","date":"2018-08-29T03:07:02.000Z","_content":"某种情况下，其实就想用`Spring Boot`提供的那种即开即用的开发体验，但是我真的对`Spring`保姆式的一揽子工程不怎么感冒。尤其是数据库`JDBC`这块。常见的`Java`系里提到的技术，我真的一个都不想用，我最钟爱的数据库类库其实就是`groovy.sql.SQL`，简单而强大，配合`Groovy`之后，再也没有繁琐的`Java Bean`和无边无际的`get`、`set`。\n想了解更多`groovy.sql.SQL`欢迎查看官方文档：http://groovy-lang.org/databases.html\n今天我们还是着重说一下，怎么在`Spring Boot`的框架下融入`groovy.sql.SQL`，话不多说，上代码：\n#### gradle.build\n```gradle\nplugins {\n    id 'org.springframework.boot' version '1.5.15.RELEASE'\n    id 'war'\n    id 'groovy'\n}\n\ngroup 'com.aruistar'\nversion '1.0-SNAPSHOT'\n\next {\n    groovy_version = \"2.5.2\"\n}\n\nsourceCompatibility = 1.8\n\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-starter-web\")\n//    providedRuntime(\"org.springframework.boot:spring-boot-starter-tomcat\")\n\n    compile \"org.codehaus.groovy:groovy:$groovy_version\"\n    compile \"org.codehaus.groovy:groovy-sql:$groovy_version\"\n    compile \"org.codehaus.groovy:groovy-json:$groovy_version\"\n\n    compile group: 'com.alibaba', name: 'druid', version: '1.1.10'\n    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.46'\n\n    testCompile \"org.codehaus.groovy:groovy-test:$groovy_version\"\n    testCompile(\"org.springframework.boot:spring-boot-starter-test\")\n}\n```\n\n#### 程序入口Application\n```java\npackage com.aruistar\n\nimport com.alibaba.druid.pool.DruidDataSource\nimport groovy.sql.Sql\nimport org.springframework.boot.SpringApplication\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder\nimport org.springframework.boot.builder.SpringApplicationBuilder\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.boot.web.support.SpringBootServletInitializer\nimport org.springframework.context.annotation.Bean\n\nimport javax.sql.DataSource\n\n@SpringBootApplication\nclass Application extends SpringBootServletInitializer {\n\n    static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(Application.class);\n    }\n\n\n    @Bean\n    @ConfigurationProperties(\"app.datasource\")\n    DataSource dataSource() {\n        return DataSourceBuilder.create().type(DruidDataSource.class).build();\n    }\n\n    @Bean\n    Sql db() {\n        return new Sql(dataSource())\n    }\n}\n\n```\n\n#### 配置文件application.yml\n```yml\nserver:\n  port: 8080\n\napp:\n  datasource:\n    url: jdbc:mysql://127.0.0.1:3306/test\n    username: root\n    password: 1\n    pool-size: 5\n```\n\n#### 用上Sql的Controller\n```java\npackage com.aruistar.controller\n\n\nimport groovy.sql.Sql\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\n@RequestMapping(\"/open\")\nclass OpenController {\n\n    @Autowired\n    Sql db\n\n    @RequestMapping(\"/test\")\n    def test() {\n        db.firstRow(\"select 1)\n    }\n      \n}\n\n```\n\n#### 总结\n这套方案用上了`Spring`，也用上了数据库连接池`druid`，所以项目整体是足够健壮的。如果你的项目本来就是基于`Spring`技术栈的，那我强烈推荐你试试结合`Groovy`的这套打法。可以大幅提升开发效率。\n**亲自跑一下`Groovy`项目，用用她提供的`SQL`类，我想你会爱上她的**","source":"_posts/groovy-sql-SQL-in-spring-boot.md","raw":"---\ntitle: 在SpringBoot中使用groovy.sql.SQL高效开发\ndate: 2018-08-29 11:07:02\ncategories: 程序人生\ntags:\n    - Spring\n    - groovy\n---\n某种情况下，其实就想用`Spring Boot`提供的那种即开即用的开发体验，但是我真的对`Spring`保姆式的一揽子工程不怎么感冒。尤其是数据库`JDBC`这块。常见的`Java`系里提到的技术，我真的一个都不想用，我最钟爱的数据库类库其实就是`groovy.sql.SQL`，简单而强大，配合`Groovy`之后，再也没有繁琐的`Java Bean`和无边无际的`get`、`set`。\n想了解更多`groovy.sql.SQL`欢迎查看官方文档：http://groovy-lang.org/databases.html\n今天我们还是着重说一下，怎么在`Spring Boot`的框架下融入`groovy.sql.SQL`，话不多说，上代码：\n#### gradle.build\n```gradle\nplugins {\n    id 'org.springframework.boot' version '1.5.15.RELEASE'\n    id 'war'\n    id 'groovy'\n}\n\ngroup 'com.aruistar'\nversion '1.0-SNAPSHOT'\n\next {\n    groovy_version = \"2.5.2\"\n}\n\nsourceCompatibility = 1.8\n\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-starter-web\")\n//    providedRuntime(\"org.springframework.boot:spring-boot-starter-tomcat\")\n\n    compile \"org.codehaus.groovy:groovy:$groovy_version\"\n    compile \"org.codehaus.groovy:groovy-sql:$groovy_version\"\n    compile \"org.codehaus.groovy:groovy-json:$groovy_version\"\n\n    compile group: 'com.alibaba', name: 'druid', version: '1.1.10'\n    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.46'\n\n    testCompile \"org.codehaus.groovy:groovy-test:$groovy_version\"\n    testCompile(\"org.springframework.boot:spring-boot-starter-test\")\n}\n```\n\n#### 程序入口Application\n```java\npackage com.aruistar\n\nimport com.alibaba.druid.pool.DruidDataSource\nimport groovy.sql.Sql\nimport org.springframework.boot.SpringApplication\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder\nimport org.springframework.boot.builder.SpringApplicationBuilder\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.boot.web.support.SpringBootServletInitializer\nimport org.springframework.context.annotation.Bean\n\nimport javax.sql.DataSource\n\n@SpringBootApplication\nclass Application extends SpringBootServletInitializer {\n\n    static void main(String[] args) throws Exception {\n        SpringApplication.run(Application.class, args);\n    }\n\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder) {\n        return builder.sources(Application.class);\n    }\n\n\n    @Bean\n    @ConfigurationProperties(\"app.datasource\")\n    DataSource dataSource() {\n        return DataSourceBuilder.create().type(DruidDataSource.class).build();\n    }\n\n    @Bean\n    Sql db() {\n        return new Sql(dataSource())\n    }\n}\n\n```\n\n#### 配置文件application.yml\n```yml\nserver:\n  port: 8080\n\napp:\n  datasource:\n    url: jdbc:mysql://127.0.0.1:3306/test\n    username: root\n    password: 1\n    pool-size: 5\n```\n\n#### 用上Sql的Controller\n```java\npackage com.aruistar.controller\n\n\nimport groovy.sql.Sql\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.RestController\n\n@RestController\n@RequestMapping(\"/open\")\nclass OpenController {\n\n    @Autowired\n    Sql db\n\n    @RequestMapping(\"/test\")\n    def test() {\n        db.firstRow(\"select 1)\n    }\n      \n}\n\n```\n\n#### 总结\n这套方案用上了`Spring`，也用上了数据库连接池`druid`，所以项目整体是足够健壮的。如果你的项目本来就是基于`Spring`技术栈的，那我强烈推荐你试试结合`Groovy`的这套打法。可以大幅提升开发效率。\n**亲自跑一下`Groovy`项目，用用她提供的`SQL`类，我想你会爱上她的**","slug":"groovy-sql-SQL-in-spring-boot","published":1,"updated":"2018-08-29T03:40:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmn0038y0mz5ijje8ll","content":"<p>某种情况下，其实就想用<code>Spring Boot</code>提供的那种即开即用的开发体验，但是我真的对<code>Spring</code>保姆式的一揽子工程不怎么感冒。尤其是数据库<code>JDBC</code>这块。常见的<code>Java</code>系里提到的技术，我真的一个都不想用，我最钟爱的数据库类库其实就是<code>groovy.sql.SQL</code>，简单而强大，配合<code>Groovy</code>之后，再也没有繁琐的<code>Java Bean</code>和无边无际的<code>get</code>、<code>set</code>。<br>想了解更多<code>groovy.sql.SQL</code>欢迎查看官方文档：<a href=\"http://groovy-lang.org/databases.html\">http://groovy-lang.org/databases.html</a><br>今天我们还是着重说一下，怎么在<code>Spring Boot</code>的框架下融入<code>groovy.sql.SQL</code>，话不多说，上代码：</p>\n<h4 id=\"gradle-build\"><a href=\"#gradle-build\" class=\"headerlink\" title=\"gradle.build\"></a>gradle.build</h4><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&#x27;org.springframework.boot&#x27;</span> version <span class=\"string\">&#x27;1.5.15.RELEASE&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;war&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;groovy&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"string\">&#x27;com.aruistar&#x27;</span></span><br><span class=\"line\">version <span class=\"string\">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">    groovy_version = <span class=\"string\">&quot;2.5.2&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span>(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    providedRuntime(&quot;org.springframework.boot:spring-boot-starter-tomcat&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&quot;org.codehaus.groovy:groovy:$groovy_version&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&quot;org.codehaus.groovy:groovy-sql:$groovy_version&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&quot;org.codehaus.groovy:groovy-json:$groovy_version&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;com.alibaba&#x27;</span>, name: <span class=\"string\">&#x27;druid&#x27;</span>, version: <span class=\"string\">&#x27;1.1.10&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;mysql&#x27;</span>, name: <span class=\"string\">&#x27;mysql-connector-java&#x27;</span>, version: <span class=\"string\">&#x27;5.1.46&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    testCompile <span class=\"string\">&quot;org.codehaus.groovy:groovy-test:$groovy_version&quot;</span></span><br><span class=\"line\">    testCompile(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"程序入口Application\"><a href=\"#程序入口Application\" class=\"headerlink\" title=\"程序入口Application\"></a>程序入口Application</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.sql.Sql</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.builder.SpringApplicationBuilder</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.support.SpringBootServletInitializer</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title function_\">configure</span><span class=\"params\">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sources(Application.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;app.datasource&quot;)</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceBuilder.create().type(DruidDataSource.class).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    Sql <span class=\"title function_\">db</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sql</span>(dataSource())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件application-yml\"><a href=\"#配置文件application-yml\" class=\"headerlink\" title=\"配置文件application.yml\"></a>配置文件application.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">app:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">pool-size:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用上Sql的Controller\"><a href=\"#用上Sql的Controller\" class=\"headerlink\" title=\"用上Sql的Controller\"></a>用上Sql的Controller</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.controller</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.sql.Sql</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/open&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OpenController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Sql db</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    def <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        db.firstRow(<span class=\"string\">&quot;select 1)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这套方案用上了<code>Spring</code>，也用上了数据库连接池<code>druid</code>，所以项目整体是足够健壮的。如果你的项目本来就是基于<code>Spring</code>技术栈的，那我强烈推荐你试试结合<code>Groovy</code>的这套打法。可以大幅提升开发效率。<br><strong>亲自跑一下<code>Groovy</code>项目，用用她提供的<code>SQL</code>类，我想你会爱上她的</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p>某种情况下，其实就想用<code>Spring Boot</code>提供的那种即开即用的开发体验，但是我真的对<code>Spring</code>保姆式的一揽子工程不怎么感冒。尤其是数据库<code>JDBC</code>这块。常见的<code>Java</code>系里提到的技术，我真的一个都不想用，我最钟爱的数据库类库其实就是<code>groovy.sql.SQL</code>，简单而强大，配合<code>Groovy</code>之后，再也没有繁琐的<code>Java Bean</code>和无边无际的<code>get</code>、<code>set</code>。<br>想了解更多<code>groovy.sql.SQL</code>欢迎查看官方文档：<a href=\"http://groovy-lang.org/databases.html\">http://groovy-lang.org/databases.html</a><br>今天我们还是着重说一下，怎么在<code>Spring Boot</code>的框架下融入<code>groovy.sql.SQL</code>，话不多说，上代码：</p>\n<h4 id=\"gradle-build\"><a href=\"#gradle-build\" class=\"headerlink\" title=\"gradle.build\"></a>gradle.build</h4><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    id <span class=\"string\">&#x27;org.springframework.boot&#x27;</span> version <span class=\"string\">&#x27;1.5.15.RELEASE&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;war&#x27;</span></span><br><span class=\"line\">    id <span class=\"string\">&#x27;groovy&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"string\">&#x27;com.aruistar&#x27;</span></span><br><span class=\"line\">version <span class=\"string\">&#x27;1.0-SNAPSHOT&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">    groovy_version = <span class=\"string\">&quot;2.5.2&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">sourceCompatibility</span> = <span class=\"number\">1.8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span>(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">//    providedRuntime(&quot;org.springframework.boot:spring-boot-starter-tomcat&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&quot;org.codehaus.groovy:groovy:$groovy_version&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&quot;org.codehaus.groovy:groovy-sql:$groovy_version&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&quot;org.codehaus.groovy:groovy-json:$groovy_version&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;com.alibaba&#x27;</span>, name: <span class=\"string\">&#x27;druid&#x27;</span>, version: <span class=\"string\">&#x27;1.1.10&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">group</span>: <span class=\"string\">&#x27;mysql&#x27;</span>, name: <span class=\"string\">&#x27;mysql-connector-java&#x27;</span>, version: <span class=\"string\">&#x27;5.1.46&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    testCompile <span class=\"string\">&quot;org.codehaus.groovy:groovy-test:$groovy_version&quot;</span></span><br><span class=\"line\">    testCompile(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"程序入口Application\"><a href=\"#程序入口Application\" class=\"headerlink\" title=\"程序入口Application\"></a>程序入口Application</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.druid.pool.DruidDataSource</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.sql.Sql</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.SpringApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.SpringBootApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.builder.SpringApplicationBuilder</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.context.properties.ConfigurationProperties</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.support.SpringBootServletInitializer</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SpringBootServletInitializer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        SpringApplication.run(Application.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SpringApplicationBuilder <span class=\"title function_\">configure</span><span class=\"params\">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> builder.sources(Application.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(&quot;app.datasource&quot;)</span></span><br><span class=\"line\">    DataSource <span class=\"title function_\">dataSource</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DataSourceBuilder.create().type(DruidDataSource.class).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    Sql <span class=\"title function_\">db</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sql</span>(dataSource())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"配置文件application-yml\"><a href=\"#配置文件application-yml\" class=\"headerlink\" title=\"配置文件application.yml\"></a>配置文件application.yml</h4><figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">app:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://127.0.0.1:3306/test</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">pool-size:</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"用上Sql的Controller\"><a href=\"#用上Sql的Controller\" class=\"headerlink\" title=\"用上Sql的Controller\"></a>用上Sql的Controller</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.controller</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.sql.Sql</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/open&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OpenController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    Sql db</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    def <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        db.firstRow(<span class=\"string\">&quot;select 1)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">      </span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>这套方案用上了<code>Spring</code>，也用上了数据库连接池<code>druid</code>，所以项目整体是足够健壮的。如果你的项目本来就是基于<code>Spring</code>技术栈的，那我强烈推荐你试试结合<code>Groovy</code>的这套打法。可以大幅提升开发效率。<br><strong>亲自跑一下<code>Groovy</code>项目，用用她提供的<code>SQL</code>类，我想你会爱上她的</strong></p>\n"},{"title":"基于Geb的京东抢券","date":"2018-08-05T00:33:13.000Z","_content":"前面介绍过[Geb](http://gebish.org)是个好东西，可以用它实现web前端的自动化测试，自然用来解放双手，抢个券什么的不在话下。\n这次我们主要瞄准京东。最佳的实验场所是京东的移动web版，即[https://m.jd.com/](https://m.jd.com/)，大概分为以下几个步骤：\n1. 打开京东首页\n2. 点击登录按钮\n3. 填写登录用户名密码并登录\n4. 调整到需要抢券的页面\n5. 找到抢券按钮开抢\n\n下面贴一个，618某活动的抢券代码（现在已经下线了），仅供参考。\n```\n static def checkin(String username, String password) {\n\n\n        FirefoxBinary firefoxBinary = new FirefoxBinary();\n//        firefoxBinary.addCommandLineOptions(\"--headless\");\n        FirefoxOptions firefoxOptions = new FirefoxOptions();\n        firefoxOptions.setBinary(firefoxBinary);\n\n        def browser = new Browser(driver: new FirefoxDriver(firefoxOptions))\n\n        browser.with {\n\n            go \"https://m.jd.com\"\n\n            $(\".jd-search-icon-login\").click()\n\n            $(\"#username\").value(username)\n            $(\"#password\").value(password)\n\n            $(\"#loginBtn\").click()\n\n            sleep(5000)\n\n            go \"https://pro.m.jd.com/mall/active/qKRVTAJL7v93L71TkJebPv5GJnE/index.html\"\n\n\n            $(\"#m_1_14\").children().each {\n                it.click()\n                sleep(500)\n            }\n\n\n        }\n    }\n```\n补充几个说明：\n1. 我用的是`Firefox`浏览器。所以需要电脑事先装好该浏览器。\n2. 只装浏览器还不够，还需要相应的`WebDriver`驱动。如果找不到程序会报错的，可以根据错误提示下载该驱动。然后要把本地驱动文件地址设置一下，方便`Geb`识别，代码如下` System.setProperty(\"webdriver.gecko.driver\", \"/root/geckodriver\")`\n3. **无节目的Linux服务器可不可用呢？答案是可以**，在安装完上面两样东西之后，只需要代码里添加`firefoxBinary.addCommandLineOptions(\"--headless\");`就可以启动无界面的`Firefox`了\n\n#### 友情提醒\n工具抢券也好、代码抢券也好，都是一种对普通消费者不公平的存在。建议学会之后，自用练手即可，切勿以此牟利。","source":"_posts/grab_a_ticket_use_geb.md","raw":"---\ntitle: 基于Geb的京东抢券\ndate: 2018-08-05 08:33:13\ncategories: 程序人生\ntags:\n    - Geb\n---\n前面介绍过[Geb](http://gebish.org)是个好东西，可以用它实现web前端的自动化测试，自然用来解放双手，抢个券什么的不在话下。\n这次我们主要瞄准京东。最佳的实验场所是京东的移动web版，即[https://m.jd.com/](https://m.jd.com/)，大概分为以下几个步骤：\n1. 打开京东首页\n2. 点击登录按钮\n3. 填写登录用户名密码并登录\n4. 调整到需要抢券的页面\n5. 找到抢券按钮开抢\n\n下面贴一个，618某活动的抢券代码（现在已经下线了），仅供参考。\n```\n static def checkin(String username, String password) {\n\n\n        FirefoxBinary firefoxBinary = new FirefoxBinary();\n//        firefoxBinary.addCommandLineOptions(\"--headless\");\n        FirefoxOptions firefoxOptions = new FirefoxOptions();\n        firefoxOptions.setBinary(firefoxBinary);\n\n        def browser = new Browser(driver: new FirefoxDriver(firefoxOptions))\n\n        browser.with {\n\n            go \"https://m.jd.com\"\n\n            $(\".jd-search-icon-login\").click()\n\n            $(\"#username\").value(username)\n            $(\"#password\").value(password)\n\n            $(\"#loginBtn\").click()\n\n            sleep(5000)\n\n            go \"https://pro.m.jd.com/mall/active/qKRVTAJL7v93L71TkJebPv5GJnE/index.html\"\n\n\n            $(\"#m_1_14\").children().each {\n                it.click()\n                sleep(500)\n            }\n\n\n        }\n    }\n```\n补充几个说明：\n1. 我用的是`Firefox`浏览器。所以需要电脑事先装好该浏览器。\n2. 只装浏览器还不够，还需要相应的`WebDriver`驱动。如果找不到程序会报错的，可以根据错误提示下载该驱动。然后要把本地驱动文件地址设置一下，方便`Geb`识别，代码如下` System.setProperty(\"webdriver.gecko.driver\", \"/root/geckodriver\")`\n3. **无节目的Linux服务器可不可用呢？答案是可以**，在安装完上面两样东西之后，只需要代码里添加`firefoxBinary.addCommandLineOptions(\"--headless\");`就可以启动无界面的`Firefox`了\n\n#### 友情提醒\n工具抢券也好、代码抢券也好，都是一种对普通消费者不公平的存在。建议学会之后，自用练手即可，切勿以此牟利。","slug":"grab_a_ticket_use_geb","published":1,"updated":"2018-08-05T00:51:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmn003cy0mzalrubzep","content":"<p>前面介绍过<a href=\"http://gebish.org/\">Geb</a>是个好东西，可以用它实现web前端的自动化测试，自然用来解放双手，抢个券什么的不在话下。<br>这次我们主要瞄准京东。最佳的实验场所是京东的移动web版，即<a href=\"https://m.jd.com/\">https://m.jd.com/</a>，大概分为以下几个步骤：</p>\n<ol>\n<li>打开京东首页</li>\n<li>点击登录按钮</li>\n<li>填写登录用户名密码并登录</li>\n<li>调整到需要抢券的页面</li>\n<li>找到抢券按钮开抢</li>\n</ol>\n<p>下面贴一个，618某活动的抢券代码（现在已经下线了），仅供参考。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> static def checkin(String username, String password) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        FirefoxBinary firefoxBinary = <span class=\"keyword\">new</span> <span class=\"constructor\">FirefoxBinary()</span>;</span><br><span class=\"line\"><span class=\"comment\">//        firefoxBinary.addCommandLineOptions(&quot;--headless&quot;);</span></span><br><span class=\"line\">        FirefoxOptions firefoxOptions = <span class=\"keyword\">new</span> <span class=\"constructor\">FirefoxOptions()</span>;</span><br><span class=\"line\">        firefoxOptions.set<span class=\"constructor\">Binary(<span class=\"params\">firefoxBinary</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        def browser = <span class=\"keyword\">new</span> <span class=\"constructor\">Browser(<span class=\"params\">driver</span>: <span class=\"params\">new</span> FirefoxDriver(<span class=\"params\">firefoxOptions</span>)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        browser.<span class=\"keyword\">with</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            go <span class=\"string\">&quot;https://m.jd.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;.jd-search-icon-login&quot;</span>)</span>.click<span class=\"literal\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#username&quot;</span>)</span>.value(username)</span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#password&quot;</span>)</span>.value(password)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#loginBtn&quot;</span>)</span>.click<span class=\"literal\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">            sleep(<span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            go <span class=\"string\">&quot;https://pro.m.jd.com/mall/active/qKRVTAJL7v93L71TkJebPv5GJnE/index.html&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#m_1_14&quot;</span>)</span>.children<span class=\"literal\">()</span>.each &#123;</span><br><span class=\"line\">                it.click<span class=\"literal\">()</span></span><br><span class=\"line\">                sleep(<span class=\"number\">500</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>补充几个说明：</p>\n<ol>\n<li>我用的是<code>Firefox</code>浏览器。所以需要电脑事先装好该浏览器。</li>\n<li>只装浏览器还不够，还需要相应的<code>WebDriver</code>驱动。如果找不到程序会报错的，可以根据错误提示下载该驱动。然后要把本地驱动文件地址设置一下，方便<code>Geb</code>识别，代码如下<code> System.setProperty(&quot;webdriver.gecko.driver&quot;, &quot;/root/geckodriver&quot;)</code></li>\n<li><strong>无节目的Linux服务器可不可用呢？答案是可以</strong>，在安装完上面两样东西之后，只需要代码里添加<code>firefoxBinary.addCommandLineOptions(&quot;--headless&quot;);</code>就可以启动无界面的<code>Firefox</code>了</li>\n</ol>\n<h4 id=\"友情提醒\"><a href=\"#友情提醒\" class=\"headerlink\" title=\"友情提醒\"></a>友情提醒</h4><p>工具抢券也好、代码抢券也好，都是一种对普通消费者不公平的存在。建议学会之后，自用练手即可，切勿以此牟利。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前面介绍过<a href=\"http://gebish.org/\">Geb</a>是个好东西，可以用它实现web前端的自动化测试，自然用来解放双手，抢个券什么的不在话下。<br>这次我们主要瞄准京东。最佳的实验场所是京东的移动web版，即<a href=\"https://m.jd.com/\">https://m.jd.com/</a>，大概分为以下几个步骤：</p>\n<ol>\n<li>打开京东首页</li>\n<li>点击登录按钮</li>\n<li>填写登录用户名密码并登录</li>\n<li>调整到需要抢券的页面</li>\n<li>找到抢券按钮开抢</li>\n</ol>\n<p>下面贴一个，618某活动的抢券代码（现在已经下线了），仅供参考。</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"> static def checkin(String username, String password) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        FirefoxBinary firefoxBinary = <span class=\"keyword\">new</span> <span class=\"constructor\">FirefoxBinary()</span>;</span><br><span class=\"line\"><span class=\"comment\">//        firefoxBinary.addCommandLineOptions(&quot;--headless&quot;);</span></span><br><span class=\"line\">        FirefoxOptions firefoxOptions = <span class=\"keyword\">new</span> <span class=\"constructor\">FirefoxOptions()</span>;</span><br><span class=\"line\">        firefoxOptions.set<span class=\"constructor\">Binary(<span class=\"params\">firefoxBinary</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        def browser = <span class=\"keyword\">new</span> <span class=\"constructor\">Browser(<span class=\"params\">driver</span>: <span class=\"params\">new</span> FirefoxDriver(<span class=\"params\">firefoxOptions</span>)</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        browser.<span class=\"keyword\">with</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            go <span class=\"string\">&quot;https://m.jd.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;.jd-search-icon-login&quot;</span>)</span>.click<span class=\"literal\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#username&quot;</span>)</span>.value(username)</span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#password&quot;</span>)</span>.value(password)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#loginBtn&quot;</span>)</span>.click<span class=\"literal\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\">            sleep(<span class=\"number\">5000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            go <span class=\"string\">&quot;https://pro.m.jd.com/mall/active/qKRVTAJL7v93L71TkJebPv5GJnE/index.html&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"constructor\">$(<span class=\"string\">&quot;#m_1_14&quot;</span>)</span>.children<span class=\"literal\">()</span>.each &#123;</span><br><span class=\"line\">                it.click<span class=\"literal\">()</span></span><br><span class=\"line\">                sleep(<span class=\"number\">500</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>补充几个说明：</p>\n<ol>\n<li>我用的是<code>Firefox</code>浏览器。所以需要电脑事先装好该浏览器。</li>\n<li>只装浏览器还不够，还需要相应的<code>WebDriver</code>驱动。如果找不到程序会报错的，可以根据错误提示下载该驱动。然后要把本地驱动文件地址设置一下，方便<code>Geb</code>识别，代码如下<code> System.setProperty(&quot;webdriver.gecko.driver&quot;, &quot;/root/geckodriver&quot;)</code></li>\n<li><strong>无节目的Linux服务器可不可用呢？答案是可以</strong>，在安装完上面两样东西之后，只需要代码里添加<code>firefoxBinary.addCommandLineOptions(&quot;--headless&quot;);</code>就可以启动无界面的<code>Firefox</code>了</li>\n</ol>\n<h4 id=\"友情提醒\"><a href=\"#友情提醒\" class=\"headerlink\" title=\"友情提醒\"></a>友情提醒</h4><p>工具抢券也好、代码抢券也好，都是一种对普通消费者不公平的存在。建议学会之后，自用练手即可，切勿以此牟利。</p>\n"},{"title":"groovy中的正则使用","date":"2018-08-21T02:24:14.000Z","_content":"#### 判断是否与正则匹配\n```\ndef res = \"522300000000\" ==~ /\\d*0{8}$/\n// res is true\n```\n\n#### 从字符串中找到匹配的内容\n```\ndef res = \"hello110,world\" =~ /\\d+/\nprintln(res[0])\n//res[0] is 110\n```","source":"_posts/groovy_regular.md","raw":"---\ntitle: groovy中的正则使用\ndate: 2018-08-21 10:24:14\ncategories: 程序人生\ntags:\n    - groovy\n---\n#### 判断是否与正则匹配\n```\ndef res = \"522300000000\" ==~ /\\d*0{8}$/\n// res is true\n```\n\n#### 从字符串中找到匹配的内容\n```\ndef res = \"hello110,world\" =~ /\\d+/\nprintln(res[0])\n//res[0] is 110\n```","slug":"groovy_regular","published":1,"updated":"2018-08-21T02:52:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmo003fy0mz22rzeaa8","content":"<h4 id=\"判断是否与正则匹配\"><a href=\"#判断是否与正则匹配\" class=\"headerlink\" title=\"判断是否与正则匹配\"></a>判断是否与正则匹配</h4><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">def res = <span class=\"string\">&quot;522300000000&quot;</span> ==~ <span class=\"regexp\">/\\d*0&#123;8&#125;$/</span></span><br><span class=\"line\"><span class=\"regexp\">//</span> res is true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从字符串中找到匹配的内容\"><a href=\"#从字符串中找到匹配的内容\" class=\"headerlink\" title=\"从字符串中找到匹配的内容\"></a>从字符串中找到匹配的内容</h4><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> res = <span class=\"string\">&quot;hello110,world&quot;</span> =~ <span class=\"regexp\">/\\d+/</span></span><br><span class=\"line\"><span class=\"keyword\">println</span>(res[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\">//res[0] is 110</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"判断是否与正则匹配\"><a href=\"#判断是否与正则匹配\" class=\"headerlink\" title=\"判断是否与正则匹配\"></a>判断是否与正则匹配</h4><figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">def res = <span class=\"string\">&quot;522300000000&quot;</span> ==~ <span class=\"regexp\">/\\d*0&#123;8&#125;$/</span></span><br><span class=\"line\"><span class=\"regexp\">//</span> res is true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"从字符串中找到匹配的内容\"><a href=\"#从字符串中找到匹配的内容\" class=\"headerlink\" title=\"从字符串中找到匹配的内容\"></a>从字符串中找到匹配的内容</h4><figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> res = <span class=\"string\">&quot;hello110,world&quot;</span> =~ <span class=\"regexp\">/\\d+/</span></span><br><span class=\"line\"><span class=\"keyword\">println</span>(res[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"comment\">//res[0] is 110</span></span><br></pre></td></tr></table></figure>"},{"title":"Groovy迭代器中的return陷阱","date":"2018-09-10T07:04:53.000Z","_content":"`groovy`从不会让人失望，如果有，那就是接下来我要说的这种情况：\n```\ndef list = [1, 2, 3, 4, 5, 6, 7]\ndef test(List list) {\n    list.each {\n        if (it > 3) {\n            return it\n        }\n    }\n}\n\nprintln test(list)\n```\n我们期望的结果`4`，也就是找到第一个比3大的数字就返回了，然而事与愿违，得到的结果是这样\n```\n[1, 2, 3, 4, 5, 6, 7]\n```\n整个list都被打印了出来，其实`test`方法最终返回的东西是`list.each{...}`，而且`.each`方法的返回值是`the self List`，所以最后把`list`又原封不动打印了一遍也就不足为奇了。\n那我们写的那行`return`干吗了，答案是，它既不会是方法返回，也不会使`each closure`返回，它在这里的作用跟`continue`类似，仅仅是让它后面的代码不在这次循环执行，仅此而已。\n\n#### 那怎么才能打断一个`each`，然后让上面的方法提前`return`呢？\n**答案是，不能用`each`，得用`find`或者`any`之类的，**有明显截断语义的迭代器。这里还是首推`find`，因为`any`返回值是`boolean`，能帮我们截断迭代，但是不适用于找东西的场景。\n\n用`find`改造一下代码，如下\n```\ndef test(List list) {\n    return list.find {\n        if (it > 3) {\n            return it\n        }\n    }\n}\n```\n由于`groovy`方法中的`return`是可以省略的，更进一步，就写成这样\n```\ndef test(List list) {\n   list.find {\n        if (it > 3) {\n            return it\n        }\n    }\n}\n```\n当然基于`find`的先天特性，那句`return it`也可以省略成这样\n```\ndef test(List list) {\n   list.find { it > 3 }\n}\n```\n再次之前执行`println test(list)`，得到结果`4`，一切归于完美了。\n\n### 题外话\n这里不得不说下`Kotlin`，它应付上面描述的场景就非常得心应手了。首先，默认情况下`return`就是代表让一个方法返回，这符合一个程序员的直觉。\n在不想扩大`return`的打击范围，而仅仅只想结束一个`lambda`的时候，可以使用`标签返回`，类似这样\n```\nlist.forEach{\n    if (it > 3) {\n        return@forEach\n    }\n}\n```\n如果上面的语法糖，让你觉得有点故弄玄虚了，还可以使用更容易理解的匿名函数，就像这样\n```\nlist.forEach(fun(it){\n    if (it > 3) {\n        return\n    }\n})\n```\n\n**我是非常喜欢`groovy`的，她已经陪伴我8个年头了，几乎我手上所有的项目都离不开`groovy`的身影。我甚至用她写过`Android`程序。不过不得不承认，`Kotlin`作为后起之秀，的确在很多方向上更进一步，考虑的场景也更为全面。期待`groovy`的`3.0`能够发力一波。**","source":"_posts/groovy_return_in_each.md","raw":"---\ntitle: Groovy迭代器中的return陷阱\ndate: 2018-09-10 15:04:53\ncategories: 程序人生\ntags:\n    - groovy\n---\n`groovy`从不会让人失望，如果有，那就是接下来我要说的这种情况：\n```\ndef list = [1, 2, 3, 4, 5, 6, 7]\ndef test(List list) {\n    list.each {\n        if (it > 3) {\n            return it\n        }\n    }\n}\n\nprintln test(list)\n```\n我们期望的结果`4`，也就是找到第一个比3大的数字就返回了，然而事与愿违，得到的结果是这样\n```\n[1, 2, 3, 4, 5, 6, 7]\n```\n整个list都被打印了出来，其实`test`方法最终返回的东西是`list.each{...}`，而且`.each`方法的返回值是`the self List`，所以最后把`list`又原封不动打印了一遍也就不足为奇了。\n那我们写的那行`return`干吗了，答案是，它既不会是方法返回，也不会使`each closure`返回，它在这里的作用跟`continue`类似，仅仅是让它后面的代码不在这次循环执行，仅此而已。\n\n#### 那怎么才能打断一个`each`，然后让上面的方法提前`return`呢？\n**答案是，不能用`each`，得用`find`或者`any`之类的，**有明显截断语义的迭代器。这里还是首推`find`，因为`any`返回值是`boolean`，能帮我们截断迭代，但是不适用于找东西的场景。\n\n用`find`改造一下代码，如下\n```\ndef test(List list) {\n    return list.find {\n        if (it > 3) {\n            return it\n        }\n    }\n}\n```\n由于`groovy`方法中的`return`是可以省略的，更进一步，就写成这样\n```\ndef test(List list) {\n   list.find {\n        if (it > 3) {\n            return it\n        }\n    }\n}\n```\n当然基于`find`的先天特性，那句`return it`也可以省略成这样\n```\ndef test(List list) {\n   list.find { it > 3 }\n}\n```\n再次之前执行`println test(list)`，得到结果`4`，一切归于完美了。\n\n### 题外话\n这里不得不说下`Kotlin`，它应付上面描述的场景就非常得心应手了。首先，默认情况下`return`就是代表让一个方法返回，这符合一个程序员的直觉。\n在不想扩大`return`的打击范围，而仅仅只想结束一个`lambda`的时候，可以使用`标签返回`，类似这样\n```\nlist.forEach{\n    if (it > 3) {\n        return@forEach\n    }\n}\n```\n如果上面的语法糖，让你觉得有点故弄玄虚了，还可以使用更容易理解的匿名函数，就像这样\n```\nlist.forEach(fun(it){\n    if (it > 3) {\n        return\n    }\n})\n```\n\n**我是非常喜欢`groovy`的，她已经陪伴我8个年头了，几乎我手上所有的项目都离不开`groovy`的身影。我甚至用她写过`Android`程序。不过不得不承认，`Kotlin`作为后起之秀，的确在很多方向上更进一步，考虑的场景也更为全面。期待`groovy`的`3.0`能够发力一波。**","slug":"groovy_return_in_each","published":1,"updated":"2018-09-10T08:48:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmo003jy0mzeanu3glh","content":"<p><code>groovy</code>从不会让人失望，如果有，那就是接下来我要说的这种情况：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> test(List list) &#123;</span><br><span class=\"line\">    list.<span class=\"keyword\">each</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> it</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">println</span> test(list)</span><br></pre></td></tr></table></figure>\n<p>我们期望的结果<code>4</code>，也就是找到第一个比3大的数字就返回了，然而事与愿违，得到的结果是这样</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<p>整个list都被打印了出来，其实<code>test</code>方法最终返回的东西是<code>list.each&#123;...&#125;</code>，而且<code>.each</code>方法的返回值是<code>the self List</code>，所以最后把<code>list</code>又原封不动打印了一遍也就不足为奇了。<br>那我们写的那行<code>return</code>干吗了，答案是，它既不会是方法返回，也不会使<code>each closure</code>返回，它在这里的作用跟<code>continue</code>类似，仅仅是让它后面的代码不在这次循环执行，仅此而已。</p>\n<h4 id=\"那怎么才能打断一个each，然后让上面的方法提前return呢？\"><a href=\"#那怎么才能打断一个each，然后让上面的方法提前return呢？\" class=\"headerlink\" title=\"那怎么才能打断一个each，然后让上面的方法提前return呢？\"></a>那怎么才能打断一个<code>each</code>，然后让上面的方法提前<code>return</code>呢？</h4><p><strong>答案是，不能用<code>each</code>，得用<code>find</code>或者<code>any</code>之类的，</strong>有明显截断语义的迭代器。这里还是首推<code>find</code>，因为<code>any</code>返回值是<code>boolean</code>，能帮我们截断迭代，但是不适用于找东西的场景。</p>\n<p>用<code>find</code>改造一下代码，如下</p>\n<figure class=\"highlight wren\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">List</span> <span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">list</span>.<span class=\"property\">find</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">it</span> <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">it</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于<code>groovy</code>方法中的<code>return</code>是可以省略的，更进一步，就写成这样</p>\n<figure class=\"highlight wren\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">List</span> <span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable\">list</span>.<span class=\"property\">find</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">it</span> <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">it</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然基于<code>find</code>的先天特性，那句<code>return it</code>也可以省略成这样</p>\n<figure class=\"highlight wren\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">List</span> <span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable\">list</span>.<span class=\"property\">find</span> &#123; <span class=\"variable\">it</span> <span class=\"operator\">&gt;</span> <span class=\"number\">3</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次之前执行<code>println test(list)</code>，得到结果<code>4</code>，一切归于完美了。</p>\n<h3 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h3><p>这里不得不说下<code>Kotlin</code>，它应付上面描述的场景就非常得心应手了。首先，默认情况下<code>return</code>就是代表让一个方法返回，这符合一个程序员的直觉。<br>在不想扩大<code>return</code>的打击范围，而仅仅只想结束一个<code>lambda</code>的时候，可以使用<code>标签返回</code>，类似这样</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>.<span class=\"keyword\">forEach</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>@<span class=\"keyword\">forEach</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果上面的语法糖，让你觉得有点故弄玄虚了，还可以使用更容易理解的匿名函数，就像这样</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(it)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>我是非常喜欢<code>groovy</code>的，她已经陪伴我8个年头了，几乎我手上所有的项目都离不开<code>groovy</code>的身影。我甚至用她写过<code>Android</code>程序。不过不得不承认，<code>Kotlin</code>作为后起之秀，的确在很多方向上更进一步，考虑的场景也更为全面。期待<code>groovy</code>的<code>3.0</code>能够发力一波。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>groovy</code>从不会让人失望，如果有，那就是接下来我要说的这种情况：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> test(List list) &#123;</span><br><span class=\"line\">    list.<span class=\"keyword\">each</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (it &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> it</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">println</span> test(list)</span><br></pre></td></tr></table></figure>\n<p>我们期望的结果<code>4</code>，也就是找到第一个比3大的数字就返回了，然而事与愿违，得到的结果是这样</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">[1, 2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n<p>整个list都被打印了出来，其实<code>test</code>方法最终返回的东西是<code>list.each&#123;...&#125;</code>，而且<code>.each</code>方法的返回值是<code>the self List</code>，所以最后把<code>list</code>又原封不动打印了一遍也就不足为奇了。<br>那我们写的那行<code>return</code>干吗了，答案是，它既不会是方法返回，也不会使<code>each closure</code>返回，它在这里的作用跟<code>continue</code>类似，仅仅是让它后面的代码不在这次循环执行，仅此而已。</p>\n<h4 id=\"那怎么才能打断一个each，然后让上面的方法提前return呢？\"><a href=\"#那怎么才能打断一个each，然后让上面的方法提前return呢？\" class=\"headerlink\" title=\"那怎么才能打断一个each，然后让上面的方法提前return呢？\"></a>那怎么才能打断一个<code>each</code>，然后让上面的方法提前<code>return</code>呢？</h4><p><strong>答案是，不能用<code>each</code>，得用<code>find</code>或者<code>any</code>之类的，</strong>有明显截断语义的迭代器。这里还是首推<code>find</code>，因为<code>any</code>返回值是<code>boolean</code>，能帮我们截断迭代，但是不适用于找东西的场景。</p>\n<p>用<code>find</code>改造一下代码，如下</p>\n<figure class=\"highlight wren\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">List</span> <span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable\">list</span>.<span class=\"property\">find</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">it</span> <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">it</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于<code>groovy</code>方法中的<code>return</code>是可以省略的，更进一步，就写成这样</p>\n<figure class=\"highlight wren\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">List</span> <span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable\">list</span>.<span class=\"property\">find</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable\">it</span> <span class=\"operator\">&gt;</span> <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable\">it</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然基于<code>find</code>的先天特性，那句<code>return it</code>也可以省略成这样</p>\n<figure class=\"highlight wren\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">def</span> <span class=\"title function_\">test</span>(<span class=\"params\">List</span> <span class=\"params\">list</span>) &#123;</span><br><span class=\"line\">   <span class=\"variable\">list</span>.<span class=\"property\">find</span> &#123; <span class=\"variable\">it</span> <span class=\"operator\">&gt;</span> <span class=\"number\">3</span> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再次之前执行<code>println test(list)</code>，得到结果<code>4</code>，一切归于完美了。</p>\n<h3 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h3><p>这里不得不说下<code>Kotlin</code>，它应付上面描述的场景就非常得心应手了。首先，默认情况下<code>return</code>就是代表让一个方法返回，这符合一个程序员的直觉。<br>在不想扩大<code>return</code>的打击范围，而仅仅只想结束一个<code>lambda</code>的时候，可以使用<code>标签返回</code>，类似这样</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">list</span>.<span class=\"keyword\">forEach</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>@<span class=\"keyword\">forEach</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果上面的语法糖，让你觉得有点故弄玄虚了，还可以使用更容易理解的匿名函数，就像这样</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">list.forEach(<span class=\"function\"><span class=\"title\">fun</span><span class=\"params\">(it)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it &gt; <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><strong>我是非常喜欢<code>groovy</code>的，她已经陪伴我8个年头了，几乎我手上所有的项目都离不开<code>groovy</code>的身影。我甚至用她写过<code>Android</code>程序。不过不得不承认，<code>Kotlin</code>作为后起之秀，的确在很多方向上更进一步，考虑的场景也更为全面。期待<code>groovy</code>的<code>3.0</code>能够发力一波。</strong></p>\n"},{"title":"用groovy实现根据规则校验单据数据","date":"2019-02-20T06:38:04.000Z","_content":"单据字段校验，在任何管理信息系统中都是普通得不能再普通的问题。通常我们的都会选择在前端以及后端各实现一遍。\n前端实现，方便用户体验；后端实现，确保数据健康。\n但是总觉得同样的业务实现两遍，真的不符合直觉。我的想法是，把校验规则抽象出来，通过公共方法来处理单据校验问题。做到一套规则，两处判断。减少业务开发人员的重复劳动。\n比如规则是这样的\n```\n[\n    {\n        \"target\": \"v_name\",\n        \"expression\": \"notBlank(v_name)\",\n        \"tip\": \"姓名必填\"\n    },\n    {\n        \"target\": [\n            \"v_password\",\n            \"v_password_twice\"\n        ],\n        \"expression\": \"v_password == v_password_twice\",\n        \"tip\": \"两次密码输入不一致\"\n    }\n]\n```\n这里面`target`是为了跟前端交互，在规则验证失败时给前端UI标红框使用的；`tip`是出错信息提示。只有`expression`才是核心业务——能返回`boolean`的表达式。\n怎么才能驱动表达式执行呢，这在有动态特性的`groovy`中简直是小菜一碟。最简单的：\n```\nassert true == Eval.me(\"2>1\")\n```\n轻松通过，但是注意我上面的`v_password == v_password_twice`这就比较棘手了，要从一个上下文中获取字段数据，再执行表达式，\n这里假设我们准备的数据是：\n```\ndef map = [\n        \"v_name\"          : '',\n        \"v_password\"      : \"abc\",\n        \"v_password_twice\": \"abc\",\n]\n```\n想让`groovy`动态脚本认识`map`，需要借助更强大的`GroovyShell`，代码如下：\n```\ndef sharedData = new Binding()\ndef shell = new GroovyShell(sharedData)\nmap.each { k, v ->\n    sharedData.setProperty(k, v)\n}\nassert true == shell.evaluate(\"v_password == v_password_twice\")\n```\n看起来`Binding`可以轻易地构造执行脚本的上下文环境，那能不能更进一步，传入一个方法呢，比如上文的`notBlank`，也很简单\n```\ndef notBlank = { String s ->\n    s != null && s.trim().length() > 0\n}\nsharedData.setProperty(\"notBlank\", notBlank)\nassert true == shell.evaluate(\"notBlank(v_name)\")\n```\n有了强大的`groovy`，就可以实现基于表达式的动态数据验证，没有占位符，没有字符串替换，还支持注入方法，真是即简单又强大。\n这是我最终实现的方法：\n```\n/**\n * 检查数据是否符合规则\n * @param rules 规则List\n * @param map 待校验数据\n * @return 不满足规则的rules\n */\nList check(List rules, def map) {\n    def sharedData = new Binding()\n    def shell = new GroovyShell(sharedData)\n    sharedData.setProperty(\"length\", { String s ->\n        if (s == null) return 0\n        return s.length()\n    })\n    shareData.setProperty(\"notBlank\",{ String s ->\n    s != null && s.trim().length() > 0\n    })\n    map.each { k, v ->\n        sharedData.setProperty(k, v)\n    }\n\n    rules.findAll { !shell.evaluate(it.expression) }\n}\n```\n完整测试代码参考：https://gist.github.com/aruis/d4a28b3cedfcc2a23a85ac67ca68adb7\n","source":"_posts/groovy_validating_form_on dynamic_rules.md","raw":"---\ntitle: 用groovy实现根据规则校验单据数据\ndate: 2019-02-20 14:38:04\ncategories: 程序人生\ntags:\n    - groovy\n---\n单据字段校验，在任何管理信息系统中都是普通得不能再普通的问题。通常我们的都会选择在前端以及后端各实现一遍。\n前端实现，方便用户体验；后端实现，确保数据健康。\n但是总觉得同样的业务实现两遍，真的不符合直觉。我的想法是，把校验规则抽象出来，通过公共方法来处理单据校验问题。做到一套规则，两处判断。减少业务开发人员的重复劳动。\n比如规则是这样的\n```\n[\n    {\n        \"target\": \"v_name\",\n        \"expression\": \"notBlank(v_name)\",\n        \"tip\": \"姓名必填\"\n    },\n    {\n        \"target\": [\n            \"v_password\",\n            \"v_password_twice\"\n        ],\n        \"expression\": \"v_password == v_password_twice\",\n        \"tip\": \"两次密码输入不一致\"\n    }\n]\n```\n这里面`target`是为了跟前端交互，在规则验证失败时给前端UI标红框使用的；`tip`是出错信息提示。只有`expression`才是核心业务——能返回`boolean`的表达式。\n怎么才能驱动表达式执行呢，这在有动态特性的`groovy`中简直是小菜一碟。最简单的：\n```\nassert true == Eval.me(\"2>1\")\n```\n轻松通过，但是注意我上面的`v_password == v_password_twice`这就比较棘手了，要从一个上下文中获取字段数据，再执行表达式，\n这里假设我们准备的数据是：\n```\ndef map = [\n        \"v_name\"          : '',\n        \"v_password\"      : \"abc\",\n        \"v_password_twice\": \"abc\",\n]\n```\n想让`groovy`动态脚本认识`map`，需要借助更强大的`GroovyShell`，代码如下：\n```\ndef sharedData = new Binding()\ndef shell = new GroovyShell(sharedData)\nmap.each { k, v ->\n    sharedData.setProperty(k, v)\n}\nassert true == shell.evaluate(\"v_password == v_password_twice\")\n```\n看起来`Binding`可以轻易地构造执行脚本的上下文环境，那能不能更进一步，传入一个方法呢，比如上文的`notBlank`，也很简单\n```\ndef notBlank = { String s ->\n    s != null && s.trim().length() > 0\n}\nsharedData.setProperty(\"notBlank\", notBlank)\nassert true == shell.evaluate(\"notBlank(v_name)\")\n```\n有了强大的`groovy`，就可以实现基于表达式的动态数据验证，没有占位符，没有字符串替换，还支持注入方法，真是即简单又强大。\n这是我最终实现的方法：\n```\n/**\n * 检查数据是否符合规则\n * @param rules 规则List\n * @param map 待校验数据\n * @return 不满足规则的rules\n */\nList check(List rules, def map) {\n    def sharedData = new Binding()\n    def shell = new GroovyShell(sharedData)\n    sharedData.setProperty(\"length\", { String s ->\n        if (s == null) return 0\n        return s.length()\n    })\n    shareData.setProperty(\"notBlank\",{ String s ->\n    s != null && s.trim().length() > 0\n    })\n    map.each { k, v ->\n        sharedData.setProperty(k, v)\n    }\n\n    rules.findAll { !shell.evaluate(it.expression) }\n}\n```\n完整测试代码参考：https://gist.github.com/aruis/d4a28b3cedfcc2a23a85ac67ca68adb7\n","slug":"groovy_validating_form_on dynamic_rules","published":1,"updated":"2019-02-20T09:22:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmo003my0mzeoro61yk","content":"<p>单据字段校验，在任何管理信息系统中都是普通得不能再普通的问题。通常我们的都会选择在前端以及后端各实现一遍。<br>前端实现，方便用户体验；后端实现，确保数据健康。<br>但是总觉得同样的业务实现两遍，真的不符合直觉。我的想法是，把校验规则抽象出来，通过公共方法来处理单据校验问题。做到一套规则，两处判断。减少业务开发人员的重复劳动。<br>比如规则是这样的</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;v_name&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: <span class=\"string\">&quot;notBlank(v_name)&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tip&quot;</span>: <span class=\"string\">&quot;姓名必填&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;v_password&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;v_password_twice&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: <span class=\"string\">&quot;v_password == v_password_twice&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tip&quot;</span>: <span class=\"string\">&quot;两次密码输入不一致&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这里面<code>target</code>是为了跟前端交互，在规则验证失败时给前端UI标红框使用的；<code>tip</code>是出错信息提示。只有<code>expression</code>才是核心业务——能返回<code>boolean</code>的表达式。<br>怎么才能驱动表达式执行呢，这在有动态特性的<code>groovy</code>中简直是小菜一碟。最简单的：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">true</span><span class=\"operator\"> == </span><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Eval</span>.</span></span>me(<span class=\"string\">&quot;2&gt;1&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>轻松通过，但是注意我上面的<code>v_password == v_password_twice</code>这就比较棘手了，要从一个上下文中获取字段数据，再执行表达式，<br>这里假设我们准备的数据是：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">def <span class=\"built_in\">map</span> = [</span><br><span class=\"line\">        <span class=\"string\">&quot;v_name&quot;</span>          : <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;v_password&quot;</span>      : <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;v_password_twice&quot;</span>: <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>想让<code>groovy</code>动态脚本认识<code>map</code>，需要借助更强大的<code>GroovyShell</code>，代码如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">def sharedData = <span class=\"keyword\">new</span> <span class=\"constructor\">Binding()</span></span><br><span class=\"line\">def shell = <span class=\"keyword\">new</span> <span class=\"constructor\">GroovyShell(<span class=\"params\">sharedData</span>)</span></span><br><span class=\"line\">map.each &#123; k, v -&gt;</span><br><span class=\"line\">    sharedData.set<span class=\"constructor\">Property(<span class=\"params\">k</span>, <span class=\"params\">v</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">true</span><span class=\"operator\"> == </span>shell.evaluate(<span class=\"string\">&quot;v_password == v_password_twice&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>看起来<code>Binding</code>可以轻易地构造执行脚本的上下文环境，那能不能更进一步，传入一个方法呢，比如上文的<code>notBlank</code>，也很简单</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">def notBlank = &#123; String s -&gt;</span><br><span class=\"line\">    s != <span class=\"keyword\">null</span> &amp;&amp; s.trim().length() &gt; <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sharedData.setProperty(&quot;notBlank&quot;, notBlank)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"keyword\">true</span> == shell.evaluate(&quot;notBlank(v_name)&quot;)</span><br></pre></td></tr></table></figure>\n<p>有了强大的<code>groovy</code>，就可以实现基于表达式的动态数据验证，没有占位符，没有字符串替换，还支持注入方法，真是即简单又强大。<br>这是我最终实现的方法：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查数据是否符合规则</span></span><br><span class=\"line\"><span class=\"comment\"> * @param rules 规则List</span></span><br><span class=\"line\"><span class=\"comment\"> * @param map 待校验数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 不满足规则的rules</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">List check(List rules, def <span class=\"keyword\">map</span>) &#123;</span><br><span class=\"line\">    def sharedData = <span class=\"keyword\">new</span> Binding()</span><br><span class=\"line\">    def shell = <span class=\"keyword\">new</span> GroovyShell(sharedData)</span><br><span class=\"line\">    sharedData.setProperty(<span class=\"string\">&quot;length&quot;</span>, &#123; <span class=\"built_in\">String</span> s -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    shareData.setProperty(<span class=\"string\">&quot;notBlank&quot;</span>,&#123; <span class=\"built_in\">String</span> s -&gt;</span><br><span class=\"line\">    s != <span class=\"literal\">null</span> &amp;&amp; s.trim().length() &gt; <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">map</span>.each &#123; k, v -&gt;</span><br><span class=\"line\">        sharedData.setProperty(k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    rules.findAll &#123; !shell.evaluate(<span class=\"literal\">it</span>.expression) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整测试代码参考：<a href=\"https://gist.github.com/aruis/d4a28b3cedfcc2a23a85ac67ca68adb7\">https://gist.github.com/aruis/d4a28b3cedfcc2a23a85ac67ca68adb7</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>单据字段校验，在任何管理信息系统中都是普通得不能再普通的问题。通常我们的都会选择在前端以及后端各实现一遍。<br>前端实现，方便用户体验；后端实现，确保数据健康。<br>但是总觉得同样的业务实现两遍，真的不符合直觉。我的想法是，把校验规则抽象出来，通过公共方法来处理单据校验问题。做到一套规则，两处判断。减少业务开发人员的重复劳动。<br>比如规则是这样的</p>\n<figure class=\"highlight prolog\"><table><tr><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: <span class=\"string\">&quot;v_name&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: <span class=\"string\">&quot;notBlank(v_name)&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tip&quot;</span>: <span class=\"string\">&quot;姓名必填&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;target&quot;</span>: [</span><br><span class=\"line\">            <span class=\"string\">&quot;v_password&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;v_password_twice&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;expression&quot;</span>: <span class=\"string\">&quot;v_password == v_password_twice&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;tip&quot;</span>: <span class=\"string\">&quot;两次密码输入不一致&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>这里面<code>target</code>是为了跟前端交互，在规则验证失败时给前端UI标红框使用的；<code>tip</code>是出错信息提示。只有<code>expression</code>才是核心业务——能返回<code>boolean</code>的表达式。<br>怎么才能驱动表达式执行呢，这在有动态特性的<code>groovy</code>中简直是小菜一碟。最简单的：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">true</span><span class=\"operator\"> == </span><span class=\"module-access\"><span class=\"module\"><span class=\"identifier\">Eval</span>.</span></span>me(<span class=\"string\">&quot;2&gt;1&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>轻松通过，但是注意我上面的<code>v_password == v_password_twice</code>这就比较棘手了，要从一个上下文中获取字段数据，再执行表达式，<br>这里假设我们准备的数据是：</p>\n<figure class=\"highlight arcade\"><table><tr><td class=\"code\"><pre><span class=\"line\">def <span class=\"built_in\">map</span> = [</span><br><span class=\"line\">        <span class=\"string\">&quot;v_name&quot;</span>          : <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;v_password&quot;</span>      : <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;v_password_twice&quot;</span>: <span class=\"string\">&quot;abc&quot;</span>,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>想让<code>groovy</code>动态脚本认识<code>map</code>，需要借助更强大的<code>GroovyShell</code>，代码如下：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">def sharedData = <span class=\"keyword\">new</span> <span class=\"constructor\">Binding()</span></span><br><span class=\"line\">def shell = <span class=\"keyword\">new</span> <span class=\"constructor\">GroovyShell(<span class=\"params\">sharedData</span>)</span></span><br><span class=\"line\">map.each &#123; k, v -&gt;</span><br><span class=\"line\">    sharedData.set<span class=\"constructor\">Property(<span class=\"params\">k</span>, <span class=\"params\">v</span>)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"literal\">true</span><span class=\"operator\"> == </span>shell.evaluate(<span class=\"string\">&quot;v_password == v_password_twice&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>看起来<code>Binding</code>可以轻易地构造执行脚本的上下文环境，那能不能更进一步，传入一个方法呢，比如上文的<code>notBlank</code>，也很简单</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">def notBlank = &#123; String s -&gt;</span><br><span class=\"line\">    s != <span class=\"keyword\">null</span> &amp;&amp; s.trim().length() &gt; <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sharedData.setProperty(&quot;notBlank&quot;, notBlank)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"keyword\">true</span> == shell.evaluate(&quot;notBlank(v_name)&quot;)</span><br></pre></td></tr></table></figure>\n<p>有了强大的<code>groovy</code>，就可以实现基于表达式的动态数据验证，没有占位符，没有字符串替换，还支持注入方法，真是即简单又强大。<br>这是我最终实现的方法：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 检查数据是否符合规则</span></span><br><span class=\"line\"><span class=\"comment\"> * @param rules 规则List</span></span><br><span class=\"line\"><span class=\"comment\"> * @param map 待校验数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @return 不满足规则的rules</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">List check(List rules, def <span class=\"keyword\">map</span>) &#123;</span><br><span class=\"line\">    def sharedData = <span class=\"keyword\">new</span> Binding()</span><br><span class=\"line\">    def shell = <span class=\"keyword\">new</span> GroovyShell(sharedData)</span><br><span class=\"line\">    sharedData.setProperty(<span class=\"string\">&quot;length&quot;</span>, &#123; <span class=\"built_in\">String</span> s -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> s.length()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    shareData.setProperty(<span class=\"string\">&quot;notBlank&quot;</span>,&#123; <span class=\"built_in\">String</span> s -&gt;</span><br><span class=\"line\">    s != <span class=\"literal\">null</span> &amp;&amp; s.trim().length() &gt; <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">map</span>.each &#123; k, v -&gt;</span><br><span class=\"line\">        sharedData.setProperty(k, v)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    rules.findAll &#123; !shell.evaluate(<span class=\"literal\">it</span>.expression) &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>完整测试代码参考：<a href=\"https://gist.github.com/aruis/d4a28b3cedfcc2a23a85ac67ca68adb7\">https://gist.github.com/aruis/d4a28b3cedfcc2a23a85ac67ca68adb7</a></p>\n"},{"title":"ios12中关闭app内购","date":"2018-09-17T03:09:13.000Z","_content":"之前版本的`IOS`中，是通过`访问限制`菜单，限制应用程序内购的。这个功能在`设置`->`通用`下可以找到。然后在`IOS12`中，我们已经找不到了。很显然，它被挪到了另一个地方。当然还是能找到的\n## 设置中，找到`屏幕使用时间`\n![IMG_7610](/media/IMG_7610.png)\n## 然后选择`内容和隐私访问限制`\n![IMG_7611](/media/IMG_7611.png)\n## 找到`iTunes Store与App Store购买项目`\n![IMG_7612](/media/IMG_7612.png)\n\n## 就可以管理是否允许内购了\n![IMG_7613](/media/IMG_7613.png)\n\n","source":"_posts/ios12_close_In-App_Purchase.md","raw":"---\ntitle: ios12中关闭app内购\ndate: 2018-09-17 11:09:13\ncategories: 工具技巧\ntags:\n    - ios\n---\n之前版本的`IOS`中，是通过`访问限制`菜单，限制应用程序内购的。这个功能在`设置`->`通用`下可以找到。然后在`IOS12`中，我们已经找不到了。很显然，它被挪到了另一个地方。当然还是能找到的\n## 设置中，找到`屏幕使用时间`\n![IMG_7610](/media/IMG_7610.png)\n## 然后选择`内容和隐私访问限制`\n![IMG_7611](/media/IMG_7611.png)\n## 找到`iTunes Store与App Store购买项目`\n![IMG_7612](/media/IMG_7612.png)\n\n## 就可以管理是否允许内购了\n![IMG_7613](/media/IMG_7613.png)\n\n","slug":"ios12_close_In-App_Purchase","published":1,"updated":"2018-09-17T03:29:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmp003qy0mzchuf9l90","content":"<p>之前版本的<code>IOS</code>中，是通过<code>访问限制</code>菜单，限制应用程序内购的。这个功能在<code>设置</code>-&gt;<code>通用</code>下可以找到。然后在<code>IOS12</code>中，我们已经找不到了。很显然，它被挪到了另一个地方。当然还是能找到的</p>\n<h2 id=\"设置中，找到屏幕使用时间\"><a href=\"#设置中，找到屏幕使用时间\" class=\"headerlink\" title=\"设置中，找到屏幕使用时间\"></a>设置中，找到<code>屏幕使用时间</code></h2><p><img src=\"/media/IMG_7610.png\" alt=\"IMG_7610\"></p>\n<h2 id=\"然后选择内容和隐私访问限制\"><a href=\"#然后选择内容和隐私访问限制\" class=\"headerlink\" title=\"然后选择内容和隐私访问限制\"></a>然后选择<code>内容和隐私访问限制</code></h2><p><img src=\"/media/IMG_7611.png\" alt=\"IMG_7611\"></p>\n<h2 id=\"找到iTunes-Store与App-Store购买项目\"><a href=\"#找到iTunes-Store与App-Store购买项目\" class=\"headerlink\" title=\"找到iTunes Store与App Store购买项目\"></a>找到<code>iTunes Store与App Store购买项目</code></h2><p><img src=\"/media/IMG_7612.png\" alt=\"IMG_7612\"></p>\n<h2 id=\"就可以管理是否允许内购了\"><a href=\"#就可以管理是否允许内购了\" class=\"headerlink\" title=\"就可以管理是否允许内购了\"></a>就可以管理是否允许内购了</h2><p><img src=\"/media/IMG_7613.png\" alt=\"IMG_7613\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前版本的<code>IOS</code>中，是通过<code>访问限制</code>菜单，限制应用程序内购的。这个功能在<code>设置</code>-&gt;<code>通用</code>下可以找到。然后在<code>IOS12</code>中，我们已经找不到了。很显然，它被挪到了另一个地方。当然还是能找到的</p>\n<h2 id=\"设置中，找到屏幕使用时间\"><a href=\"#设置中，找到屏幕使用时间\" class=\"headerlink\" title=\"设置中，找到屏幕使用时间\"></a>设置中，找到<code>屏幕使用时间</code></h2><p><img src=\"/media/IMG_7610.png\" alt=\"IMG_7610\"></p>\n<h2 id=\"然后选择内容和隐私访问限制\"><a href=\"#然后选择内容和隐私访问限制\" class=\"headerlink\" title=\"然后选择内容和隐私访问限制\"></a>然后选择<code>内容和隐私访问限制</code></h2><p><img src=\"/media/IMG_7611.png\" alt=\"IMG_7611\"></p>\n<h2 id=\"找到iTunes-Store与App-Store购买项目\"><a href=\"#找到iTunes-Store与App-Store购买项目\" class=\"headerlink\" title=\"找到iTunes Store与App Store购买项目\"></a>找到<code>iTunes Store与App Store购买项目</code></h2><p><img src=\"/media/IMG_7612.png\" alt=\"IMG_7612\"></p>\n<h2 id=\"就可以管理是否允许内购了\"><a href=\"#就可以管理是否允许内购了\" class=\"headerlink\" title=\"就可以管理是否允许内购了\"></a>就可以管理是否允许内购了</h2><p><img src=\"/media/IMG_7613.png\" alt=\"IMG_7613\"></p>\n"},{"title":"iTerm最佳实践","date":"2018-09-11T01:10:11.000Z","_content":"![](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2010.09.15.png)\n\n![](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.16.40.png)\n![](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.19.37.png)\n### 另注两个最常用的快捷键：\n#### 横向分屏 `⌘D`\n#### 纵向分屏 `⇧⌘D`\n\n\n\n","source":"_posts/iTerm_best_practices.md","raw":"---\ntitle: iTerm最佳实践\ndate: 2018-09-11 09:10:11\ncategories: 程序人生\n---\n![](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2010.09.15.png)\n\n![](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.16.40.png)\n![](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.19.37.png)\n### 另注两个最常用的快捷键：\n#### 横向分屏 `⌘D`\n#### 纵向分屏 `⇧⌘D`\n\n\n\n","slug":"iTerm_best_practices","published":1,"updated":"2018-09-11T02:10:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmp003ty0mz9nv7fnsx","content":"<p><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2010.09.15.png\"></p>\n<p><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.16.40.png\"><br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.19.37.png\"></p>\n<h3 id=\"另注两个最常用的快捷键：\"><a href=\"#另注两个最常用的快捷键：\" class=\"headerlink\" title=\"另注两个最常用的快捷键：\"></a>另注两个最常用的快捷键：</h3><h4 id=\"横向分屏-⌘D\"><a href=\"#横向分屏-⌘D\" class=\"headerlink\" title=\"横向分屏 ⌘D\"></a>横向分屏 <code>⌘D</code></h4><h4 id=\"纵向分屏-⇧⌘D\"><a href=\"#纵向分屏-⇧⌘D\" class=\"headerlink\" title=\"纵向分屏 ⇧⌘D\"></a>纵向分屏 <code>⇧⌘D</code></h4>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2010.09.15.png\"></p>\n<p><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.16.40.png\"><br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-09-11%2009.19.37.png\"></p>\n<h3 id=\"另注两个最常用的快捷键：\"><a href=\"#另注两个最常用的快捷键：\" class=\"headerlink\" title=\"另注两个最常用的快捷键：\"></a>另注两个最常用的快捷键：</h3><h4 id=\"横向分屏-⌘D\"><a href=\"#横向分屏-⌘D\" class=\"headerlink\" title=\"横向分屏 ⌘D\"></a>横向分屏 <code>⌘D</code></h4><h4 id=\"纵向分屏-⇧⌘D\"><a href=\"#纵向分屏-⇧⌘D\" class=\"headerlink\" title=\"纵向分屏 ⇧⌘D\"></a>纵向分屏 <code>⇧⌘D</code></h4>"},{"title":"用JMH做简单的JVM性能测试","date":"2018-07-13T22:39:47.000Z","_content":"写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印`new Date()`计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会`System.out.println()`打印调试没什么区别。\n这次被人安利`JMH`，说来惭愧，是我在Twitter上质疑`Vert.x`采用了效率不高的Json序列化库，影响了其在[techempower](https://www.techempower.com/benchmarks/)的成绩。结果[@julienviet](https://twitter.com/julienviet)神回复我说\"you should make a JMH microbenchmark to find out\"，所以才有了这篇，利用JMH做Json序列化速度对比的文章。\n这是测试结果：\n![-w783](/media/15315228604634.jpg)\n可以看到`Vert.x`的Json序列化速度还是出类拔萃的，当然，其本质还是实用的`jackson`\n上代码：\n```java\npackage com.aruistar.benchmark;\n\nimport com.aruistar.benchmark.model.User;\nimport com.jsoniter.output.JsonStream;\nimport groovy.json.JsonBuilder;\nimport groovy.json.JsonOutput;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\n\npublic class JsonToStringBenchmark {\n\n    public static void main(String[] args) throws RunnerException {\n\n        Options opt = new OptionsBuilder()\n                .include(JsonToStringBenchmark.class.getSimpleName())\n                .forks(1)\n                .warmupIterations(2)\n                .measurementIterations(3)\n                .build();\n\n        new Runner(opt).run();\n    }\n\n\n    //    @Benchmark\n    public void testJsonObjectToBuffer() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toBuffer();\n    }\n\n    @Benchmark\n    public void testJsonObjectToString() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toString();\n    }\n\n\n    @Benchmark\n    public void testJsonBuilder() {\n        new JsonBuilder(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap()).toString();\n    }\n\n    @Benchmark\n    public void testJsonOutput() {\n        JsonOutput.toJson(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n    @Benchmark\n    public void testJsoniter() {\n        JsonStream.serialize(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n\n}\n\n```\n\n```java\npackage com.aruistar.benchmark.model;\n\n\nimport io.vertx.core.json.JsonObject;\n\npublic class User extends JsonObject {\n\n\n    public User(String name, String username, int age, String title, boolean bool) {\n        put(\"name\", name);\n        put(\"age\", age);\n        put(\"title\", title);\n        put(\"bool\", bool);\n    }\n\n\n}\n\n```\n\n源码地址，[https://github.com/aruis/somebenchmark](https://github.com/aruis/somebenchmark)\n\n需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤\n```\nDo you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?\nIf yes, is annotation processing enabled in your IDE? You can find the checkbox under\nPreferences -> Build, Execution, Deployment -> Compiler -> Annotation Processors\n```\n* 参考[https://github.com/artyushov/idea-jmh-plugin/issues/13]","source":"_posts/jmh.md","raw":"---\ntitle: 用JMH做简单的JVM性能测试\ndate: 2018-07-14 06:39:47\ncategories: 程序人生\ntags: Java\n---\n写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印`new Date()`计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会`System.out.println()`打印调试没什么区别。\n这次被人安利`JMH`，说来惭愧，是我在Twitter上质疑`Vert.x`采用了效率不高的Json序列化库，影响了其在[techempower](https://www.techempower.com/benchmarks/)的成绩。结果[@julienviet](https://twitter.com/julienviet)神回复我说\"you should make a JMH microbenchmark to find out\"，所以才有了这篇，利用JMH做Json序列化速度对比的文章。\n这是测试结果：\n![-w783](/media/15315228604634.jpg)\n可以看到`Vert.x`的Json序列化速度还是出类拔萃的，当然，其本质还是实用的`jackson`\n上代码：\n```java\npackage com.aruistar.benchmark;\n\nimport com.aruistar.benchmark.model.User;\nimport com.jsoniter.output.JsonStream;\nimport groovy.json.JsonBuilder;\nimport groovy.json.JsonOutput;\nimport org.openjdk.jmh.annotations.Benchmark;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\n\npublic class JsonToStringBenchmark {\n\n    public static void main(String[] args) throws RunnerException {\n\n        Options opt = new OptionsBuilder()\n                .include(JsonToStringBenchmark.class.getSimpleName())\n                .forks(1)\n                .warmupIterations(2)\n                .measurementIterations(3)\n                .build();\n\n        new Runner(opt).run();\n    }\n\n\n    //    @Benchmark\n    public void testJsonObjectToBuffer() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toBuffer();\n    }\n\n    @Benchmark\n    public void testJsonObjectToString() {\n        new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).toString();\n    }\n\n\n    @Benchmark\n    public void testJsonBuilder() {\n        new JsonBuilder(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap()).toString();\n    }\n\n    @Benchmark\n    public void testJsonOutput() {\n        JsonOutput.toJson(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n    @Benchmark\n    public void testJsoniter() {\n        JsonStream.serialize(new User(\"Hello, World!\", \"tomcat\", 10, \"angular\", true).getMap());\n    }\n\n\n}\n\n```\n\n```java\npackage com.aruistar.benchmark.model;\n\n\nimport io.vertx.core.json.JsonObject;\n\npublic class User extends JsonObject {\n\n\n    public User(String name, String username, int age, String title, boolean bool) {\n        put(\"name\", name);\n        put(\"age\", age);\n        put(\"title\", title);\n        put(\"bool\", bool);\n    }\n\n\n}\n\n```\n\n源码地址，[https://github.com/aruis/somebenchmark](https://github.com/aruis/somebenchmark)\n\n需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤\n```\nDo you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?\nIf yes, is annotation processing enabled in your IDE? You can find the checkbox under\nPreferences -> Build, Execution, Deployment -> Compiler -> Annotation Processors\n```\n* 参考[https://github.com/artyushov/idea-jmh-plugin/issues/13]","slug":"jmh","published":1,"updated":"2018-07-16T12:53:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmp003wy0mz9m700l0w","content":"<p>写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印<code>new Date()</code>计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会<code>System.out.println()</code>打印调试没什么区别。<br>这次被人安利<code>JMH</code>，说来惭愧，是我在Twitter上质疑<code>Vert.x</code>采用了效率不高的Json序列化库，影响了其在<a href=\"https://www.techempower.com/benchmarks/\">techempower</a>的成绩。结果<a href=\"https://twitter.com/julienviet\">@julienviet</a>神回复我说”you should make a JMH microbenchmark to find out”，所以才有了这篇，利用JMH做Json序列化速度对比的文章。<br>这是测试结果：<br><img src=\"/media/15315228604634.jpg\" alt=\"-w783\"><br>可以看到<code>Vert.x</code>的Json序列化速度还是出类拔萃的，当然，其本质还是实用的<code>jackson</code><br>上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aruistar.benchmark.model.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jsoniter.output.JsonStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonOutput;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.annotations.Benchmark;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JsonToStringBenchmark</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RunnerException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Options</span> <span class=\"variable\">opt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OptionsBuilder</span>()</span><br><span class=\"line\">                .include(JsonToStringBenchmark.class.getSimpleName())</span><br><span class=\"line\">                .forks(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .warmupIterations(<span class=\"number\">2</span>)</span><br><span class=\"line\">                .measurementIterations(<span class=\"number\">3</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Runner</span>(opt).run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    @Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonObjectToBuffer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).toBuffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonObjectToString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonBuilder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">JsonBuilder</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).getMap()).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonOutput</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        JsonOutput.toJson(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsoniter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        JsonStream.serialize(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark.model;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.json.JsonObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JsonObject</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, String username, <span class=\"type\">int</span> age, String title, <span class=\"type\">boolean</span> bool)</span> &#123;</span><br><span class=\"line\">        put(<span class=\"string\">&quot;name&quot;</span>, name);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;age&quot;</span>, age);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;title&quot;</span>, title);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;bool&quot;</span>, bool);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>源码地址，<a href=\"https://github.com/aruis/somebenchmark\">https://github.com/aruis/somebenchmark</a></p>\n<p>需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"code\"><pre><span class=\"line\">Do you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?</span><br><span class=\"line\">If yes, <span class=\"keyword\">is</span> annotation processing enabled <span class=\"built_in\">in</span> your IDE? You can find the checkbox under</span><br><span class=\"line\">P<span class=\"function\"><span class=\"title\">references</span> -&gt;</span> B<span class=\"function\"><span class=\"title\">uild</span>, Execution, Deployment -&gt;</span> C<span class=\"function\"><span class=\"title\">ompiler</span> -&gt;</span> Annotation Processors</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考[<a href=\"https://github.com/artyushov/idea-jmh-plugin/issues/13]\">https://github.com/artyushov/idea-jmh-plugin/issues/13]</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>写java也有年头了，有时候遇到对比某几种方法性能的情景，都是自己傻傻的打印<code>new Date()</code>计算时间差。现在想来，这种原始的方式，就跟不会用IDE Debug，只会<code>System.out.println()</code>打印调试没什么区别。<br>这次被人安利<code>JMH</code>，说来惭愧，是我在Twitter上质疑<code>Vert.x</code>采用了效率不高的Json序列化库，影响了其在<a href=\"https://www.techempower.com/benchmarks/\">techempower</a>的成绩。结果<a href=\"https://twitter.com/julienviet\">@julienviet</a>神回复我说”you should make a JMH microbenchmark to find out”，所以才有了这篇，利用JMH做Json序列化速度对比的文章。<br>这是测试结果：<br><img src=\"/media/15315228604634.jpg\" alt=\"-w783\"><br>可以看到<code>Vert.x</code>的Json序列化速度还是出类拔萃的，当然，其本质还是实用的<code>jackson</code><br>上代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aruistar.benchmark.model.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jsoniter.output.JsonStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> groovy.json.JsonOutput;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.annotations.Benchmark;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.Runner;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.RunnerException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.Options;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.openjdk.jmh.runner.options.OptionsBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JsonToStringBenchmark</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> RunnerException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Options</span> <span class=\"variable\">opt</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OptionsBuilder</span>()</span><br><span class=\"line\">                .include(JsonToStringBenchmark.class.getSimpleName())</span><br><span class=\"line\">                .forks(<span class=\"number\">1</span>)</span><br><span class=\"line\">                .warmupIterations(<span class=\"number\">2</span>)</span><br><span class=\"line\">                .measurementIterations(<span class=\"number\">3</span>)</span><br><span class=\"line\">                .build();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Runner</span>(opt).run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//    @Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonObjectToBuffer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).toBuffer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonObjectToString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonBuilder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">JsonBuilder</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).getMap()).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsonOutput</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        JsonOutput.toJson(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testJsoniter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        JsonStream.serialize(<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>, <span class=\"string\">&quot;tomcat&quot;</span>, <span class=\"number\">10</span>, <span class=\"string\">&quot;angular&quot;</span>, <span class=\"literal\">true</span>).getMap());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.aruistar.benchmark.model;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.json.JsonObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">JsonObject</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(String name, String username, <span class=\"type\">int</span> age, String title, <span class=\"type\">boolean</span> bool)</span> &#123;</span><br><span class=\"line\">        put(<span class=\"string\">&quot;name&quot;</span>, name);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;age&quot;</span>, age);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;title&quot;</span>, title);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;bool&quot;</span>, bool);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>源码地址，<a href=\"https://github.com/aruis/somebenchmark\">https://github.com/aruis/somebenchmark</a></p>\n<p>需要注意的是，如果在IDEA打开，想直接通过main方法启动，需要执行如下步骤</p>\n<figure class=\"highlight xl\"><table><tr><td class=\"code\"><pre><span class=\"line\">Do you have org.openjdk.jmh:jmh-generator-annprocess on your classpath?</span><br><span class=\"line\">If yes, <span class=\"keyword\">is</span> annotation processing enabled <span class=\"built_in\">in</span> your IDE? You can find the checkbox under</span><br><span class=\"line\">P<span class=\"function\"><span class=\"title\">references</span> -&gt;</span> B<span class=\"function\"><span class=\"title\">uild</span>, Execution, Deployment -&gt;</span> C<span class=\"function\"><span class=\"title\">ompiler</span> -&gt;</span> Annotation Processors</span><br></pre></td></tr></table></figure>\n<ul>\n<li>参考[<a href=\"https://github.com/artyushov/idea-jmh-plugin/issues/13]\">https://github.com/artyushov/idea-jmh-plugin/issues/13]</a></li>\n</ul>\n"},{"title":"徐州贾汪马庄村","date":"2018-09-30T06:26:54.000Z","_content":"这是去年（2017年），总书记来徐州考察时着重去的一个村庄。虽然谈不上风景优美，但是环境尚可，村里产的网红香包算是名副其实，最便宜要三十块钱一个，价格也还可以。\n![](/media/ORG_DSC04585.jpg)\n![](/media/ORG_DSC04583.jpg)\n![](/media/ORG_DSC04575.jpg)\n\n","source":"_posts/mazhuang-jiawang-xuzhou.md","raw":"---\ntitle: 徐州贾汪马庄村\ndate: 2018-09-30 14:26:54\ncategories: 游记\n---\n这是去年（2017年），总书记来徐州考察时着重去的一个村庄。虽然谈不上风景优美，但是环境尚可，村里产的网红香包算是名副其实，最便宜要三十块钱一个，价格也还可以。\n![](/media/ORG_DSC04585.jpg)\n![](/media/ORG_DSC04583.jpg)\n![](/media/ORG_DSC04575.jpg)\n\n","slug":"mazhuang-jiawang-xuzhou","published":1,"updated":"2018-09-30T06:41:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmp003zy0mz9elpgdov","content":"<p>这是去年（2017年），总书记来徐州考察时着重去的一个村庄。虽然谈不上风景优美，但是环境尚可，村里产的网红香包算是名副其实，最便宜要三十块钱一个，价格也还可以。<br><img src=\"/media/ORG_DSC04585.jpg\"><br><img src=\"/media/ORG_DSC04583.jpg\"><br><img src=\"/media/ORG_DSC04575.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是去年（2017年），总书记来徐州考察时着重去的一个村庄。虽然谈不上风景优美，但是环境尚可，村里产的网红香包算是名副其实，最便宜要三十块钱一个，价格也还可以。<br><img src=\"/media/ORG_DSC04585.jpg\"><br><img src=\"/media/ORG_DSC04583.jpg\"><br><img src=\"/media/ORG_DSC04575.jpg\"></p>\n"},{"title":"制作macOS启动U盘命令","date":"2018-07-27T00:20:27.000Z","_content":"\n```\nsudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app --nointeraction\n```\n其中`/Volumes/Sierra`的`Sierra`是U盘的命名。如下图所示。\n![](/media/15326512660951.jpg)\n\n","source":"_posts/macos_bootable_usb.md","raw":"---\ntitle: 制作macOS启动U盘命令\ndate: 2018-07-27 08:20:27\ncategories: 实用技巧\ntags:\n    - Mac\n---\n\n```\nsudo /Applications/Install\\ macOS\\ High\\ Sierra.app/Contents/Resources/createinstallmedia --volume /Volumes/Sierra --applicationpath /Applications/Install\\ macOS\\ High\\ Sierra.app --nointeraction\n```\n其中`/Volumes/Sierra`的`Sierra`是U盘的命名。如下图所示。\n![](/media/15326512660951.jpg)\n\n","slug":"macos_bootable_usb","published":1,"updated":"2018-07-27T00:27:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmq0043y0mzfwbd7sow","content":"<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"regexp\">/Applications/</span>Install\\ macOS\\ High\\ Sierra.app<span class=\"regexp\">/Contents/</span>Resources<span class=\"regexp\">/createinstallmedia --volume /</span>Volumes<span class=\"regexp\">/Sierra --applicationpath /</span>Applications/Install\\ macOS\\ High\\ Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>\n<p>其中<code>/Volumes/Sierra</code>的<code>Sierra</code>是U盘的命名。如下图所示。<br><img src=\"/media/15326512660951.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"regexp\">/Applications/</span>Install\\ macOS\\ High\\ Sierra.app<span class=\"regexp\">/Contents/</span>Resources<span class=\"regexp\">/createinstallmedia --volume /</span>Volumes<span class=\"regexp\">/Sierra --applicationpath /</span>Applications/Install\\ macOS\\ High\\ Sierra.app --nointeraction</span><br></pre></td></tr></table></figure>\n<p>其中<code>/Volumes/Sierra</code>的<code>Sierra</code>是U盘的命名。如下图所示。<br><img src=\"/media/15326512660951.jpg\"></p>\n"},{"title":"关于Java收费政策的解读","date":"2018-09-26T01:12:13.000Z","_content":"随着`Java 11`的正式推出，关于`Java`收费的言论又开始甚嚣尘上。然后国外一众大神，写了这篇著名的[Java Is Still Free](https://itnext.io/java-is-still-free-c02aef8c9e04)。我总结一下其中的重点，供你参考（这里只谈商业用途，这才是各位老板最关心的）：\n1. 如果你在使用`Oracle JDK8` ，那么到`2019年1月`之后将不会获得免费的更新。如果需要更新就得考虑付费。如果不在乎更新的话，继续随便用，没毛病。\n2. 从`JDK 9`开始（\t2017年9月发布），每六个月，就会发布一个大版本，如下表\n\n    | 版本 | 发布时间 | \n    | --- | --- | \n    | 9 | 2017年9月  |  \n    | 10 | 2018年3月 |  \n    | 11 | 2018年9月 |  \n    | 12 | 2019年3月 |  \n    | 13 | 2019年9月 |  \n    \n3. 一旦有新的大版本发布，上一个版本的`Oracle JDK`将不再提供免费的更新维护。此时你有三个选择：\n    * 升级到最新的`Oracle JDK`\n    * 使用`Open JDK`\n    * 给`Oracle`付费，仍可对当前版本获得更新 \n\n## 总结\n* 不在乎更新的，随便耍\n* 在乎更新的，并且能紧跟`Oracle`步伐的，没影响，继续用最新版的`Oracle JDK`就是\n* 想及时获取补丁，但又不习惯半年升级一次大版本的，就用`Open JDK`\n* `Open JDK`的供应商很多，甚至自己编译都行，这里我推荐[zulu](https://www.azul.com/downloads/zulu/)","source":"_posts/java_is_still_free.md","raw":"---\ntitle: 关于Java收费政策的解读\ndate: 2018-09-26 09:12:13\ncategories: 程序人生\ntags:\n    - Java\n---\n随着`Java 11`的正式推出，关于`Java`收费的言论又开始甚嚣尘上。然后国外一众大神，写了这篇著名的[Java Is Still Free](https://itnext.io/java-is-still-free-c02aef8c9e04)。我总结一下其中的重点，供你参考（这里只谈商业用途，这才是各位老板最关心的）：\n1. 如果你在使用`Oracle JDK8` ，那么到`2019年1月`之后将不会获得免费的更新。如果需要更新就得考虑付费。如果不在乎更新的话，继续随便用，没毛病。\n2. 从`JDK 9`开始（\t2017年9月发布），每六个月，就会发布一个大版本，如下表\n\n    | 版本 | 发布时间 | \n    | --- | --- | \n    | 9 | 2017年9月  |  \n    | 10 | 2018年3月 |  \n    | 11 | 2018年9月 |  \n    | 12 | 2019年3月 |  \n    | 13 | 2019年9月 |  \n    \n3. 一旦有新的大版本发布，上一个版本的`Oracle JDK`将不再提供免费的更新维护。此时你有三个选择：\n    * 升级到最新的`Oracle JDK`\n    * 使用`Open JDK`\n    * 给`Oracle`付费，仍可对当前版本获得更新 \n\n## 总结\n* 不在乎更新的，随便耍\n* 在乎更新的，并且能紧跟`Oracle`步伐的，没影响，继续用最新版的`Oracle JDK`就是\n* 想及时获取补丁，但又不习惯半年升级一次大版本的，就用`Open JDK`\n* `Open JDK`的供应商很多，甚至自己编译都行，这里我推荐[zulu](https://www.azul.com/downloads/zulu/)","slug":"java_is_still_free","published":1,"updated":"2018-09-26T01:56:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmq0047y0mzg6jl122o","content":"<p>随着<code>Java 11</code>的正式推出，关于<code>Java</code>收费的言论又开始甚嚣尘上。然后国外一众大神，写了这篇著名的<a href=\"https://itnext.io/java-is-still-free-c02aef8c9e04\">Java Is Still Free</a>。我总结一下其中的重点，供你参考（这里只谈商业用途，这才是各位老板最关心的）：</p>\n<ol>\n<li><p>如果你在使用<code>Oracle JDK8</code> ，那么到<code>2019年1月</code>之后将不会获得免费的更新。如果需要更新就得考虑付费。如果不在乎更新的话，继续随便用，没毛病。</p>\n</li>\n<li><p>从<code>JDK 9</code>开始（    2017年9月发布），每六个月，就会发布一个大版本，如下表</p>\n<table>\n<thead>\n<tr>\n<th>版本</th>\n<th>发布时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>9</td>\n<td>2017年9月</td>\n</tr>\n<tr>\n<td>10</td>\n<td>2018年3月</td>\n</tr>\n<tr>\n<td>11</td>\n<td>2018年9月</td>\n</tr>\n<tr>\n<td>12</td>\n<td>2019年3月</td>\n</tr>\n<tr>\n<td>13</td>\n<td>2019年9月</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>一旦有新的大版本发布，上一个版本的<code>Oracle JDK</code>将不再提供免费的更新维护。此时你有三个选择：</p>\n<ul>\n<li>升级到最新的<code>Oracle JDK</code></li>\n<li>使用<code>Open JDK</code></li>\n<li>给<code>Oracle</code>付费，仍可对当前版本获得更新</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>不在乎更新的，随便耍</li>\n<li>在乎更新的，并且能紧跟<code>Oracle</code>步伐的，没影响，继续用最新版的<code>Oracle JDK</code>就是</li>\n<li>想及时获取补丁，但又不习惯半年升级一次大版本的，就用<code>Open JDK</code></li>\n<li><code>Open JDK</code>的供应商很多，甚至自己编译都行，这里我推荐<a href=\"https://www.azul.com/downloads/zulu/\">zulu</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>随着<code>Java 11</code>的正式推出，关于<code>Java</code>收费的言论又开始甚嚣尘上。然后国外一众大神，写了这篇著名的<a href=\"https://itnext.io/java-is-still-free-c02aef8c9e04\">Java Is Still Free</a>。我总结一下其中的重点，供你参考（这里只谈商业用途，这才是各位老板最关心的）：</p>\n<ol>\n<li><p>如果你在使用<code>Oracle JDK8</code> ，那么到<code>2019年1月</code>之后将不会获得免费的更新。如果需要更新就得考虑付费。如果不在乎更新的话，继续随便用，没毛病。</p>\n</li>\n<li><p>从<code>JDK 9</code>开始（    2017年9月发布），每六个月，就会发布一个大版本，如下表</p>\n<table>\n<thead>\n<tr>\n<th>版本</th>\n<th>发布时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>9</td>\n<td>2017年9月</td>\n</tr>\n<tr>\n<td>10</td>\n<td>2018年3月</td>\n</tr>\n<tr>\n<td>11</td>\n<td>2018年9月</td>\n</tr>\n<tr>\n<td>12</td>\n<td>2019年3月</td>\n</tr>\n<tr>\n<td>13</td>\n<td>2019年9月</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>一旦有新的大版本发布，上一个版本的<code>Oracle JDK</code>将不再提供免费的更新维护。此时你有三个选择：</p>\n<ul>\n<li>升级到最新的<code>Oracle JDK</code></li>\n<li>使用<code>Open JDK</code></li>\n<li>给<code>Oracle</code>付费，仍可对当前版本获得更新</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>不在乎更新的，随便耍</li>\n<li>在乎更新的，并且能紧跟<code>Oracle</code>步伐的，没影响，继续用最新版的<code>Oracle JDK</code>就是</li>\n<li>想及时获取补丁，但又不习惯半年升级一次大版本的，就用<code>Open JDK</code></li>\n<li><code>Open JDK</code>的供应商很多，甚至自己编译都行，这里我推荐<a href=\"https://www.azul.com/downloads/zulu/\">zulu</a></li>\n</ul>\n"},{"title":"linux免密登录不起作用解决办法","date":"2018-07-25T00:17:19.000Z","_content":"已经把公钥添加到`~/.ssh/authorized_keys`文件之后，有时候依然无法实现免密码登录。后来才发现，是因为有些文件的权限放大了。想想也是，如果`authorized_keys`文件，是其他用户也能编辑的。那岂不是多了个后门，可以帮助其他用户绕到当前用户了。\n所以重点在于几个关键文件是否把权限集中在自己手上，并且无论如何是不允许其他用户编辑的。\n总结为以下几条命令\n```\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\n```\n有时候，光有上面两句还搞不定，我发现还得追加一句\n```\nchmod 755 ~\n```","source":"_posts/linux_ssh_key.md","raw":"---\ntitle: linux免密登录不起作用解决办法\ndate: 2018-07-25 08:17:19\ncategories: 程序人生\ntags:\n    - Linux\n---\n已经把公钥添加到`~/.ssh/authorized_keys`文件之后，有时候依然无法实现免密码登录。后来才发现，是因为有些文件的权限放大了。想想也是，如果`authorized_keys`文件，是其他用户也能编辑的。那岂不是多了个后门，可以帮助其他用户绕到当前用户了。\n所以重点在于几个关键文件是否把权限集中在自己手上，并且无论如何是不允许其他用户编辑的。\n总结为以下几条命令\n```\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/authorized_keys\n```\n有时候，光有上面两句还搞不定，我发现还得追加一句\n```\nchmod 755 ~\n```","slug":"linux_ssh_key","published":1,"updated":"2018-07-25T00:28:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmq004ay0mzb8ltbfsk","content":"<p>已经把公钥添加到<code>~/.ssh/authorized_keys</code>文件之后，有时候依然无法实现免密码登录。后来才发现，是因为有些文件的权限放大了。想想也是，如果<code>authorized_keys</code>文件，是其他用户也能编辑的。那岂不是多了个后门，可以帮助其他用户绕到当前用户了。<br>所以重点在于几个关键文件是否把权限集中在自己手上，并且无论如何是不允许其他用户编辑的。<br>总结为以下几条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>有时候，光有上面两句还搞不定，我发现还得追加一句</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">chmod</span> <span class=\"number\">755</span> ~</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>已经把公钥添加到<code>~/.ssh/authorized_keys</code>文件之后，有时候依然无法实现免密码登录。后来才发现，是因为有些文件的权限放大了。想想也是，如果<code>authorized_keys</code>文件，是其他用户也能编辑的。那岂不是多了个后门，可以帮助其他用户绕到当前用户了。<br>所以重点在于几个关键文件是否把权限集中在自己手上，并且无论如何是不允许其他用户编辑的。<br>总结为以下几条命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 700 ~/.ssh</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n<p>有时候，光有上面两句还搞不定，我发现还得追加一句</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">chmod</span> <span class=\"number\">755</span> ~</span><br></pre></td></tr></table></figure>"},{"title":"记一个八岁小女孩","date":"2018-08-31T12:38:51.000Z","_content":"![摄于兴义机场](/media/FullSizeRender.jpeg)\n\n在贵阳飞回徐州的飞机上，坐在我旁边的是一个胖乎乎的小女孩。飞行的前半程，我一直有个疑问，就是谁和她通行的，总不可能一个二三年级的小学生独自坐飞机，而且还是要飞个上千公里的这种。\n直到看到她自己去跟空姐沟通午餐事宜，自己从书包里拿出一张毛爷爷来支付自己的午餐。我才明白，原来她是一个人坐飞机的。心中暗暗赞叹。\n后来简单跟她聊了一会，得知她今年八岁。因为父母离异，分居两地，她从四岁时就开始了这种独自往返于贵阳与徐州的生活。这的确听起来让人觉得可怜，毕竟孩子是无辜的，但却没什么其他办法。\n我留了一张有我们俩人的自拍照，但没有问她名字。只能在心里默默祝福她，希望未来能越来越好。\n\n最后记录一下我俩的对话：\n她：你说世界上坏人多么？\n我：多，但是没有好人多。","source":"_posts/eight_years_girl.md","raw":"---\ntitle: 记一个八岁小女孩\ndate: 2018-08-31 20:38:51\ncategories: 游记\n---\n![摄于兴义机场](/media/FullSizeRender.jpeg)\n\n在贵阳飞回徐州的飞机上，坐在我旁边的是一个胖乎乎的小女孩。飞行的前半程，我一直有个疑问，就是谁和她通行的，总不可能一个二三年级的小学生独自坐飞机，而且还是要飞个上千公里的这种。\n直到看到她自己去跟空姐沟通午餐事宜，自己从书包里拿出一张毛爷爷来支付自己的午餐。我才明白，原来她是一个人坐飞机的。心中暗暗赞叹。\n后来简单跟她聊了一会，得知她今年八岁。因为父母离异，分居两地，她从四岁时就开始了这种独自往返于贵阳与徐州的生活。这的确听起来让人觉得可怜，毕竟孩子是无辜的，但却没什么其他办法。\n我留了一张有我们俩人的自拍照，但没有问她名字。只能在心里默默祝福她，希望未来能越来越好。\n\n最后记录一下我俩的对话：\n她：你说世界上坏人多么？\n我：多，但是没有好人多。","slug":"eight_years_girl","published":1,"updated":"2018-08-31T12:53:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmq004dy0mzfpzvg37i","content":"<p><img src=\"/media/FullSizeRender.jpeg\" alt=\"摄于兴义机场\"></p>\n<p>在贵阳飞回徐州的飞机上，坐在我旁边的是一个胖乎乎的小女孩。飞行的前半程，我一直有个疑问，就是谁和她通行的，总不可能一个二三年级的小学生独自坐飞机，而且还是要飞个上千公里的这种。<br>直到看到她自己去跟空姐沟通午餐事宜，自己从书包里拿出一张毛爷爷来支付自己的午餐。我才明白，原来她是一个人坐飞机的。心中暗暗赞叹。<br>后来简单跟她聊了一会，得知她今年八岁。因为父母离异，分居两地，她从四岁时就开始了这种独自往返于贵阳与徐州的生活。这的确听起来让人觉得可怜，毕竟孩子是无辜的，但却没什么其他办法。<br>我留了一张有我们俩人的自拍照，但没有问她名字。只能在心里默默祝福她，希望未来能越来越好。</p>\n<p>最后记录一下我俩的对话：<br>她：你说世界上坏人多么？<br>我：多，但是没有好人多。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/media/FullSizeRender.jpeg\" alt=\"摄于兴义机场\"></p>\n<p>在贵阳飞回徐州的飞机上，坐在我旁边的是一个胖乎乎的小女孩。飞行的前半程，我一直有个疑问，就是谁和她通行的，总不可能一个二三年级的小学生独自坐飞机，而且还是要飞个上千公里的这种。<br>直到看到她自己去跟空姐沟通午餐事宜，自己从书包里拿出一张毛爷爷来支付自己的午餐。我才明白，原来她是一个人坐飞机的。心中暗暗赞叹。<br>后来简单跟她聊了一会，得知她今年八岁。因为父母离异，分居两地，她从四岁时就开始了这种独自往返于贵阳与徐州的生活。这的确听起来让人觉得可怜，毕竟孩子是无辜的，但却没什么其他办法。<br>我留了一张有我们俩人的自拍照，但没有问她名字。只能在心里默默祝福她，希望未来能越来越好。</p>\n<p>最后记录一下我俩的对话：<br>她：你说世界上坏人多么？<br>我：多，但是没有好人多。</p>\n"},{"title":"PortgreSQL中找到那些被大量顺序扫表没走索引的表","date":"2019-02-25T06:18:06.000Z","_content":"\n```\nselect schemaname,\n       relname,\n       seq_scan,\n       seq_tup_read,\n       seq_tup_read / seq_scan as avg,\n       idx_scan\nfrom pg_stat_user_tables\nwhere seq_scan > 0\norder by seq_tup_read desc\nlimit 20\n```\n解释一下\n* `seq_scan`是表上发生顺序扫描的次数\n* `seq_tup_read`是顺序扫描时系统读取了多少个元组\n* `idx_scan`是表上发生索引扫描的次数\n\n通过上面的`SQL`就能查询到那些被频繁访问，但是几乎没有利用到索引的表，这样我们就可以针对这些表针对性的创建索引，从而大幅提升数据库的访问速度。\n\n补充一点：顺序扫表不是一定不好，但是大规模的顺序扫表常常是数据库性能低下的根源。","source":"_posts/lot_of_seq_scan_in_postgresql.md","raw":"---\ntitle: PortgreSQL中找到那些被大量顺序扫表没走索引的表\ndate: 2019-02-25 14:18:06\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n\n```\nselect schemaname,\n       relname,\n       seq_scan,\n       seq_tup_read,\n       seq_tup_read / seq_scan as avg,\n       idx_scan\nfrom pg_stat_user_tables\nwhere seq_scan > 0\norder by seq_tup_read desc\nlimit 20\n```\n解释一下\n* `seq_scan`是表上发生顺序扫描的次数\n* `seq_tup_read`是顺序扫描时系统读取了多少个元组\n* `idx_scan`是表上发生索引扫描的次数\n\n通过上面的`SQL`就能查询到那些被频繁访问，但是几乎没有利用到索引的表，这样我们就可以针对这些表针对性的创建索引，从而大幅提升数据库的访问速度。\n\n补充一点：顺序扫表不是一定不好，但是大规模的顺序扫表常常是数据库性能低下的根源。","slug":"lot_of_seq_scan_in_postgresql","published":1,"updated":"2019-02-25T06:27:15.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmr004hy0mz3eb77ijc","content":"<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> schemaname,</span><br><span class=\"line\">       relname,</span><br><span class=\"line\">       seq_scan,</span><br><span class=\"line\">       seq_tup_read,</span><br><span class=\"line\">       seq_tup_read / seq_scan <span class=\"keyword\">as</span> avg,</span><br><span class=\"line\">       idx_scan</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">where</span> seq_scan &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> seq_tup_read <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p>解释一下</p>\n<ul>\n<li><code>seq_scan</code>是表上发生顺序扫描的次数</li>\n<li><code>seq_tup_read</code>是顺序扫描时系统读取了多少个元组</li>\n<li><code>idx_scan</code>是表上发生索引扫描的次数</li>\n</ul>\n<p>通过上面的<code>SQL</code>就能查询到那些被频繁访问，但是几乎没有利用到索引的表，这样我们就可以针对这些表针对性的创建索引，从而大幅提升数据库的访问速度。</p>\n<p>补充一点：顺序扫表不是一定不好，但是大规模的顺序扫表常常是数据库性能低下的根源。</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> schemaname,</span><br><span class=\"line\">       relname,</span><br><span class=\"line\">       seq_scan,</span><br><span class=\"line\">       seq_tup_read,</span><br><span class=\"line\">       seq_tup_read / seq_scan <span class=\"keyword\">as</span> avg,</span><br><span class=\"line\">       idx_scan</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">where</span> seq_scan &gt; <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> seq_tup_read <span class=\"keyword\">desc</span></span><br><span class=\"line\"><span class=\"keyword\">limit</span> <span class=\"number\">20</span></span><br></pre></td></tr></table></figure>\n<p>解释一下</p>\n<ul>\n<li><code>seq_scan</code>是表上发生顺序扫描的次数</li>\n<li><code>seq_tup_read</code>是顺序扫描时系统读取了多少个元组</li>\n<li><code>idx_scan</code>是表上发生索引扫描的次数</li>\n</ul>\n<p>通过上面的<code>SQL</code>就能查询到那些被频繁访问，但是几乎没有利用到索引的表，这样我们就可以针对这些表针对性的创建索引，从而大幅提升数据库的访问速度。</p>\n<p>补充一点：顺序扫表不是一定不好，但是大规模的顺序扫表常常是数据库性能低下的根源。</p>\n"},{"title":"linux挂载新磁盘（适用阿里云、华为云）","date":"2018-07-16T00:39:04.000Z","_content":"公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址[Linux 格式化和挂载数据盘](https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz)\n\n1. `fdisk -l`查看服务器是否识别到新硬盘的接入，一般会在最后，返回\n```\n磁盘 /dev/xvde：536.9 GB, 536870912000 字节，1048576000 个扇区\nUnits = 扇区 of 1 * 512 = 512 bytes\n扇区大小(逻辑/物理)：512 字节 / 512 字节\nI/O 大小(最小/最佳)：512 字节 / 512 字节\n```\n说明识别到一个500多G的硬盘，记录下这个硬盘设备号`/dev/xvde`(这是个变量，你那里不一定跟我一样)\n2. `fdisk /dev/xvde`对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入`n`，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：![屏幕快照 2018-07-16 09.20.59](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png)\n此时输入`wq`将分区表写入磁盘，并退出。会收到提示：\n![屏幕快照 2018-07-16 09.22.56](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png)\n3. `fdisk -l`再次执行此命令，可以看到新分区信息（一般在最后）\n![](/media/15317042937460.jpg)\n4. `mkfs.ext4 /dev/xvde1`将这个分区格式化成ext4文件系统。如图：\n![](/media/15317044049926.jpg)\n5. `mount /dev/xvde1 /mnt`挂载分区\n6. `df -h`可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步\n7. 保险起见，先备份`fstab`，执行命令`cp /etc/fstab /etc/fstab.bak`，然后执行`echo /dev/xvde1 /mnt ext4 defaults 0 0 >> /etc/fstab`。之后即使重启，分区也会自动挂载喽。可以通过`df -h`看到效果：\n![](/media/15317048391668.jpg)\n","source":"_posts/linux_mount.md","raw":"---\ntitle: linux挂载新磁盘（适用阿里云、华为云）\ndate: 2018-07-16 08:39:04\ncategories: 程序人生\ntags: Linux\n---\n公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址[Linux 格式化和挂载数据盘](https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz)\n\n1. `fdisk -l`查看服务器是否识别到新硬盘的接入，一般会在最后，返回\n```\n磁盘 /dev/xvde：536.9 GB, 536870912000 字节，1048576000 个扇区\nUnits = 扇区 of 1 * 512 = 512 bytes\n扇区大小(逻辑/物理)：512 字节 / 512 字节\nI/O 大小(最小/最佳)：512 字节 / 512 字节\n```\n说明识别到一个500多G的硬盘，记录下这个硬盘设备号`/dev/xvde`(这是个变量，你那里不一定跟我一样)\n2. `fdisk /dev/xvde`对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入`n`，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：![屏幕快照 2018-07-16 09.20.59](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png)\n此时输入`wq`将分区表写入磁盘，并退出。会收到提示：\n![屏幕快照 2018-07-16 09.22.56](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png)\n3. `fdisk -l`再次执行此命令，可以看到新分区信息（一般在最后）\n![](/media/15317042937460.jpg)\n4. `mkfs.ext4 /dev/xvde1`将这个分区格式化成ext4文件系统。如图：\n![](/media/15317044049926.jpg)\n5. `mount /dev/xvde1 /mnt`挂载分区\n6. `df -h`可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步\n7. 保险起见，先备份`fstab`，执行命令`cp /etc/fstab /etc/fstab.bak`，然后执行`echo /dev/xvde1 /mnt ext4 defaults 0 0 >> /etc/fstab`。之后即使重启，分区也会自动挂载喽。可以通过`df -h`看到效果：\n![](/media/15317048391668.jpg)\n","slug":"linux_mount","published":1,"updated":"2018-07-25T00:18:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmr004ky0mzd8kngool","content":"<p>公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址<a href=\"https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz\">Linux 格式化和挂载数据盘</a></p>\n<ol>\n<li><code>fdisk -l</code>查看服务器是否识别到新硬盘的接入，一般会在最后，返回<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">磁盘 <span class=\"regexp\">/dev/</span>xvde：<span class=\"number\">536.9</span> GB, <span class=\"number\">536870912000</span> 字节，<span class=\"number\">1048576000</span> 个扇区</span><br><span class=\"line\">Units = 扇区 of <span class=\"number\">1</span> * <span class=\"number\">512</span> = <span class=\"number\">512</span> bytes</span><br><span class=\"line\">扇区大小(逻辑<span class=\"regexp\">/物理)：512 字节 /</span> <span class=\"number\">512</span> 字节</span><br><span class=\"line\">I<span class=\"regexp\">/O 大小(最小/</span>最佳)：<span class=\"number\">512</span> 字节 / <span class=\"number\">512</span> 字节</span><br></pre></td></tr></table></figure>\n说明识别到一个500多G的硬盘，记录下这个硬盘设备号<code>/dev/xvde</code>(这是个变量，你那里不一定跟我一样)</li>\n<li><code>fdisk /dev/xvde</code>对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入<code>n</code>，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：<img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png\" alt=\"屏幕快照 2018-07-16 09.20.59\"><br>此时输入<code>wq</code>将分区表写入磁盘，并退出。会收到提示：<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png\" alt=\"屏幕快照 2018-07-16 09.22.56\"></li>\n<li><code>fdisk -l</code>再次执行此命令，可以看到新分区信息（一般在最后）<br><img src=\"/media/15317042937460.jpg\"></li>\n<li><code>mkfs.ext4 /dev/xvde1</code>将这个分区格式化成ext4文件系统。如图：<br><img src=\"/media/15317044049926.jpg\"></li>\n<li><code>mount /dev/xvde1 /mnt</code>挂载分区</li>\n<li><code>df -h</code>可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步</li>\n<li>保险起见，先备份<code>fstab</code>，执行命令<code>cp /etc/fstab /etc/fstab.bak</code>，然后执行<code>echo /dev/xvde1 /mnt ext4 defaults 0 0 &gt;&gt; /etc/fstab</code>。之后即使重启，分区也会自动挂载喽。可以通过<code>df -h</code>看到效果：<br><img src=\"/media/15317048391668.jpg\"></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>公司项目用的是华为的云服务器，刚申请了新的硬盘资源，需要手动分区挂载。虽然华为没给啥资料，但是不是还有阿里云嘛。所以结合阿里云的资料。我们就可以在华为云实操一把了。附里云资料地址<a href=\"https://help.aliyun.com/document_detail/25426.html?spm=a2c4g.11186623.2.4.nTZpwz\">Linux 格式化和挂载数据盘</a></p>\n<ol>\n<li><code>fdisk -l</code>查看服务器是否识别到新硬盘的接入，一般会在最后，返回<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">磁盘 <span class=\"regexp\">/dev/</span>xvde：<span class=\"number\">536.9</span> GB, <span class=\"number\">536870912000</span> 字节，<span class=\"number\">1048576000</span> 个扇区</span><br><span class=\"line\">Units = 扇区 of <span class=\"number\">1</span> * <span class=\"number\">512</span> = <span class=\"number\">512</span> bytes</span><br><span class=\"line\">扇区大小(逻辑<span class=\"regexp\">/物理)：512 字节 /</span> <span class=\"number\">512</span> 字节</span><br><span class=\"line\">I<span class=\"regexp\">/O 大小(最小/</span>最佳)：<span class=\"number\">512</span> 字节 / <span class=\"number\">512</span> 字节</span><br></pre></td></tr></table></figure>\n说明识别到一个500多G的硬盘，记录下这个硬盘设备号<code>/dev/xvde</code>(这是个变量，你那里不一定跟我一样)</li>\n<li><code>fdisk /dev/xvde</code>对上面的新硬盘进行分区操作，这是一个交互式命令，首先输入<code>n</code>，也就是创建新分区的意思，如果就打算分一个区的话，后续就按根据提示输入一路回车，到如下界面：<img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.20.59.png\" alt=\"屏幕快照 2018-07-16 09.20.59\"><br>此时输入<code>wq</code>将分区表写入磁盘，并退出。会收到提示：<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-07-16%2009.22.56.png\" alt=\"屏幕快照 2018-07-16 09.22.56\"></li>\n<li><code>fdisk -l</code>再次执行此命令，可以看到新分区信息（一般在最后）<br><img src=\"/media/15317042937460.jpg\"></li>\n<li><code>mkfs.ext4 /dev/xvde1</code>将这个分区格式化成ext4文件系统。如图：<br><img src=\"/media/15317044049926.jpg\"></li>\n<li><code>mount /dev/xvde1 /mnt</code>挂载分区</li>\n<li><code>df -h</code>可以查看到新挂载的分区，此时分区已经可以使用了。但是还没有开机自动挂载，如果要开机自动挂载，还需做第7步</li>\n<li>保险起见，先备份<code>fstab</code>，执行命令<code>cp /etc/fstab /etc/fstab.bak</code>，然后执行<code>echo /dev/xvde1 /mnt ext4 defaults 0 0 &gt;&gt; /etc/fstab</code>。之后即使重启，分区也会自动挂载喽。可以通过<code>df -h</code>看到效果：<br><img src=\"/media/15317048391668.jpg\"></li>\n</ol>\n"},{"title":"分享一个Vert.x的自定义Launcher","date":"2018-08-11T23:30:14.000Z","_content":"在`Vert.x`的官方example中，`mainClassName`一般是指定的`io.vertx.core.Launcher`，但是在实际应用中，如果我们也不加思索的用这个`Launcher`就会损失好多定制性，比如：\n* blockedThreadCheckInterval（检查线程block定时时间间隔）\n* warningExceptionTime（block多久后开始打印堆栈信息）\n* maxEventLoopExecuteTime（允许`EventLoop`的最长执行时间）\n\n这些设置都是要在`Vertx`实例化之前准备好的，只要不是Embedded应用（也就是自己调用`Vertx.vertx()`），那就只剩接管`Launcher`这条路了，下面分享一个`groovy`版的自定义`Launcher`\n\n\n```\nimport io.vertx.core.Launcher\nimport io.vertx.core.VertxOptions\nimport org.slf4j.bridge.SLF4JBridgeHandler\n\nclass AruisLauncher extends Launcher {\n\n    static {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n    }\n\n    static void main(String[] args) {\n        new AruisLauncher().dispatch(args)\n    }\n\n    @Override\n    void beforeStartingVertx(VertxOptions options) {\n        options.setWarningExceptionTime(10L * 1000 * 1000000)\n        options.setBlockedThreadCheckInterval(2000)\n        options.setMaxEventLoopExecuteTime(2L * 1000 * 1000000)\n        options.workerPoolSize = 20\n        super.beforeStartingVertx(options)\n    }\n}\n```\n\n在这个`Launcher`中，我还额外做了几件事：\n* 用`slf4j`接管了`Vert.x`的日志\n* 提供一个`main`方法，方便`IDE`开发环境启动","source":"_posts/my_luancher_in_vertx.md","raw":"---\ntitle: 分享一个Vert.x的自定义Launcher\ndate: 2018-08-12 07:30:14\ncategories: 程序人生\ntags:\n    - Vert.x\n---\n在`Vert.x`的官方example中，`mainClassName`一般是指定的`io.vertx.core.Launcher`，但是在实际应用中，如果我们也不加思索的用这个`Launcher`就会损失好多定制性，比如：\n* blockedThreadCheckInterval（检查线程block定时时间间隔）\n* warningExceptionTime（block多久后开始打印堆栈信息）\n* maxEventLoopExecuteTime（允许`EventLoop`的最长执行时间）\n\n这些设置都是要在`Vertx`实例化之前准备好的，只要不是Embedded应用（也就是自己调用`Vertx.vertx()`），那就只剩接管`Launcher`这条路了，下面分享一个`groovy`版的自定义`Launcher`\n\n\n```\nimport io.vertx.core.Launcher\nimport io.vertx.core.VertxOptions\nimport org.slf4j.bridge.SLF4JBridgeHandler\n\nclass AruisLauncher extends Launcher {\n\n    static {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n    }\n\n    static void main(String[] args) {\n        new AruisLauncher().dispatch(args)\n    }\n\n    @Override\n    void beforeStartingVertx(VertxOptions options) {\n        options.setWarningExceptionTime(10L * 1000 * 1000000)\n        options.setBlockedThreadCheckInterval(2000)\n        options.setMaxEventLoopExecuteTime(2L * 1000 * 1000000)\n        options.workerPoolSize = 20\n        super.beforeStartingVertx(options)\n    }\n}\n```\n\n在这个`Launcher`中，我还额外做了几件事：\n* 用`slf4j`接管了`Vert.x`的日志\n* 提供一个`main`方法，方便`IDE`开发环境启动","slug":"my_luancher_in_vertx","published":1,"updated":"2018-08-11T23:53:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmr004oy0mzfmbx7xdf","content":"<p>在<code>Vert.x</code>的官方example中，<code>mainClassName</code>一般是指定的<code>io.vertx.core.Launcher</code>，但是在实际应用中，如果我们也不加思索的用这个<code>Launcher</code>就会损失好多定制性，比如：</p>\n<ul>\n<li>blockedThreadCheckInterval（检查线程block定时时间间隔）</li>\n<li>warningExceptionTime（block多久后开始打印堆栈信息）</li>\n<li>maxEventLoopExecuteTime（允许<code>EventLoop</code>的最长执行时间）</li>\n</ul>\n<p>这些设置都是要在<code>Vertx</code>实例化之前准备好的，只要不是Embedded应用（也就是自己调用<code>Vertx.vertx()</code>），那就只剩接管<code>Launcher</code>这条路了，下面分享一个<code>groovy</code>版的自定义<code>Launcher</code></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.Launcher</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.VertxOptions</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.bridge.SLF4JBridgeHandler</span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">AruisLauncher</span> extends <span class=\"type\">Launcher</span> &#123;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    static &#123;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"type\">SLF4JBridgeHandler</span>.removeHandlersForRootLogger();</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"type\">SLF4JBridgeHandler</span>.install();</span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    static void main(<span class=\"type\">String</span>[] <span class=\"title\">args</span>) &#123;</span></span><br><span class=\"line\"><span class=\"class\">        new <span class=\"type\">AruisLauncher</span>().dispatch(<span class=\"title\">args</span>)</span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    @<span class=\"type\">Override</span></span></span><br><span class=\"line\"><span class=\"class\">    void beforeStartingVertx(<span class=\"type\">VertxOptions</span> <span class=\"title\">options</span>) &#123;</span></span><br><span class=\"line\"><span class=\"class\">        options.setWarningExceptionTime(10L * 1000 * 1000000)</span></span><br><span class=\"line\"><span class=\"class\">        options.setBlockedThreadCheckInterval(2000)</span></span><br><span class=\"line\"><span class=\"class\">        options.setMaxEventLoopExecuteTime(2L * 1000 * 1000000)</span></span><br><span class=\"line\"><span class=\"class\">        options.workerPoolSize = 20</span></span><br><span class=\"line\"><span class=\"class\">        super.beforeStartingVertx(<span class=\"title\">options</span>)</span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个<code>Launcher</code>中，我还额外做了几件事：</p>\n<ul>\n<li>用<code>slf4j</code>接管了<code>Vert.x</code>的日志</li>\n<li>提供一个<code>main</code>方法，方便<code>IDE</code>开发环境启动</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在<code>Vert.x</code>的官方example中，<code>mainClassName</code>一般是指定的<code>io.vertx.core.Launcher</code>，但是在实际应用中，如果我们也不加思索的用这个<code>Launcher</code>就会损失好多定制性，比如：</p>\n<ul>\n<li>blockedThreadCheckInterval（检查线程block定时时间间隔）</li>\n<li>warningExceptionTime（block多久后开始打印堆栈信息）</li>\n<li>maxEventLoopExecuteTime（允许<code>EventLoop</code>的最长执行时间）</li>\n</ul>\n<p>这些设置都是要在<code>Vertx</code>实例化之前准备好的，只要不是Embedded应用（也就是自己调用<code>Vertx.vertx()</code>），那就只剩接管<code>Launcher</code>这条路了，下面分享一个<code>groovy</code>版的自定义<code>Launcher</code></p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.Launcher</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.vertx.core.VertxOptions</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.bridge.SLF4JBridgeHandler</span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"type\">AruisLauncher</span> extends <span class=\"type\">Launcher</span> &#123;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    static &#123;</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"type\">SLF4JBridgeHandler</span>.removeHandlersForRootLogger();</span></span><br><span class=\"line\"><span class=\"class\">        <span class=\"type\">SLF4JBridgeHandler</span>.install();</span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    static void main(<span class=\"type\">String</span>[] <span class=\"title\">args</span>) &#123;</span></span><br><span class=\"line\"><span class=\"class\">        new <span class=\"type\">AruisLauncher</span>().dispatch(<span class=\"title\">args</span>)</span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">    @<span class=\"type\">Override</span></span></span><br><span class=\"line\"><span class=\"class\">    void beforeStartingVertx(<span class=\"type\">VertxOptions</span> <span class=\"title\">options</span>) &#123;</span></span><br><span class=\"line\"><span class=\"class\">        options.setWarningExceptionTime(10L * 1000 * 1000000)</span></span><br><span class=\"line\"><span class=\"class\">        options.setBlockedThreadCheckInterval(2000)</span></span><br><span class=\"line\"><span class=\"class\">        options.setMaxEventLoopExecuteTime(2L * 1000 * 1000000)</span></span><br><span class=\"line\"><span class=\"class\">        options.workerPoolSize = 20</span></span><br><span class=\"line\"><span class=\"class\">        super.beforeStartingVertx(<span class=\"title\">options</span>)</span></span><br><span class=\"line\"><span class=\"class\">    &#125;</span></span><br><span class=\"line\"><span class=\"class\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在这个<code>Launcher</code>中，我还额外做了几件事：</p>\n<ul>\n<li>用<code>slf4j</code>接管了<code>Vert.x</code>的日志</li>\n<li>提供一个<code>main</code>方法，方便<code>IDE</code>开发环境启动</li>\n</ul>\n"},{"title":"备份mysql整库并还原到另外一处","date":"2018-10-08T08:56:17.000Z","_content":"### 全库\n```sh\nmysqldump -uXXX -pXXX --host=XXX --port=3306 --all-databases --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 test\n```\n\n### 制定数据库\n```shell\nmysqldump -uXXX -pXXX --host=XXX --port=3306 --databases db1 db2 --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 test\n```","source":"_posts/mysql-dump-restore.md","raw":"---\ntitle: 备份mysql整库并还原到另外一处\ndate: 2018-10-08 16:56:17\ncategories: 程序人生\ntags:\n    - MySQL\n---\n### 全库\n```sh\nmysqldump -uXXX -pXXX --host=XXX --port=3306 --all-databases --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 test\n```\n\n### 制定数据库\n```shell\nmysqldump -uXXX -pXXX --host=XXX --port=3306 --databases db1 db2 --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 test\n```","slug":"mysql-dump-restore","published":1,"updated":"2018-10-09T08:54:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmr004ry0mzhyk39tx2","content":"<h3 id=\"全库\"><a href=\"#全库\" class=\"headerlink\" title=\"全库\"></a>全库</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uXXX -pXXX --host=XXX --port=3306 --all-databases --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制定数据库\"><a href=\"#制定数据库\" class=\"headerlink\" title=\"制定数据库\"></a>制定数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uXXX -pXXX --host=XXX --port=3306 --databases db1 db2 --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 test</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"全库\"><a href=\"#全库\" class=\"headerlink\" title=\"全库\"></a>全库</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uXXX -pXXX --host=XXX --port=3306 --all-databases --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"制定数据库\"><a href=\"#制定数据库\" class=\"headerlink\" title=\"制定数据库\"></a>制定数据库</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqldump -uXXX -pXXX --host=XXX --port=3306 --databases db1 db2 --triggers --routines --events --add-drop-database  --skip-add-locks -C| mysql -uXXX -pXXX --host=XXX --port=3306 test</span><br></pre></td></tr></table></figure>"},{"title":"Javalin又一个小而美的Java Web框架","date":"2018-08-24T01:31:15.000Z","_content":"`Javalin`是`JVM`平台下一个上手极为容易的`Web`框架。有这么几个显著的特点：\n1. 简单便捷，不论是概念上还是真正上手开发，给人的感觉就是轻松写意\n2. 灵活，可以兼容同步和异步两种编程思路\n3. 小，即使是打成一个可以独立运行的`fat-jar`，大小才`4～5M`，就算把常用的`log`、`jdbc`等常用库放进去，估计也到不了`10M`\n\n官方支持的语言是`Java`和`Kotlin`，当然还有跟`Java`无缝兼容的`Groovy`，这个相当于买一赠一了。下面我们直接看一下`Kotlin`简单demo\n```java\npackage con.aruistar.studyjavalin\n\nimport io.javalin.Javalin\n\ndata class User(val name: String, val id: Int)\n\nfun main(args: Array<String>) {\n    val app = Javalin.create().start(7000)\n\n    val map = hashMapOf<String, Int>()\n    map.put(\"one\", 1)\n    map.put(\"two\", 2)\n\n    app.get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n    app.get(\"/json\") { ctx -> ctx.json(User(\"Alex\", 1)) }\n    app.get(\"/json/map\") { ctx -> ctx.json(map) }\n    app.after { ctx ->\n        println(\"log\")\n        println(ctx.resultString())\n    }\n}\n```\n有没有一种简单到没朋友的感觉，我想这段代码我不多解释，大家也都看得懂。其他特性还有很多，这里我从文档上摘录几个比较实用的：\n```java\nget(\"/hello/*/and/*\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1));\n});\n```\n```java\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\":id\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n    });\n});\n```\n```java\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\n```\n```java\napp.error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n更多功能请查看官方文档[javalin](https://javalin.io/documentation)\n\n### 最后说一下我个人对这个框架的一些看法\n如果你是个`Java`程序员，还从来没有用过`Spring`以外的`WEB`框架，那我推荐你试试`Javalin`；但如果你是站在公司立场，要为下一个项目做技术选型的话，我更建议你用经受过多年市场考验的[Vert.x](http://vertx.io)。\n如果你的项目中已经用过[SparkJava](http://sparkjava.com)了，那我觉得`Javalin`应该也在你的备选技术清单里。\n如果你是`node.js`程序员，想涉猎一下`Java`方面的开发，`Javalin`可能是个不错的尝试，因为从中你能找到`koa`的影子，我想你会觉得无比亲切。\n\n---\n本文demo已上传至https://github.com/aruis/studyjavalin","source":"_posts/javalin.md","raw":"---\ntitle: Javalin又一个小而美的Java Web框架\ndate: 2018-08-24 09:31:15\ncategories: 程序人生\ntags:\n    - WEB\n    - Kotlin\n---\n`Javalin`是`JVM`平台下一个上手极为容易的`Web`框架。有这么几个显著的特点：\n1. 简单便捷，不论是概念上还是真正上手开发，给人的感觉就是轻松写意\n2. 灵活，可以兼容同步和异步两种编程思路\n3. 小，即使是打成一个可以独立运行的`fat-jar`，大小才`4～5M`，就算把常用的`log`、`jdbc`等常用库放进去，估计也到不了`10M`\n\n官方支持的语言是`Java`和`Kotlin`，当然还有跟`Java`无缝兼容的`Groovy`，这个相当于买一赠一了。下面我们直接看一下`Kotlin`简单demo\n```java\npackage con.aruistar.studyjavalin\n\nimport io.javalin.Javalin\n\ndata class User(val name: String, val id: Int)\n\nfun main(args: Array<String>) {\n    val app = Javalin.create().start(7000)\n\n    val map = hashMapOf<String, Int>()\n    map.put(\"one\", 1)\n    map.put(\"two\", 2)\n\n    app.get(\"/\") { ctx -> ctx.result(\"Hello World\") }\n    app.get(\"/json\") { ctx -> ctx.json(User(\"Alex\", 1)) }\n    app.get(\"/json/map\") { ctx -> ctx.json(map) }\n    app.after { ctx ->\n        println(\"log\")\n        println(ctx.resultString())\n    }\n}\n```\n有没有一种简单到没朋友的感觉，我想这段代码我不多解释，大家也都看得懂。其他特性还有很多，这里我从文档上摘录几个比较实用的：\n```java\nget(\"/hello/*/and/*\", ctx -> {\n    ctx.result(\"Hello: \" + ctx.splat(0) + \" and \" + ctx.splat(1));\n});\n```\n```java\napp.routes(() -> {\n    path(\"users\", () -> {\n        get(UserController::getAllUsers);\n        post(UserController::createUser);\n        path(\":id\", () -> {\n            get(UserController::getUser);\n            patch(UserController::updateUser);\n            delete(UserController::deleteUser);\n        });\n    });\n});\n```\n```java\napp.exception(NullPointerException.class, (e, ctx) -> {\n    // handle nullpointers here\n});\n\n```\n```java\napp.error(404, ctx -> {\n    ctx.result(\"Generic 404 message\")\n});\n```\n更多功能请查看官方文档[javalin](https://javalin.io/documentation)\n\n### 最后说一下我个人对这个框架的一些看法\n如果你是个`Java`程序员，还从来没有用过`Spring`以外的`WEB`框架，那我推荐你试试`Javalin`；但如果你是站在公司立场，要为下一个项目做技术选型的话，我更建议你用经受过多年市场考验的[Vert.x](http://vertx.io)。\n如果你的项目中已经用过[SparkJava](http://sparkjava.com)了，那我觉得`Javalin`应该也在你的备选技术清单里。\n如果你是`node.js`程序员，想涉猎一下`Java`方面的开发，`Javalin`可能是个不错的尝试，因为从中你能找到`koa`的影子，我想你会觉得无比亲切。\n\n---\n本文demo已上传至https://github.com/aruis/studyjavalin","slug":"javalin","published":1,"updated":"2018-08-24T05:09:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqms004vy0mzgc33bvkd","content":"<p><code>Javalin</code>是<code>JVM</code>平台下一个上手极为容易的<code>Web</code>框架。有这么几个显著的特点：</p>\n<ol>\n<li>简单便捷，不论是概念上还是真正上手开发，给人的感觉就是轻松写意</li>\n<li>灵活，可以兼容同步和异步两种编程思路</li>\n<li>小，即使是打成一个可以独立运行的<code>fat-jar</code>，大小才<code>4～5M</code>，就算把常用的<code>log</code>、<code>jdbc</code>等常用库放进去，估计也到不了<code>10M</code></li>\n</ol>\n<p>官方支持的语言是<code>Java</code>和<code>Kotlin</code>，当然还有跟<code>Java</code>无缝兼容的<code>Groovy</code>，这个相当于买一赠一了。下面我们直接看一下<code>Kotlin</code>简单demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> con.aruistar.studyjavalin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.javalin.Javalin</span><br><span class=\"line\"></span><br><span class=\"line\">data <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(val name: String, val id: Int)</span><br><span class=\"line\"></span><br><span class=\"line\">fun <span class=\"title function_\">main</span><span class=\"params\">(args: Array&lt;String&gt;)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> Javalin.create().start(<span class=\"number\">7000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> hashMapOf&lt;String, Int&gt;()</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;one&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;two&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&quot;/&quot;</span>) &#123; ctx -&gt; ctx.result(<span class=\"string\">&quot;Hello World&quot;</span>) &#125;</span><br><span class=\"line\">    app.get(<span class=\"string\">&quot;/json&quot;</span>) &#123; ctx -&gt; ctx.json(User(<span class=\"string\">&quot;Alex&quot;</span>, <span class=\"number\">1</span>)) &#125;</span><br><span class=\"line\">    app.get(<span class=\"string\">&quot;/json/map&quot;</span>) &#123; ctx -&gt; ctx.json(map) &#125;</span><br><span class=\"line\">    app.after &#123; ctx -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;log&quot;</span>)</span><br><span class=\"line\">        println(ctx.resultString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有没有一种简单到没朋友的感觉，我想这段代码我不多解释，大家也都看得懂。其他特性还有很多，这里我从文档上摘录几个比较实用的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">get(<span class=\"string\">&quot;/hello/*/and/*&quot;</span>, ctx -&gt; &#123;</span><br><span class=\"line\">    ctx.result(<span class=\"string\">&quot;Hello: &quot;</span> + ctx.splat(<span class=\"number\">0</span>) + <span class=\"string\">&quot; and &quot;</span> + ctx.splat(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.routes(() -&gt; &#123;</span><br><span class=\"line\">    path(<span class=\"string\">&quot;users&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">        get(UserController::getAllUsers);</span><br><span class=\"line\">        post(UserController::createUser);</span><br><span class=\"line\">        path(<span class=\"string\">&quot;:id&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">            get(UserController::getUser);</span><br><span class=\"line\">            patch(UserController::updateUser);</span><br><span class=\"line\">            delete(UserController::deleteUser);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.exception(NullPointerException.class, (e, ctx) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle nullpointers here</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.error(<span class=\"number\">404</span>, ctx -&gt; &#123;</span><br><span class=\"line\">    ctx.result(<span class=\"string\">&quot;Generic 404 message&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>更多功能请查看官方文档<a href=\"https://javalin.io/documentation\">javalin</a></p>\n<h3 id=\"最后说一下我个人对这个框架的一些看法\"><a href=\"#最后说一下我个人对这个框架的一些看法\" class=\"headerlink\" title=\"最后说一下我个人对这个框架的一些看法\"></a>最后说一下我个人对这个框架的一些看法</h3><p>如果你是个<code>Java</code>程序员，还从来没有用过<code>Spring</code>以外的<code>WEB</code>框架，那我推荐你试试<code>Javalin</code>；但如果你是站在公司立场，要为下一个项目做技术选型的话，我更建议你用经受过多年市场考验的<a href=\"http://vertx.io/\">Vert.x</a>。<br>如果你的项目中已经用过<a href=\"http://sparkjava.com/\">SparkJava</a>了，那我觉得<code>Javalin</code>应该也在你的备选技术清单里。<br>如果你是<code>node.js</code>程序员，想涉猎一下<code>Java</code>方面的开发，<code>Javalin</code>可能是个不错的尝试，因为从中你能找到<code>koa</code>的影子，我想你会觉得无比亲切。</p>\n<hr>\n<p>本文demo已上传至<a href=\"https://github.com/aruis/studyjavalin\">https://github.com/aruis/studyjavalin</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>Javalin</code>是<code>JVM</code>平台下一个上手极为容易的<code>Web</code>框架。有这么几个显著的特点：</p>\n<ol>\n<li>简单便捷，不论是概念上还是真正上手开发，给人的感觉就是轻松写意</li>\n<li>灵活，可以兼容同步和异步两种编程思路</li>\n<li>小，即使是打成一个可以独立运行的<code>fat-jar</code>，大小才<code>4～5M</code>，就算把常用的<code>log</code>、<code>jdbc</code>等常用库放进去，估计也到不了<code>10M</code></li>\n</ol>\n<p>官方支持的语言是<code>Java</code>和<code>Kotlin</code>，当然还有跟<code>Java</code>无缝兼容的<code>Groovy</code>，这个相当于买一赠一了。下面我们直接看一下<code>Kotlin</code>简单demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> con.aruistar.studyjavalin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.javalin.Javalin</span><br><span class=\"line\"></span><br><span class=\"line\">data <span class=\"keyword\">class</span> <span class=\"title class_\">User</span>(val name: String, val id: Int)</span><br><span class=\"line\"></span><br><span class=\"line\">fun <span class=\"title function_\">main</span><span class=\"params\">(args: Array&lt;String&gt;)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">app</span> <span class=\"operator\">=</span> Javalin.create().start(<span class=\"number\">7000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">val</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> hashMapOf&lt;String, Int&gt;()</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;one&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    map.put(<span class=\"string\">&quot;two&quot;</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    app.get(<span class=\"string\">&quot;/&quot;</span>) &#123; ctx -&gt; ctx.result(<span class=\"string\">&quot;Hello World&quot;</span>) &#125;</span><br><span class=\"line\">    app.get(<span class=\"string\">&quot;/json&quot;</span>) &#123; ctx -&gt; ctx.json(User(<span class=\"string\">&quot;Alex&quot;</span>, <span class=\"number\">1</span>)) &#125;</span><br><span class=\"line\">    app.get(<span class=\"string\">&quot;/json/map&quot;</span>) &#123; ctx -&gt; ctx.json(map) &#125;</span><br><span class=\"line\">    app.after &#123; ctx -&gt;</span><br><span class=\"line\">        println(<span class=\"string\">&quot;log&quot;</span>)</span><br><span class=\"line\">        println(ctx.resultString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有没有一种简单到没朋友的感觉，我想这段代码我不多解释，大家也都看得懂。其他特性还有很多，这里我从文档上摘录几个比较实用的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">get(<span class=\"string\">&quot;/hello/*/and/*&quot;</span>, ctx -&gt; &#123;</span><br><span class=\"line\">    ctx.result(<span class=\"string\">&quot;Hello: &quot;</span> + ctx.splat(<span class=\"number\">0</span>) + <span class=\"string\">&quot; and &quot;</span> + ctx.splat(<span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.routes(() -&gt; &#123;</span><br><span class=\"line\">    path(<span class=\"string\">&quot;users&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">        get(UserController::getAllUsers);</span><br><span class=\"line\">        post(UserController::createUser);</span><br><span class=\"line\">        path(<span class=\"string\">&quot;:id&quot;</span>, () -&gt; &#123;</span><br><span class=\"line\">            get(UserController::getUser);</span><br><span class=\"line\">            patch(UserController::updateUser);</span><br><span class=\"line\">            delete(UserController::deleteUser);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.exception(NullPointerException.class, (e, ctx) -&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle nullpointers here</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">app.error(<span class=\"number\">404</span>, ctx -&gt; &#123;</span><br><span class=\"line\">    ctx.result(<span class=\"string\">&quot;Generic 404 message&quot;</span>)</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>更多功能请查看官方文档<a href=\"https://javalin.io/documentation\">javalin</a></p>\n<h3 id=\"最后说一下我个人对这个框架的一些看法\"><a href=\"#最后说一下我个人对这个框架的一些看法\" class=\"headerlink\" title=\"最后说一下我个人对这个框架的一些看法\"></a>最后说一下我个人对这个框架的一些看法</h3><p>如果你是个<code>Java</code>程序员，还从来没有用过<code>Spring</code>以外的<code>WEB</code>框架，那我推荐你试试<code>Javalin</code>；但如果你是站在公司立场，要为下一个项目做技术选型的话，我更建议你用经受过多年市场考验的<a href=\"http://vertx.io/\">Vert.x</a>。<br>如果你的项目中已经用过<a href=\"http://sparkjava.com/\">SparkJava</a>了，那我觉得<code>Javalin</code>应该也在你的备选技术清单里。<br>如果你是<code>node.js</code>程序员，想涉猎一下<code>Java</code>方面的开发，<code>Javalin</code>可能是个不错的尝试，因为从中你能找到<code>koa</code>的影子，我想你会觉得无比亲切。</p>\n<hr>\n<p>本文demo已上传至<a href=\"https://github.com/aruis/studyjavalin\">https://github.com/aruis/studyjavalin</a></p>\n"},{"title":"nginx中使用rewrite重定向","date":"2018-09-20T07:31:30.000Z","_content":"`nginx`中配置重定向，虽然有下面这种写法\n```\nreturn 301 https://www.yourdomain.com$request_uri;\n```\n但是仍不及`rewrite`好用强大。其基本语法是\n```\nSyntax:\trewrite regex replacement [flag];\nDefault:\t—\nContext:\tserver, location, if\n```\n举个例子\n```\nrewrite ^/(.*)$ https://www.qxnaqy.com permanent;\n```\n`rewrite`后面紧跟的是正则表达式，用来匹配url。而`replacement`可以是`http`开头的绝对路径，就会触发重定向。如果不是绝对路径，则默认是触发重写。\n重定向与重写的区别是，前者是浏览器有感知的，通过`302`、`301`通知浏览器url资源发生了变化，由浏览器再次发起请求，访问目标路径；后者是浏览器无感知的，由`nginx`延续接下来已改变的请求。\n但是如果`flag`指定了`redirect`或者`permanent`时，一定是触发的重定向。\n文档中关于`flag`的解释如下\n```\nlast\nstops processing the current set of ngx_http_rewrite_module directives and starts a search for a new location matching the changed URI;\nbreak\nstops processing the current set of ngx_http_rewrite_module directives as with the break directive;\nredirect\nreturns a temporary redirect with the 302 code; used if a replacement string does not start with “http://”, “https://”, or “$scheme”;\npermanent\nreturns a permanent redirect with the 301 code.\n```\n也就是说，如果想做`301`重定向，务必使用`permanent`，如果想做`302`，根据`replacement`的内容来决定是否使用`redirect`。\n`last`的意思是，命中更改的`uri`之后，接着拿新的`uri`尝试匹配。这就会出现一种情况，当新的`uri`规则又满足之前匹配模式，就会进入一种死循环状态，所以就引入了`break`。可以参考文档中的这段\n```\nThe full redirect URL is formed according to the request scheme ($scheme) and the server_name_in_redirect and port_in_redirect directives.\n\nExample:\n\nserver {\n    ...\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\n    return  403;\n    ...\n}\nBut if these directives are put inside the “/download/” location, the last flag should be replaced by break, or otherwise nginx will make 10 cycles and return the 500 error:\n\nlocation /download/ {\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;\n    return  403;\n}\n```\n\n\n\n","source":"_posts/nginx_rewrite.md","raw":"---\ntitle: nginx中使用rewrite重定向\ndate: 2018-09-20 15:31:30\ncategories: 程序人生\ntags:\n    - nginx\n---\n`nginx`中配置重定向，虽然有下面这种写法\n```\nreturn 301 https://www.yourdomain.com$request_uri;\n```\n但是仍不及`rewrite`好用强大。其基本语法是\n```\nSyntax:\trewrite regex replacement [flag];\nDefault:\t—\nContext:\tserver, location, if\n```\n举个例子\n```\nrewrite ^/(.*)$ https://www.qxnaqy.com permanent;\n```\n`rewrite`后面紧跟的是正则表达式，用来匹配url。而`replacement`可以是`http`开头的绝对路径，就会触发重定向。如果不是绝对路径，则默认是触发重写。\n重定向与重写的区别是，前者是浏览器有感知的，通过`302`、`301`通知浏览器url资源发生了变化，由浏览器再次发起请求，访问目标路径；后者是浏览器无感知的，由`nginx`延续接下来已改变的请求。\n但是如果`flag`指定了`redirect`或者`permanent`时，一定是触发的重定向。\n文档中关于`flag`的解释如下\n```\nlast\nstops processing the current set of ngx_http_rewrite_module directives and starts a search for a new location matching the changed URI;\nbreak\nstops processing the current set of ngx_http_rewrite_module directives as with the break directive;\nredirect\nreturns a temporary redirect with the 302 code; used if a replacement string does not start with “http://”, “https://”, or “$scheme”;\npermanent\nreturns a permanent redirect with the 301 code.\n```\n也就是说，如果想做`301`重定向，务必使用`permanent`，如果想做`302`，根据`replacement`的内容来决定是否使用`redirect`。\n`last`的意思是，命中更改的`uri`之后，接着拿新的`uri`尝试匹配。这就会出现一种情况，当新的`uri`规则又满足之前匹配模式，就会进入一种死循环状态，所以就引入了`break`。可以参考文档中的这段\n```\nThe full redirect URL is formed according to the request scheme ($scheme) and the server_name_in_redirect and port_in_redirect directives.\n\nExample:\n\nserver {\n    ...\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 last;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  last;\n    return  403;\n    ...\n}\nBut if these directives are put inside the “/download/” location, the last flag should be replaced by break, or otherwise nginx will make 10 cycles and return the 500 error:\n\nlocation /download/ {\n    rewrite ^(/download/.*)/media/(.*)\\..*$ $1/mp3/$2.mp3 break;\n    rewrite ^(/download/.*)/audio/(.*)\\..*$ $1/mp3/$2.ra  break;\n    return  403;\n}\n```\n\n\n\n","slug":"nginx_rewrite","published":1,"updated":"2018-09-20T08:18:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqms004yy0mz2btae5mt","content":"<p><code>nginx</code>中配置重定向，虽然有下面这种写法</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">return <span class=\"number\">301</span> https:<span class=\"regexp\">//</span>www.yourdomain.com<span class=\"variable\">$request_uri</span>;</span><br></pre></td></tr></table></figure>\n<p>但是仍不及<code>rewrite</code>好用强大。其基本语法是</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Syntax:</span>\trewrite regex replacement [flag]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">Default:</span>\t—</span><br><span class=\"line\"><span class=\"symbol\">Context:</span>\tserver, location, if</span><br></pre></td></tr></table></figure>\n<p>举个例子</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://www.qxnaqy.com <span class=\"literal\">permanent</span>;</span><br></pre></td></tr></table></figure>\n<p><code>rewrite</code>后面紧跟的是正则表达式，用来匹配url。而<code>replacement</code>可以是<code>http</code>开头的绝对路径，就会触发重定向。如果不是绝对路径，则默认是触发重写。<br>重定向与重写的区别是，前者是浏览器有感知的，通过<code>302</code>、<code>301</code>通知浏览器url资源发生了变化，由浏览器再次发起请求，访问目标路径；后者是浏览器无感知的，由<code>nginx</code>延续接下来已改变的请求。<br>但是如果<code>flag</code>指定了<code>redirect</code>或者<code>permanent</code>时，一定是触发的重定向。<br>文档中关于<code>flag</code>的解释如下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">last</span><br><span class=\"line\">stops processing the <span class=\"keyword\">current</span> <span class=\"keyword\">set</span> <span class=\"keyword\">of</span> ngx_http_rewrite_module directives <span class=\"keyword\">and</span> starts a <span class=\"keyword\">search</span> <span class=\"keyword\">for</span> a <span class=\"built_in\">new</span> <span class=\"keyword\">location</span> matching the changed URI;</span><br><span class=\"line\">break</span><br><span class=\"line\">stops processing the <span class=\"keyword\">current</span> <span class=\"keyword\">set</span> <span class=\"keyword\">of</span> ngx_http_rewrite_module directives <span class=\"keyword\">as</span> <span class=\"keyword\">with</span> the break directive;</span><br><span class=\"line\">redirect</span><br><span class=\"line\"><span class=\"keyword\">returns</span> a <span class=\"keyword\">temporary</span> redirect <span class=\"keyword\">with</span> the <span class=\"number\">302</span> code; used <span class=\"keyword\">if</span> a replacement string does <span class=\"keyword\">not</span> <span class=\"keyword\">start</span> <span class=\"keyword\">with</span> “http://”, “https://”, <span class=\"keyword\">or</span> “$scheme”;</span><br><span class=\"line\">permanent</span><br><span class=\"line\"><span class=\"keyword\">returns</span> a permanent redirect <span class=\"keyword\">with</span> the <span class=\"number\">301</span> code.</span><br></pre></td></tr></table></figure>\n<p>也就是说，如果想做<code>301</code>重定向，务必使用<code>permanent</code>，如果想做<code>302</code>，根据<code>replacement</code>的内容来决定是否使用<code>redirect</code>。<br><code>last</code>的意思是，命中更改的<code>uri</code>之后，接着拿新的<code>uri</code>尝试匹配。这就会出现一种情况，当新的<code>uri</code>规则又满足之前匹配模式，就会进入一种死循环状态，所以就引入了<code>break</code>。可以参考文档中的这段</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">The full redirect URL is formed according to the request scheme (<span class=\"variable\">$scheme</span>) and the server_name_in_redirect and port_in_redirect directives.</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/media/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.mp3 last;</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/audio/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.ra  last;</span><br><span class=\"line\">    return  <span class=\"number\">403</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">But <span class=\"keyword\">if</span> these directives are put inside the “<span class=\"regexp\">/download/</span>” location, the last flag should be replaced by <span class=\"keyword\">break</span>, or otherwise nginx will make <span class=\"number\">10</span> cycles and return the <span class=\"number\">500</span> error:</span><br><span class=\"line\"></span><br><span class=\"line\">location <span class=\"regexp\">/download/</span> &#123;</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/media/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.mp3 <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/audio/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.ra  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    return  <span class=\"number\">403</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><code>nginx</code>中配置重定向，虽然有下面这种写法</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">return <span class=\"number\">301</span> https:<span class=\"regexp\">//</span>www.yourdomain.com<span class=\"variable\">$request_uri</span>;</span><br></pre></td></tr></table></figure>\n<p>但是仍不及<code>rewrite</code>好用强大。其基本语法是</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">Syntax:</span>\trewrite regex replacement [flag]<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">Default:</span>\t—</span><br><span class=\"line\"><span class=\"symbol\">Context:</span>\tserver, location, if</span><br></pre></td></tr></table></figure>\n<p>举个例子</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^/(.*)$</span> https://www.qxnaqy.com <span class=\"literal\">permanent</span>;</span><br></pre></td></tr></table></figure>\n<p><code>rewrite</code>后面紧跟的是正则表达式，用来匹配url。而<code>replacement</code>可以是<code>http</code>开头的绝对路径，就会触发重定向。如果不是绝对路径，则默认是触发重写。<br>重定向与重写的区别是，前者是浏览器有感知的，通过<code>302</code>、<code>301</code>通知浏览器url资源发生了变化，由浏览器再次发起请求，访问目标路径；后者是浏览器无感知的，由<code>nginx</code>延续接下来已改变的请求。<br>但是如果<code>flag</code>指定了<code>redirect</code>或者<code>permanent</code>时，一定是触发的重定向。<br>文档中关于<code>flag</code>的解释如下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">last</span><br><span class=\"line\">stops processing the <span class=\"keyword\">current</span> <span class=\"keyword\">set</span> <span class=\"keyword\">of</span> ngx_http_rewrite_module directives <span class=\"keyword\">and</span> starts a <span class=\"keyword\">search</span> <span class=\"keyword\">for</span> a <span class=\"built_in\">new</span> <span class=\"keyword\">location</span> matching the changed URI;</span><br><span class=\"line\">break</span><br><span class=\"line\">stops processing the <span class=\"keyword\">current</span> <span class=\"keyword\">set</span> <span class=\"keyword\">of</span> ngx_http_rewrite_module directives <span class=\"keyword\">as</span> <span class=\"keyword\">with</span> the break directive;</span><br><span class=\"line\">redirect</span><br><span class=\"line\"><span class=\"keyword\">returns</span> a <span class=\"keyword\">temporary</span> redirect <span class=\"keyword\">with</span> the <span class=\"number\">302</span> code; used <span class=\"keyword\">if</span> a replacement string does <span class=\"keyword\">not</span> <span class=\"keyword\">start</span> <span class=\"keyword\">with</span> “http://”, “https://”, <span class=\"keyword\">or</span> “$scheme”;</span><br><span class=\"line\">permanent</span><br><span class=\"line\"><span class=\"keyword\">returns</span> a permanent redirect <span class=\"keyword\">with</span> the <span class=\"number\">301</span> code.</span><br></pre></td></tr></table></figure>\n<p>也就是说，如果想做<code>301</code>重定向，务必使用<code>permanent</code>，如果想做<code>302</code>，根据<code>replacement</code>的内容来决定是否使用<code>redirect</code>。<br><code>last</code>的意思是，命中更改的<code>uri</code>之后，接着拿新的<code>uri</code>尝试匹配。这就会出现一种情况，当新的<code>uri</code>规则又满足之前匹配模式，就会进入一种死循环状态，所以就引入了<code>break</code>。可以参考文档中的这段</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">The full redirect URL is formed according to the request scheme (<span class=\"variable\">$scheme</span>) and the server_name_in_redirect and port_in_redirect directives.</span><br><span class=\"line\"></span><br><span class=\"line\">Example:</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/media/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.mp3 last;</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/audio/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.ra  last;</span><br><span class=\"line\">    return  <span class=\"number\">403</span>;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">But <span class=\"keyword\">if</span> these directives are put inside the “<span class=\"regexp\">/download/</span>” location, the last flag should be replaced by <span class=\"keyword\">break</span>, or otherwise nginx will make <span class=\"number\">10</span> cycles and return the <span class=\"number\">500</span> error:</span><br><span class=\"line\"></span><br><span class=\"line\">location <span class=\"regexp\">/download/</span> &#123;</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/media/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.mp3 <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    rewrite ^(<span class=\"regexp\">/download/</span>.*)<span class=\"regexp\">/audio/</span>(.*)\\..*$ <span class=\"variable\">$1</span><span class=\"regexp\">/mp3/</span><span class=\"variable\">$2</span>.ra  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    return  <span class=\"number\">403</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"ssh连接保活，mosh初体验","date":"2018-08-24T23:11:11.000Z","_content":"传统的`ssh`最恼人的就是放着不动，没多久就丢了。有时候`tail -f`跟踪一个日志，一会日志没动静，可能`ssh`就已经阵亡了，而我还没反应过来，还琢磨着日志该出来了。烦。\n前两天研究`iTerm2`的时候，看到有人分享`mosh`的相关知识，提到它最大的优点就是`ssh`保活。马上决定一试。\n1. 服务端安装\n```\nyum install mosh\n```\n\n2. 防火墙放行端口，端口从`60000`排队起步，根据同时可能产生的连接数量，适当放行几个就好\n```shell\nfirewall-cmd --add-port=60000-60010/udp --permanent\nfirewall-cmd --reload\n```\n\n3. 客户端同样安装`mosh`\n```\nbrew install mosh\n```\n\n4. 客户端使用\n    ```\n    mosh -ssh=\"ssh -p 3322\" root@192.168.0.88\n    ```\n    上面的`-ssh`命令主要是用在`ssh`端口不是开在`22`的情况下，需要指定端口。因为`mosh`自己的`-p`是指的`mosh`自身要用的`udp`端口。\n    另外，如果你维护了`～/.ssh/config`文件的话，那么恭喜你，`mosh`可以直接读取这个`config`，也就是说，之前`ssh a_server`可以无缝替换成`mosh a_server`\n\n5. 排错，如果遇到客户端访问不了服务器，并且有如下提示\n    ```\n    locale: Cannot set LC_CTYPE to default locale: No such file or directory\n    locale: Cannot set LC_ALL to default locale: No such file or directory\n    ...\n    ...\n    Connection to xxx.xxx.xxx.xxx closed.\n    /usr/local/bin/mosh: Did not find mosh server startup message. (Have you installed mosh on your server?)\n    ```\n    可以尝试在服务器上的`~/.bashrc`文件追加这两行解决\n    ```\n    export LANG=en_US.UTF-8\n    export LC_ALL=en_US.UTF-8\n    ```\n\n6. 最后说下实际体验感受\n    的确大大延长了`ssh`的可用时间，但是像网上说的能坚持个个把月，很遗憾我并没有那么幸运，不过`mosh`仍然是个值得推荐的工具。","source":"_posts/mosh.md","raw":"---\ntitle: ssh连接保活，mosh初体验\ndate: 2018-08-25 07:11:11\ncategories: 程序人生\ntags:\n    - Linux\n---\n传统的`ssh`最恼人的就是放着不动，没多久就丢了。有时候`tail -f`跟踪一个日志，一会日志没动静，可能`ssh`就已经阵亡了，而我还没反应过来，还琢磨着日志该出来了。烦。\n前两天研究`iTerm2`的时候，看到有人分享`mosh`的相关知识，提到它最大的优点就是`ssh`保活。马上决定一试。\n1. 服务端安装\n```\nyum install mosh\n```\n\n2. 防火墙放行端口，端口从`60000`排队起步，根据同时可能产生的连接数量，适当放行几个就好\n```shell\nfirewall-cmd --add-port=60000-60010/udp --permanent\nfirewall-cmd --reload\n```\n\n3. 客户端同样安装`mosh`\n```\nbrew install mosh\n```\n\n4. 客户端使用\n    ```\n    mosh -ssh=\"ssh -p 3322\" root@192.168.0.88\n    ```\n    上面的`-ssh`命令主要是用在`ssh`端口不是开在`22`的情况下，需要指定端口。因为`mosh`自己的`-p`是指的`mosh`自身要用的`udp`端口。\n    另外，如果你维护了`～/.ssh/config`文件的话，那么恭喜你，`mosh`可以直接读取这个`config`，也就是说，之前`ssh a_server`可以无缝替换成`mosh a_server`\n\n5. 排错，如果遇到客户端访问不了服务器，并且有如下提示\n    ```\n    locale: Cannot set LC_CTYPE to default locale: No such file or directory\n    locale: Cannot set LC_ALL to default locale: No such file or directory\n    ...\n    ...\n    Connection to xxx.xxx.xxx.xxx closed.\n    /usr/local/bin/mosh: Did not find mosh server startup message. (Have you installed mosh on your server?)\n    ```\n    可以尝试在服务器上的`~/.bashrc`文件追加这两行解决\n    ```\n    export LANG=en_US.UTF-8\n    export LC_ALL=en_US.UTF-8\n    ```\n\n6. 最后说下实际体验感受\n    的确大大延长了`ssh`的可用时间，但是像网上说的能坚持个个把月，很遗憾我并没有那么幸运，不过`mosh`仍然是个值得推荐的工具。","slug":"mosh","published":1,"updated":"2018-08-24T23:58:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqms0052y0mz3v5cg22f","content":"<p>传统的<code>ssh</code>最恼人的就是放着不动，没多久就丢了。有时候<code>tail -f</code>跟踪一个日志，一会日志没动静，可能<code>ssh</code>就已经阵亡了，而我还没反应过来，还琢磨着日志该出来了。烦。<br>前两天研究<code>iTerm2</code>的时候，看到有人分享<code>mosh</code>的相关知识，提到它最大的优点就是<code>ssh</code>保活。马上决定一试。</p>\n<ol>\n<li><p>服务端安装</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> mosh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>防火墙放行端口，端口从<code>60000</code>排队起步，根据同时可能产生的连接数量，适当放行几个就好</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port=60000-60010/udp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端同样安装<code>mosh</code></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>mosh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端使用</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mosh</span> -ssh=<span class=\"string\">&quot;ssh -p 3322&quot;</span> root@<span class=\"number\">192.168.0.88</span></span><br></pre></td></tr></table></figure>\n<p> 上面的<code>-ssh</code>命令主要是用在<code>ssh</code>端口不是开在<code>22</code>的情况下，需要指定端口。因为<code>mosh</code>自己的<code>-p</code>是指的<code>mosh</code>自身要用的<code>udp</code>端口。<br> 另外，如果你维护了<code>～/.ssh/config</code>文件的话，那么恭喜你，<code>mosh</code>可以直接读取这个<code>config</code>，也就是说，之前<code>ssh a_server</code>可以无缝替换成<code>mosh a_server</code></p>\n</li>\n<li><p>排错，如果遇到客户端访问不了服务器，并且有如下提示</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">locale: Cannot <span class=\"built_in\">set</span> LC_CTYPE <span class=\"keyword\">to</span><span class=\"built_in\"> default </span>locale: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\">locale: Cannot <span class=\"built_in\">set</span> LC_ALL <span class=\"keyword\">to</span><span class=\"built_in\"> default </span>locale: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\"><span class=\"built_in\">..</span>.</span><br><span class=\"line\"><span class=\"built_in\">..</span>.<span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">Connection </span><span class=\"keyword\">to</span> xxx.xxx.xxx.xxx closed.</span><br><span class=\"line\">/usr/local/bin/mosh: Did <span class=\"keyword\">not</span> <span class=\"built_in\">find</span> mosh<span class=\"built_in\"> server </span>startup message. (Have you installed mosh on your server?)</span><br></pre></td></tr></table></figure>\n<p> 可以尝试在服务器上的<code>~/.bashrc</code>文件追加这两行解决</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">LANG</span>=en_US.UTF-8</span><br><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">LC_ALL</span>=en_US.UTF-8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后说下实际体验感受<br> 的确大大延长了<code>ssh</code>的可用时间，但是像网上说的能坚持个个把月，很遗憾我并没有那么幸运，不过<code>mosh</code>仍然是个值得推荐的工具。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>传统的<code>ssh</code>最恼人的就是放着不动，没多久就丢了。有时候<code>tail -f</code>跟踪一个日志，一会日志没动静，可能<code>ssh</code>就已经阵亡了，而我还没反应过来，还琢磨着日志该出来了。烦。<br>前两天研究<code>iTerm2</code>的时候，看到有人分享<code>mosh</code>的相关知识，提到它最大的优点就是<code>ssh</code>保活。马上决定一试。</p>\n<ol>\n<li><p>服务端安装</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum <span class=\"keyword\">install</span> mosh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>防火墙放行端口，端口从<code>60000</code>排队起步，根据同时可能产生的连接数量，适当放行几个就好</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">firewall-cmd --add-port=60000-60010/udp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端同样安装<code>mosh</code></p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">brew </span><span class=\"keyword\">install </span>mosh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端使用</p>\n <figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">mosh</span> -ssh=<span class=\"string\">&quot;ssh -p 3322&quot;</span> root@<span class=\"number\">192.168.0.88</span></span><br></pre></td></tr></table></figure>\n<p> 上面的<code>-ssh</code>命令主要是用在<code>ssh</code>端口不是开在<code>22</code>的情况下，需要指定端口。因为<code>mosh</code>自己的<code>-p</code>是指的<code>mosh</code>自身要用的<code>udp</code>端口。<br> 另外，如果你维护了<code>～/.ssh/config</code>文件的话，那么恭喜你，<code>mosh</code>可以直接读取这个<code>config</code>，也就是说，之前<code>ssh a_server</code>可以无缝替换成<code>mosh a_server</code></p>\n</li>\n<li><p>排错，如果遇到客户端访问不了服务器，并且有如下提示</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">locale: Cannot <span class=\"built_in\">set</span> LC_CTYPE <span class=\"keyword\">to</span><span class=\"built_in\"> default </span>locale: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\">locale: Cannot <span class=\"built_in\">set</span> LC_ALL <span class=\"keyword\">to</span><span class=\"built_in\"> default </span>locale: <span class=\"literal\">No</span> such file <span class=\"keyword\">or</span> directory</span><br><span class=\"line\"><span class=\"built_in\">..</span>.</span><br><span class=\"line\"><span class=\"built_in\">..</span>.<span class=\"built_in\"></span></span><br><span class=\"line\"><span class=\"built_in\">Connection </span><span class=\"keyword\">to</span> xxx.xxx.xxx.xxx closed.</span><br><span class=\"line\">/usr/local/bin/mosh: Did <span class=\"keyword\">not</span> <span class=\"built_in\">find</span> mosh<span class=\"built_in\"> server </span>startup message. (Have you installed mosh on your server?)</span><br></pre></td></tr></table></figure>\n<p> 可以尝试在服务器上的<code>~/.bashrc</code>文件追加这两行解决</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">LANG</span>=en_US.UTF-8</span><br><span class=\"line\"><span class=\"built_in\">export</span> <span class=\"attribute\">LC_ALL</span>=en_US.UTF-8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最后说下实际体验感受<br> 的确大大延长了<code>ssh</code>的可用时间，但是像网上说的能坚持个个把月，很遗憾我并没有那么幸运，不过<code>mosh</code>仍然是个值得推荐的工具。</p>\n</li>\n</ol>\n"},{"title":"用pg_cron定时刷新PostgreSQL的物化视图","date":"2018-08-10T23:04:30.000Z","_content":"在`PostgreSQL`中可以很轻松的创建物化视图，但是却没有自动刷新物化视图的机制。通常来说，不外乎两种方式，一种是通过触发器，另一种就是定时任务调度。今天我们就来说说第二种方式。\n主要借助一个名为[pg_cron](https://github.com/citusdata/pg_cron)的扩展。\n安装方法在官方介绍里面已经说的很清楚了，不再赘述，这里提醒一点，安装完后，是需要修改`postgresql.conf`配置文件，并重启`PostgreSQL`服务的。具体修改如下：\n```\nshared_preload_libraries = 'pg_cron'\ncron.database_name = 'postgres'\n```\n第二行的指定`cron`的元数据相关信息存放的数据库，是可以改成其他的。这里要明确一个概念，`cron`安装的数据库，和它要控制的数据库没有什么必然联系，并不因为说安装在了`postgres`库，就不能调度其他库了，这个在后续具体配置的时候，就能明白了。\n做完上述步骤，保证`PostgreSQL`服务重启过后，就可以用`psql`或其他工具连接到`cron.database_name`对应的数据，执行\n```\nCREATE EXTENSION pg_cron;\n```\n如果不在指定的库执行的话，会遇到错误\n```\nJobs must be scheduled from the database configured in cron.database_name, since the pg_cron background worker reads job descriptions from this database.\n```\n届时注意即可。\n一切准备就绪后，就可以使用了，使用方式相当简单。这里我用一个查询`now()`的物化视图做演示\n```\ncreate materialized view now as select now();\nSELECT cron.schedule('26 * * * *', 'refresh materialized view now;');\n```\n这就实现了每小时26分的时候去刷新物化视图，也就是意味着，任意时候执行\n```\nselect * from now;\n```\n获得的结果，都是距离此刻最近的26分，而不是当前时间。\n那么，已经创建的任务，该如何管理呢。其实很简单，定时任务数据都存放在`cron.job`表中，我们看看里面的数据就明白了。\n```\n+---------+------------+--------------------------------+------------+------------+------------+------------+\n| jobid   | schedule   | command                        | nodename   | nodeport   | database   | username   |\n|---------+------------+--------------------------------+------------+------------+------------+------------|\n| 1       | 26 * * * * | refresh materialized view now; | localhost  | 5432       | analyze    | postgres   |\n+---------+------------+--------------------------------+------------+------------+------------+------------+\n```\n如果要取消一个任务，就需要拿到`jobid`，然后执行下面这句就好了。\n```\nselect cron.unschedule(1)\n```\n","source":"_posts/pg_cron_and_materialized_view.md","raw":"---\ntitle: 用pg_cron定时刷新PostgreSQL的物化视图\ndate: 2018-08-11 07:04:30\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n在`PostgreSQL`中可以很轻松的创建物化视图，但是却没有自动刷新物化视图的机制。通常来说，不外乎两种方式，一种是通过触发器，另一种就是定时任务调度。今天我们就来说说第二种方式。\n主要借助一个名为[pg_cron](https://github.com/citusdata/pg_cron)的扩展。\n安装方法在官方介绍里面已经说的很清楚了，不再赘述，这里提醒一点，安装完后，是需要修改`postgresql.conf`配置文件，并重启`PostgreSQL`服务的。具体修改如下：\n```\nshared_preload_libraries = 'pg_cron'\ncron.database_name = 'postgres'\n```\n第二行的指定`cron`的元数据相关信息存放的数据库，是可以改成其他的。这里要明确一个概念，`cron`安装的数据库，和它要控制的数据库没有什么必然联系，并不因为说安装在了`postgres`库，就不能调度其他库了，这个在后续具体配置的时候，就能明白了。\n做完上述步骤，保证`PostgreSQL`服务重启过后，就可以用`psql`或其他工具连接到`cron.database_name`对应的数据，执行\n```\nCREATE EXTENSION pg_cron;\n```\n如果不在指定的库执行的话，会遇到错误\n```\nJobs must be scheduled from the database configured in cron.database_name, since the pg_cron background worker reads job descriptions from this database.\n```\n届时注意即可。\n一切准备就绪后，就可以使用了，使用方式相当简单。这里我用一个查询`now()`的物化视图做演示\n```\ncreate materialized view now as select now();\nSELECT cron.schedule('26 * * * *', 'refresh materialized view now;');\n```\n这就实现了每小时26分的时候去刷新物化视图，也就是意味着，任意时候执行\n```\nselect * from now;\n```\n获得的结果，都是距离此刻最近的26分，而不是当前时间。\n那么，已经创建的任务，该如何管理呢。其实很简单，定时任务数据都存放在`cron.job`表中，我们看看里面的数据就明白了。\n```\n+---------+------------+--------------------------------+------------+------------+------------+------------+\n| jobid   | schedule   | command                        | nodename   | nodeport   | database   | username   |\n|---------+------------+--------------------------------+------------+------------+------------+------------|\n| 1       | 26 * * * * | refresh materialized view now; | localhost  | 5432       | analyze    | postgres   |\n+---------+------------+--------------------------------+------------+------------+------------+------------+\n```\n如果要取消一个任务，就需要拿到`jobid`，然后执行下面这句就好了。\n```\nselect cron.unschedule(1)\n```\n","slug":"pg_cron_and_materialized_view","published":1,"updated":"2018-08-10T23:27:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmt0055y0mzcf8u6cfv","content":"<p>在<code>PostgreSQL</code>中可以很轻松的创建物化视图，但是却没有自动刷新物化视图的机制。通常来说，不外乎两种方式，一种是通过触发器，另一种就是定时任务调度。今天我们就来说说第二种方式。<br>主要借助一个名为<a href=\"https://github.com/citusdata/pg_cron\">pg_cron</a>的扩展。<br>安装方法在官方介绍里面已经说的很清楚了，不再赘述，这里提醒一点，安装完后，是需要修改<code>postgresql.conf</code>配置文件，并重启<code>PostgreSQL</code>服务的。具体修改如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">shared_preload_libraries</span> = <span class=\"string\">&#x27;pg_cron&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">cron.database_name</span> = <span class=\"string\">&#x27;postgres&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>第二行的指定<code>cron</code>的元数据相关信息存放的数据库，是可以改成其他的。这里要明确一个概念，<code>cron</code>安装的数据库，和它要控制的数据库没有什么必然联系，并不因为说安装在了<code>postgres</code>库，就不能调度其他库了，这个在后续具体配置的时候，就能明白了。<br>做完上述步骤，保证<code>PostgreSQL</code>服务重启过后，就可以用<code>psql</code>或其他工具连接到<code>cron.database_name</code>对应的数据，执行</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTENSION</span> pg_cron;</span><br></pre></td></tr></table></figure>\n<p>如果不在指定的库执行的话，会遇到错误</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">Jobs must be scheduled <span class=\"keyword\">from</span> the <span class=\"keyword\">database</span> configured <span class=\"keyword\">in</span> cron.database_name, since the pg_cron background worker reads job descriptions <span class=\"keyword\">from</span> this <span class=\"keyword\">database</span>.</span><br></pre></td></tr></table></figure>\n<p>届时注意即可。<br>一切准备就绪后，就可以使用了，使用方式相当简单。这里我用一个查询<code>now()</code>的物化视图做演示</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">materialized</span> <span class=\"keyword\">view</span> now <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> now();</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cron.schedule(<span class=\"string\">&#x27;26 * * * *&#x27;</span>, <span class=\"string\">&#x27;refresh materialized view now;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这就实现了每小时26分的时候去刷新物化视图，也就是意味着，任意时候执行</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> now;</span><br></pre></td></tr></table></figure>\n<p>获得的结果，都是距离此刻最近的26分，而不是当前时间。<br>那么，已经创建的任务，该如何管理呢。其实很简单，定时任务数据都存放在<code>cron.job</code>表中，我们看看里面的数据就明白了。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"params\">---------</span>+<span class=\"params\">------------</span>+<span class=\"params\">--------------------------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+</span><br><span class=\"line\">| jobid   | schedule   | <span class=\"keyword\">command</span>                        | nodename   | nodeport   | database   | username   |</span><br><span class=\"line\">|<span class=\"params\">---------</span>+<span class=\"params\">------------</span>+<span class=\"params\">--------------------------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>|</span><br><span class=\"line\">| 1       | 26 * * * * | refresh materialized view now; | localhost  | 5432       | analyze    | postgres   |</span><br><span class=\"line\">+<span class=\"params\">---------</span>+<span class=\"params\">------------</span>+<span class=\"params\">--------------------------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+</span><br></pre></td></tr></table></figure>\n<p>如果要取消一个任务，就需要拿到<code>jobid</code>，然后执行下面这句就好了。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cron.unschedule(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在<code>PostgreSQL</code>中可以很轻松的创建物化视图，但是却没有自动刷新物化视图的机制。通常来说，不外乎两种方式，一种是通过触发器，另一种就是定时任务调度。今天我们就来说说第二种方式。<br>主要借助一个名为<a href=\"https://github.com/citusdata/pg_cron\">pg_cron</a>的扩展。<br>安装方法在官方介绍里面已经说的很清楚了，不再赘述，这里提醒一点，安装完后，是需要修改<code>postgresql.conf</code>配置文件，并重启<code>PostgreSQL</code>服务的。具体修改如下：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">shared_preload_libraries</span> = <span class=\"string\">&#x27;pg_cron&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">cron.database_name</span> = <span class=\"string\">&#x27;postgres&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>第二行的指定<code>cron</code>的元数据相关信息存放的数据库，是可以改成其他的。这里要明确一个概念，<code>cron</code>安装的数据库，和它要控制的数据库没有什么必然联系，并不因为说安装在了<code>postgres</code>库，就不能调度其他库了，这个在后续具体配置的时候，就能明白了。<br>做完上述步骤，保证<code>PostgreSQL</code>服务重启过后，就可以用<code>psql</code>或其他工具连接到<code>cron.database_name</code>对应的数据，执行</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">EXTENSION</span> pg_cron;</span><br></pre></td></tr></table></figure>\n<p>如果不在指定的库执行的话，会遇到错误</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">Jobs must be scheduled <span class=\"keyword\">from</span> the <span class=\"keyword\">database</span> configured <span class=\"keyword\">in</span> cron.database_name, since the pg_cron background worker reads job descriptions <span class=\"keyword\">from</span> this <span class=\"keyword\">database</span>.</span><br></pre></td></tr></table></figure>\n<p>届时注意即可。<br>一切准备就绪后，就可以使用了，使用方式相当简单。这里我用一个查询<code>now()</code>的物化视图做演示</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">materialized</span> <span class=\"keyword\">view</span> now <span class=\"keyword\">as</span> <span class=\"keyword\">select</span> now();</span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> cron.schedule(<span class=\"string\">&#x27;26 * * * *&#x27;</span>, <span class=\"string\">&#x27;refresh materialized view now;&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>这就实现了每小时26分的时候去刷新物化视图，也就是意味着，任意时候执行</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> now;</span><br></pre></td></tr></table></figure>\n<p>获得的结果，都是距离此刻最近的26分，而不是当前时间。<br>那么，已经创建的任务，该如何管理呢。其实很简单，定时任务数据都存放在<code>cron.job</code>表中，我们看看里面的数据就明白了。</p>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"params\">---------</span>+<span class=\"params\">------------</span>+<span class=\"params\">--------------------------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+</span><br><span class=\"line\">| jobid   | schedule   | <span class=\"keyword\">command</span>                        | nodename   | nodeport   | database   | username   |</span><br><span class=\"line\">|<span class=\"params\">---------</span>+<span class=\"params\">------------</span>+<span class=\"params\">--------------------------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>|</span><br><span class=\"line\">| 1       | 26 * * * * | refresh materialized view now; | localhost  | 5432       | analyze    | postgres   |</span><br><span class=\"line\">+<span class=\"params\">---------</span>+<span class=\"params\">------------</span>+<span class=\"params\">--------------------------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+<span class=\"params\">------------</span>+</span><br></pre></td></tr></table></figure>\n<p>如果要取消一个任务，就需要拿到<code>jobid</code>，然后执行下面这句就好了。</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> cron.unschedule(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n"},{"title":"«写给大家看的设计书»中最关键的九个字","date":"2018-08-30T01:09:27.000Z","_content":"«写给大家看的设计书»书如其名，是一本非常适合外行看的设计书。这本书再版多次，足以证明其优秀，推荐给可能会遇到UI设计需求的程序员同胞看。\n全书的核心思想就是四个原则，如果你没时间看书，只要牢记这四大原则，也是能够获益良多的。\n### 对比 （Contrast）\n对比的目的是强调重点，所以也不要为了对比而对比。通过对比的设计，突出你想表达的，让受众能更容易地发现重点。\n\n### 重复 （Repetition）\n不是单指字面上的重复，按我的理解，用“呼应”更为贴切。颜色也好、图形也好、甚至字体等等，通过一定的重复产生呼应的效果。给人一种精心设计的感觉。\n\n### 对齐 （Alignment）\n这个很多人都有感触的。我想说的是，对齐其实也是某个维度的重复，其实跟第二条原则是重叠的。只是对齐是最容易做到，也是最应该做到的，故而单独拿出以示其重要性。\n\n### 亲密性 （Proximity）\n这个翻译，还挺让人晕的。简单的说，就是把有共性的事物聚类，形成视觉单元（*visual unit*）。\n\n以上四原则摘自[«写给大家看的设计书»](https://item.jd.com/11824338.html)，但是解读是我自己根据理解补充的。话说回来，当你回过头审视这几个原则的时候，会发现这甚至跟写作文、写诗歌、写小说有点像。要有起伏，要有重点，要前后呼应。是不是很有意思呢？\n","source":"_posts/non-designers-design-book.md","raw":"---\ntitle: «写给大家看的设计书»中最关键的九个字\ndate: 2018-08-30 09:09:27\ncategories: 设计相关\ntags:\n    - UI设计\n---\n«写给大家看的设计书»书如其名，是一本非常适合外行看的设计书。这本书再版多次，足以证明其优秀，推荐给可能会遇到UI设计需求的程序员同胞看。\n全书的核心思想就是四个原则，如果你没时间看书，只要牢记这四大原则，也是能够获益良多的。\n### 对比 （Contrast）\n对比的目的是强调重点，所以也不要为了对比而对比。通过对比的设计，突出你想表达的，让受众能更容易地发现重点。\n\n### 重复 （Repetition）\n不是单指字面上的重复，按我的理解，用“呼应”更为贴切。颜色也好、图形也好、甚至字体等等，通过一定的重复产生呼应的效果。给人一种精心设计的感觉。\n\n### 对齐 （Alignment）\n这个很多人都有感触的。我想说的是，对齐其实也是某个维度的重复，其实跟第二条原则是重叠的。只是对齐是最容易做到，也是最应该做到的，故而单独拿出以示其重要性。\n\n### 亲密性 （Proximity）\n这个翻译，还挺让人晕的。简单的说，就是把有共性的事物聚类，形成视觉单元（*visual unit*）。\n\n以上四原则摘自[«写给大家看的设计书»](https://item.jd.com/11824338.html)，但是解读是我自己根据理解补充的。话说回来，当你回过头审视这几个原则的时候，会发现这甚至跟写作文、写诗歌、写小说有点像。要有起伏，要有重点，要前后呼应。是不是很有意思呢？\n","slug":"non-designers-design-book","published":1,"updated":"2018-08-30T01:53:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmt0059y0mz199f0gky","content":"<p>«写给大家看的设计书»书如其名，是一本非常适合外行看的设计书。这本书再版多次，足以证明其优秀，推荐给可能会遇到UI设计需求的程序员同胞看。<br>全书的核心思想就是四个原则，如果你没时间看书，只要牢记这四大原则，也是能够获益良多的。</p>\n<h3 id=\"对比-（Contrast）\"><a href=\"#对比-（Contrast）\" class=\"headerlink\" title=\"对比 （Contrast）\"></a>对比 （Contrast）</h3><p>对比的目的是强调重点，所以也不要为了对比而对比。通过对比的设计，突出你想表达的，让受众能更容易地发现重点。</p>\n<h3 id=\"重复-（Repetition）\"><a href=\"#重复-（Repetition）\" class=\"headerlink\" title=\"重复 （Repetition）\"></a>重复 （Repetition）</h3><p>不是单指字面上的重复，按我的理解，用“呼应”更为贴切。颜色也好、图形也好、甚至字体等等，通过一定的重复产生呼应的效果。给人一种精心设计的感觉。</p>\n<h3 id=\"对齐-（Alignment）\"><a href=\"#对齐-（Alignment）\" class=\"headerlink\" title=\"对齐 （Alignment）\"></a>对齐 （Alignment）</h3><p>这个很多人都有感触的。我想说的是，对齐其实也是某个维度的重复，其实跟第二条原则是重叠的。只是对齐是最容易做到，也是最应该做到的，故而单独拿出以示其重要性。</p>\n<h3 id=\"亲密性-（Proximity）\"><a href=\"#亲密性-（Proximity）\" class=\"headerlink\" title=\"亲密性 （Proximity）\"></a>亲密性 （Proximity）</h3><p>这个翻译，还挺让人晕的。简单的说，就是把有共性的事物聚类，形成视觉单元（<em>visual unit</em>）。</p>\n<p>以上四原则摘自<a href=\"https://item.jd.com/11824338.html\">«写给大家看的设计书»</a>，但是解读是我自己根据理解补充的。话说回来，当你回过头审视这几个原则的时候，会发现这甚至跟写作文、写诗歌、写小说有点像。要有起伏，要有重点，要前后呼应。是不是很有意思呢？</p>\n","site":{"data":{}},"excerpt":"","more":"<p>«写给大家看的设计书»书如其名，是一本非常适合外行看的设计书。这本书再版多次，足以证明其优秀，推荐给可能会遇到UI设计需求的程序员同胞看。<br>全书的核心思想就是四个原则，如果你没时间看书，只要牢记这四大原则，也是能够获益良多的。</p>\n<h3 id=\"对比-（Contrast）\"><a href=\"#对比-（Contrast）\" class=\"headerlink\" title=\"对比 （Contrast）\"></a>对比 （Contrast）</h3><p>对比的目的是强调重点，所以也不要为了对比而对比。通过对比的设计，突出你想表达的，让受众能更容易地发现重点。</p>\n<h3 id=\"重复-（Repetition）\"><a href=\"#重复-（Repetition）\" class=\"headerlink\" title=\"重复 （Repetition）\"></a>重复 （Repetition）</h3><p>不是单指字面上的重复，按我的理解，用“呼应”更为贴切。颜色也好、图形也好、甚至字体等等，通过一定的重复产生呼应的效果。给人一种精心设计的感觉。</p>\n<h3 id=\"对齐-（Alignment）\"><a href=\"#对齐-（Alignment）\" class=\"headerlink\" title=\"对齐 （Alignment）\"></a>对齐 （Alignment）</h3><p>这个很多人都有感触的。我想说的是，对齐其实也是某个维度的重复，其实跟第二条原则是重叠的。只是对齐是最容易做到，也是最应该做到的，故而单独拿出以示其重要性。</p>\n<h3 id=\"亲密性-（Proximity）\"><a href=\"#亲密性-（Proximity）\" class=\"headerlink\" title=\"亲密性 （Proximity）\"></a>亲密性 （Proximity）</h3><p>这个翻译，还挺让人晕的。简单的说，就是把有共性的事物聚类，形成视觉单元（<em>visual unit</em>）。</p>\n<p>以上四原则摘自<a href=\"https://item.jd.com/11824338.html\">«写给大家看的设计书»</a>，但是解读是我自己根据理解补充的。话说回来，当你回过头审视这几个原则的时候，会发现这甚至跟写作文、写诗歌、写小说有点像。要有起伏，要有重点，要前后呼应。是不是很有意思呢？</p>\n"},{"title":"突破mac系统要求密码不能小于4个字符的限制","date":"2018-12-08T09:47:00.000Z","_content":"1. 在终端执行`pwpolicy getaccountpolicies > temp.xml`\n2. 编辑temp.xml文件，例如`vim temp.xml`\n3. 删除第一行`Getting global account policies`文字，保证这个文件以`<?xml`开头\n4. 找到\n    ```\n    <string>policyAttributePassword matches '^$|.{4,}+'</string>\n    ```\n    替换成\n    \n    ```\n    <string>policyAttributePassword matches '^$|.{1,}+'</string>\n    ```\n    保存\n5. `sudo pwpolicy setaccountpolicies temp.xml`\n6. 此时就可以设置最少字符长度为1个密码了","source":"_posts/password_more_than_4_char_in_macos.md","raw":"---\ntitle: 突破mac系统要求密码不能小于4个字符的限制\ndate: 2018-12-08 17:47:00\ncategories: 实用技巧\ntags: \n - Mac\n---\n1. 在终端执行`pwpolicy getaccountpolicies > temp.xml`\n2. 编辑temp.xml文件，例如`vim temp.xml`\n3. 删除第一行`Getting global account policies`文字，保证这个文件以`<?xml`开头\n4. 找到\n    ```\n    <string>policyAttributePassword matches '^$|.{4,}+'</string>\n    ```\n    替换成\n    \n    ```\n    <string>policyAttributePassword matches '^$|.{1,}+'</string>\n    ```\n    保存\n5. `sudo pwpolicy setaccountpolicies temp.xml`\n6. 此时就可以设置最少字符长度为1个密码了","slug":"password_more_than_4_char_in_macos","published":1,"updated":"2018-12-08T10:00:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmu005cy0mzhe847s58","content":"<ol>\n<li><p>在终端执行<code>pwpolicy getaccountpolicies &gt; temp.xml</code></p>\n</li>\n<li><p>编辑temp.xml文件，例如<code>vim temp.xml</code></p>\n</li>\n<li><p>删除第一行<code>Getting global account policies</code>文字，保证这个文件以<code>&lt;?xml</code>开头</p>\n</li>\n<li><p>找到</p>\n <figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">string</span>&gt;policyAttributePassword matches <span class=\"string\">&#x27;^$|.&#123;4,&#125;+&#x27;</span>&lt;/<span class=\"built_in\">string</span>&gt;</span><br></pre></td></tr></table></figure>\n<p> 替换成</p>\n <figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">string</span>&gt;policyAttributePassword matches <span class=\"string\">&#x27;^$|.&#123;1,&#125;+&#x27;</span>&lt;/<span class=\"built_in\">string</span>&gt;</span><br></pre></td></tr></table></figure>\n<p> 保存</p>\n</li>\n<li><p><code>sudo pwpolicy setaccountpolicies temp.xml</code></p>\n</li>\n<li><p>此时就可以设置最少字符长度为1个密码了</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>在终端执行<code>pwpolicy getaccountpolicies &gt; temp.xml</code></p>\n</li>\n<li><p>编辑temp.xml文件，例如<code>vim temp.xml</code></p>\n</li>\n<li><p>删除第一行<code>Getting global account policies</code>文字，保证这个文件以<code>&lt;?xml</code>开头</p>\n</li>\n<li><p>找到</p>\n <figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">string</span>&gt;policyAttributePassword matches <span class=\"string\">&#x27;^$|.&#123;4,&#125;+&#x27;</span>&lt;/<span class=\"built_in\">string</span>&gt;</span><br></pre></td></tr></table></figure>\n<p> 替换成</p>\n <figure class=\"highlight autoit\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"built_in\">string</span>&gt;policyAttributePassword matches <span class=\"string\">&#x27;^$|.&#123;1,&#125;+&#x27;</span>&lt;/<span class=\"built_in\">string</span>&gt;</span><br></pre></td></tr></table></figure>\n<p> 保存</p>\n</li>\n<li><p><code>sudo pwpolicy setaccountpolicies temp.xml</code></p>\n</li>\n<li><p>此时就可以设置最少字符长度为1个密码了</p>\n</li>\n</ol>\n"},{"title":"用JavaScript在PostgreSQL中写存储过程","date":"2018-09-09T00:27:59.000Z","_content":"首先交代一个概念，在`PostgreSQL`中，函数、存储过程都是一回事，创建语法都是`create function`。之所以本文标题使用`存储过程`的叫法，是为了方便其他数据库的使用者容易理解。\n先来看看`PostgreSQL`默认支持的创建数据库函数的写法，如：\n```\n-- 把系统生成的uuid中的-替换成_\ncreate function uuid()\n  returns text\nlanguage sql\nas $$\nSELECT replace(uuid_generate_v4()::text,'-','_');\n$$;\n```\n注意其中的`language`关键字，后面指明了该数据库函数所使用的语言，上面这个函数很简单，用纯`SQL`就能搞定，更多的时候，我们遇到的会复杂很多，就得用上过程化的SQL，也就是`plpgsql`（类似Oracle中的PL/SQL），具体可以查看官方文档[plpgsql](http://www.postgres.cn/docs/10/plpgsql.html)。\n不过今天的主题不是`plpgsql`，而是`plv8`——基于`V8`引擎的在`PostgreSQL`中运行的过程化语言，其实就是用`JavaScript`在`PostgreSQL`中写数据库函数。\n**那么为什么要用`Javascript`来写数据库函数呢？**在我看来，至少有下面几个好处：\n1. 熟悉的配方，熟悉的味道。`JavaScript`作为`Web`世界的一等公民，其教众众多。能用`JavaScript`来实现高级的数据库开发，可以大幅拉低数据库的学习曲线，进而**降低人力成本**。\n2. 获得`SQL`世界本身不具备的库函数，像这样：![](/media/15364987364827.jpg)\n    还有这样：\n    ![](/media/15364989242348.jpg)\n    可以极大丰富数据库层面的功能实现，进而影响一个软件的架构设计。\n3. 更快的性能，众所周知`Google`主推的`V8`引擎是业界公认的顶尖性能怪兽。有它配合你的数据库使用真是如虎添翼。尤其是在业务系统的开发采用了并不是以性能为卖点的语言时（比如`Ruby`、`PHP`），把部分业务逻辑通过`JavaScript`在数据库中重构一边，说不定会有意想不到的效果。这比伤筋动骨地单纯在业务层摸索改进要容易得多。\n\n说了这么多，怎么才能在`PostgreSQL`中用上`JavaScript`呢？\n* 第一步肯定是在电脑上装好`PostgreSQL`，这个不再赘述\n* `windows`用户，可以下载这里的安装包，http://www.postgresonline.com/journal/archives/379-PLV8-binaries-for-PostgreSQL-10-windows-both-32-bit-and-64-bit.html \n* `ubuntu`用户，`apt-get install postgresql-10-plv8`\n* 更多安装细节，请参考官方文档：https://plv8.github.io 以及 https://pgxn.org/dist/plv8/doc/plv8.html\n* 当然，如果你熟悉`docker`，可以使用我在`docker store`上分享的`lovearuis/postgres10_plv8`（[地址](https://store.docker.com/community/images/lovearuis/postgres10_plv8)），只需要这么一个命令\n```\ndocker run --name=postgres10_plv8 -d -p 5432:5432 lovearuis/postgres10_plv8\n```\n    就可以在本机`5432`端口上运行一个装好`JavaScript`支持的最新版`PostgreSQL`\n* 安装完必要的`plv8`包之后，还要在数据库中执行`SQL`：`CREATE EXTENSION plv8;`，才能真正解锁`plv8`的洪荒之力。\n\n一切就绪之后，按照官方文档上举例的，先来个带`for`循环和生成`JSON`的耍耍，`SQL`如下：\n```sql\nCREATE FUNCTION plv8_test(keys TEXT[], vals TEXT[]) RETURNS JSON AS $$\n  var o = {};\nfor(var i=0; i<keys.length; i++){\no[keys[i]] = vals[i];\n}\nreturn o;\n$$ LANGUAGE plv8 IMMUTABLE STRICT;\n```\n尝试调用刚刚创建的`plv8_test`函数：\n```\nSELECT plv8_test(ARRAY['name', 'age'], ARRAY['Tom', '29']);\n```\n获得结果![](/media/15365022296404.jpg)\n是不是美妙极了？☺️\n\n### 放大招\n是不是看了上面的介绍，有点心痒难耐了。🤪**其实`PostgreSQL`在内部可调用的过程化语言的支持远不仅于此。你完全可以用你心爱的`Python`、`Java`、`PHP`甚至是`R`、`Lua`从事`PostgreSQL`中的数据库函数开发。**\n尤其是`Python`、`Java`，这两个语言几乎在`PostgreSQL`的`PL`环境下有最大的权限空间。想象这样一个场景：\n一个别人做的项目（你没有源码，或者有源码跟没有也没啥区别），领导说要加个需求，当一个数据到达某种阀值时，要发短信给一个人（比如考试成绩低于60的时候，发个短信给学生家长）。这个时候，你不需要再打开开发环境，在别人的代码里面流离失所，久久不能自拔。你需要做的，就是打开这个项目的`PostgreSQL`（谢天谢地，它用了世界上最先进的开源数据库，尽管它的代码跟翔没什么区别），然后用`Java`在`PostgreSQL`中写个数据库函数（请求一个短信网关的http接口或者别的什么东西），最后套一个触发器（3行`SQL`）就什么都完成了。\n这画面太美，我不敢想象啊，哈哈。\n","source":"_posts/plv8_in_postgresql.md","raw":"---\ntitle: 用JavaScript在PostgreSQL中写存储过程\ndate: 2018-09-09 08:27:59\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n首先交代一个概念，在`PostgreSQL`中，函数、存储过程都是一回事，创建语法都是`create function`。之所以本文标题使用`存储过程`的叫法，是为了方便其他数据库的使用者容易理解。\n先来看看`PostgreSQL`默认支持的创建数据库函数的写法，如：\n```\n-- 把系统生成的uuid中的-替换成_\ncreate function uuid()\n  returns text\nlanguage sql\nas $$\nSELECT replace(uuid_generate_v4()::text,'-','_');\n$$;\n```\n注意其中的`language`关键字，后面指明了该数据库函数所使用的语言，上面这个函数很简单，用纯`SQL`就能搞定，更多的时候，我们遇到的会复杂很多，就得用上过程化的SQL，也就是`plpgsql`（类似Oracle中的PL/SQL），具体可以查看官方文档[plpgsql](http://www.postgres.cn/docs/10/plpgsql.html)。\n不过今天的主题不是`plpgsql`，而是`plv8`——基于`V8`引擎的在`PostgreSQL`中运行的过程化语言，其实就是用`JavaScript`在`PostgreSQL`中写数据库函数。\n**那么为什么要用`Javascript`来写数据库函数呢？**在我看来，至少有下面几个好处：\n1. 熟悉的配方，熟悉的味道。`JavaScript`作为`Web`世界的一等公民，其教众众多。能用`JavaScript`来实现高级的数据库开发，可以大幅拉低数据库的学习曲线，进而**降低人力成本**。\n2. 获得`SQL`世界本身不具备的库函数，像这样：![](/media/15364987364827.jpg)\n    还有这样：\n    ![](/media/15364989242348.jpg)\n    可以极大丰富数据库层面的功能实现，进而影响一个软件的架构设计。\n3. 更快的性能，众所周知`Google`主推的`V8`引擎是业界公认的顶尖性能怪兽。有它配合你的数据库使用真是如虎添翼。尤其是在业务系统的开发采用了并不是以性能为卖点的语言时（比如`Ruby`、`PHP`），把部分业务逻辑通过`JavaScript`在数据库中重构一边，说不定会有意想不到的效果。这比伤筋动骨地单纯在业务层摸索改进要容易得多。\n\n说了这么多，怎么才能在`PostgreSQL`中用上`JavaScript`呢？\n* 第一步肯定是在电脑上装好`PostgreSQL`，这个不再赘述\n* `windows`用户，可以下载这里的安装包，http://www.postgresonline.com/journal/archives/379-PLV8-binaries-for-PostgreSQL-10-windows-both-32-bit-and-64-bit.html \n* `ubuntu`用户，`apt-get install postgresql-10-plv8`\n* 更多安装细节，请参考官方文档：https://plv8.github.io 以及 https://pgxn.org/dist/plv8/doc/plv8.html\n* 当然，如果你熟悉`docker`，可以使用我在`docker store`上分享的`lovearuis/postgres10_plv8`（[地址](https://store.docker.com/community/images/lovearuis/postgres10_plv8)），只需要这么一个命令\n```\ndocker run --name=postgres10_plv8 -d -p 5432:5432 lovearuis/postgres10_plv8\n```\n    就可以在本机`5432`端口上运行一个装好`JavaScript`支持的最新版`PostgreSQL`\n* 安装完必要的`plv8`包之后，还要在数据库中执行`SQL`：`CREATE EXTENSION plv8;`，才能真正解锁`plv8`的洪荒之力。\n\n一切就绪之后，按照官方文档上举例的，先来个带`for`循环和生成`JSON`的耍耍，`SQL`如下：\n```sql\nCREATE FUNCTION plv8_test(keys TEXT[], vals TEXT[]) RETURNS JSON AS $$\n  var o = {};\nfor(var i=0; i<keys.length; i++){\no[keys[i]] = vals[i];\n}\nreturn o;\n$$ LANGUAGE plv8 IMMUTABLE STRICT;\n```\n尝试调用刚刚创建的`plv8_test`函数：\n```\nSELECT plv8_test(ARRAY['name', 'age'], ARRAY['Tom', '29']);\n```\n获得结果![](/media/15365022296404.jpg)\n是不是美妙极了？☺️\n\n### 放大招\n是不是看了上面的介绍，有点心痒难耐了。🤪**其实`PostgreSQL`在内部可调用的过程化语言的支持远不仅于此。你完全可以用你心爱的`Python`、`Java`、`PHP`甚至是`R`、`Lua`从事`PostgreSQL`中的数据库函数开发。**\n尤其是`Python`、`Java`，这两个语言几乎在`PostgreSQL`的`PL`环境下有最大的权限空间。想象这样一个场景：\n一个别人做的项目（你没有源码，或者有源码跟没有也没啥区别），领导说要加个需求，当一个数据到达某种阀值时，要发短信给一个人（比如考试成绩低于60的时候，发个短信给学生家长）。这个时候，你不需要再打开开发环境，在别人的代码里面流离失所，久久不能自拔。你需要做的，就是打开这个项目的`PostgreSQL`（谢天谢地，它用了世界上最先进的开源数据库，尽管它的代码跟翔没什么区别），然后用`Java`在`PostgreSQL`中写个数据库函数（请求一个短信网关的http接口或者别的什么东西），最后套一个触发器（3行`SQL`）就什么都完成了。\n这画面太美，我不敢想象啊，哈哈。\n","slug":"plv8_in_postgresql","published":1,"updated":"2020-11-16T00:49:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmv005hy0mzalg9hb13","content":"<p>首先交代一个概念，在<code>PostgreSQL</code>中，函数、存储过程都是一回事，创建语法都是<code>create function</code>。之所以本文标题使用<code>存储过程</code>的叫法，是为了方便其他数据库的使用者容易理解。<br>先来看看<code>PostgreSQL</code>默认支持的创建数据库函数的写法，如：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 把系统生成的uuid中的-替换成_</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> <span class=\"type\">uuid</span>()</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">text</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> <span class=\"keyword\">sql</span></span><br><span class=\"line\"><span class=\"keyword\">as</span> $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">SELECT</span> replace(uuid_generate_v4()::<span class=\"type\">text</span>,<span class=\"string\">&#x27;-&#x27;</span>,<span class=\"string\">&#x27;_&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-pgsql\">$$</span>;</span><br></pre></td></tr></table></figure>\n<p>注意其中的<code>language</code>关键字，后面指明了该数据库函数所使用的语言，上面这个函数很简单，用纯<code>SQL</code>就能搞定，更多的时候，我们遇到的会复杂很多，就得用上过程化的SQL，也就是<code>plpgsql</code>（类似Oracle中的PL&#x2F;SQL），具体可以查看官方文档<a href=\"http://www.postgres.cn/docs/10/plpgsql.html\">plpgsql</a>。<br>不过今天的主题不是<code>plpgsql</code>，而是<code>plv8</code>——基于<code>V8</code>引擎的在<code>PostgreSQL</code>中运行的过程化语言，其实就是用<code>JavaScript</code>在<code>PostgreSQL</code>中写数据库函数。<br><strong>那么为什么要用<code>Javascript</code>来写数据库函数呢？</strong>在我看来，至少有下面几个好处：</p>\n<ol>\n<li>熟悉的配方，熟悉的味道。<code>JavaScript</code>作为<code>Web</code>世界的一等公民，其教众众多。能用<code>JavaScript</code>来实现高级的数据库开发，可以大幅拉低数据库的学习曲线，进而<strong>降低人力成本</strong>。</li>\n<li>获得<code>SQL</code>世界本身不具备的库函数，像这样：<img src=\"/media/15364987364827.jpg\"><br> 还有这样：<br> <img src=\"/media/15364989242348.jpg\"><br> 可以极大丰富数据库层面的功能实现，进而影响一个软件的架构设计。</li>\n<li>更快的性能，众所周知<code>Google</code>主推的<code>V8</code>引擎是业界公认的顶尖性能怪兽。有它配合你的数据库使用真是如虎添翼。尤其是在业务系统的开发采用了并不是以性能为卖点的语言时（比如<code>Ruby</code>、<code>PHP</code>），把部分业务逻辑通过<code>JavaScript</code>在数据库中重构一边，说不定会有意想不到的效果。这比伤筋动骨地单纯在业务层摸索改进要容易得多。</li>\n</ol>\n<p>说了这么多，怎么才能在<code>PostgreSQL</code>中用上<code>JavaScript</code>呢？</p>\n<ul>\n<li>第一步肯定是在电脑上装好<code>PostgreSQL</code>，这个不再赘述</li>\n<li><code>windows</code>用户，可以下载这里的安装包，<a href=\"http://www.postgresonline.com/journal/archives/379-PLV8-binaries-for-PostgreSQL-10-windows-both-32-bit-and-64-bit.html\">http://www.postgresonline.com/journal/archives/379-PLV8-binaries-for-PostgreSQL-10-windows-both-32-bit-and-64-bit.html</a> </li>\n<li><code>ubuntu</code>用户，<code>apt-get install postgresql-10-plv8</code></li>\n<li>更多安装细节，请参考官方文档：<a href=\"https://plv8.github.io/\">https://plv8.github.io</a> 以及 <a href=\"https://pgxn.org/dist/plv8/doc/plv8.html\">https://pgxn.org/dist/plv8/doc/plv8.html</a></li>\n<li>当然，如果你熟悉<code>docker</code>，可以使用我在<code>docker store</code>上分享的<code>lovearuis/postgres10_plv8</code>（<a href=\"https://store.docker.com/community/images/lovearuis/postgres10_plv8\">地址</a>），只需要这么一个命令<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> <span class=\"attribute\">--name</span>=postgres10_plv8 -d -p 5432:5432 lovearuis/postgres10_plv8</span><br></pre></td></tr></table></figure>\n  就可以在本机<code>5432</code>端口上运行一个装好<code>JavaScript</code>支持的最新版<code>PostgreSQL</code></li>\n<li>安装完必要的<code>plv8</code>包之后，还要在数据库中执行<code>SQL</code>：<code>CREATE EXTENSION plv8;</code>，才能真正解锁<code>plv8</code>的洪荒之力。</li>\n</ul>\n<p>一切就绪之后，按照官方文档上举例的，先来个带<code>for</code>循环和生成<code>JSON</code>的耍耍，<code>SQL</code>如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> plv8_test(keys TEXT[], vals TEXT[]) <span class=\"keyword\">RETURNS</span> JSON <span class=\"keyword\">AS</span> $$</span><br><span class=\"line\">  var o <span class=\"operator\">=</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i<span class=\"operator\">=</span><span class=\"number\">0</span>; i<span class=\"operator\">&lt;</span>keys.length; i<span class=\"operator\">+</span><span class=\"operator\">+</span>)&#123;</span><br><span class=\"line\">o[keys[i]] <span class=\"operator\">=</span> vals[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> o;</span><br><span class=\"line\">$$ <span class=\"keyword\">LANGUAGE</span> plv8 IMMUTABLE STRICT;</span><br></pre></td></tr></table></figure>\n<p>尝试调用刚刚创建的<code>plv8_test</code>函数：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> plv8_test(<span class=\"keyword\">ARRAY</span>[<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>], <span class=\"keyword\">ARRAY</span>[<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;29&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n<p>获得结果<img src=\"/media/15365022296404.jpg\"><br>是不是美妙极了？☺️</p>\n<h3 id=\"放大招\"><a href=\"#放大招\" class=\"headerlink\" title=\"放大招\"></a>放大招</h3><p>是不是看了上面的介绍，有点心痒难耐了。🤪<strong>其实<code>PostgreSQL</code>在内部可调用的过程化语言的支持远不仅于此。你完全可以用你心爱的<code>Python</code>、<code>Java</code>、<code>PHP</code>甚至是<code>R</code>、<code>Lua</code>从事<code>PostgreSQL</code>中的数据库函数开发。</strong><br>尤其是<code>Python</code>、<code>Java</code>，这两个语言几乎在<code>PostgreSQL</code>的<code>PL</code>环境下有最大的权限空间。想象这样一个场景：<br>一个别人做的项目（你没有源码，或者有源码跟没有也没啥区别），领导说要加个需求，当一个数据到达某种阀值时，要发短信给一个人（比如考试成绩低于60的时候，发个短信给学生家长）。这个时候，你不需要再打开开发环境，在别人的代码里面流离失所，久久不能自拔。你需要做的，就是打开这个项目的<code>PostgreSQL</code>（谢天谢地，它用了世界上最先进的开源数据库，尽管它的代码跟翔没什么区别），然后用<code>Java</code>在<code>PostgreSQL</code>中写个数据库函数（请求一个短信网关的http接口或者别的什么东西），最后套一个触发器（3行<code>SQL</code>）就什么都完成了。<br>这画面太美，我不敢想象啊，哈哈。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先交代一个概念，在<code>PostgreSQL</code>中，函数、存储过程都是一回事，创建语法都是<code>create function</code>。之所以本文标题使用<code>存储过程</code>的叫法，是为了方便其他数据库的使用者容易理解。<br>先来看看<code>PostgreSQL</code>默认支持的创建数据库函数的写法，如：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 把系统生成的uuid中的-替换成_</span></span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> <span class=\"type\">uuid</span>()</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> <span class=\"type\">text</span></span><br><span class=\"line\"><span class=\"keyword\">language</span> <span class=\"keyword\">sql</span></span><br><span class=\"line\"><span class=\"keyword\">as</span> $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\"><span class=\"keyword\">SELECT</span> replace(uuid_generate_v4()::<span class=\"type\">text</span>,<span class=\"string\">&#x27;-&#x27;</span>,<span class=\"string\">&#x27;_&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-pgsql\">$$</span>;</span><br></pre></td></tr></table></figure>\n<p>注意其中的<code>language</code>关键字，后面指明了该数据库函数所使用的语言，上面这个函数很简单，用纯<code>SQL</code>就能搞定，更多的时候，我们遇到的会复杂很多，就得用上过程化的SQL，也就是<code>plpgsql</code>（类似Oracle中的PL&#x2F;SQL），具体可以查看官方文档<a href=\"http://www.postgres.cn/docs/10/plpgsql.html\">plpgsql</a>。<br>不过今天的主题不是<code>plpgsql</code>，而是<code>plv8</code>——基于<code>V8</code>引擎的在<code>PostgreSQL</code>中运行的过程化语言，其实就是用<code>JavaScript</code>在<code>PostgreSQL</code>中写数据库函数。<br><strong>那么为什么要用<code>Javascript</code>来写数据库函数呢？</strong>在我看来，至少有下面几个好处：</p>\n<ol>\n<li>熟悉的配方，熟悉的味道。<code>JavaScript</code>作为<code>Web</code>世界的一等公民，其教众众多。能用<code>JavaScript</code>来实现高级的数据库开发，可以大幅拉低数据库的学习曲线，进而<strong>降低人力成本</strong>。</li>\n<li>获得<code>SQL</code>世界本身不具备的库函数，像这样：<img src=\"/media/15364987364827.jpg\"><br> 还有这样：<br> <img src=\"/media/15364989242348.jpg\"><br> 可以极大丰富数据库层面的功能实现，进而影响一个软件的架构设计。</li>\n<li>更快的性能，众所周知<code>Google</code>主推的<code>V8</code>引擎是业界公认的顶尖性能怪兽。有它配合你的数据库使用真是如虎添翼。尤其是在业务系统的开发采用了并不是以性能为卖点的语言时（比如<code>Ruby</code>、<code>PHP</code>），把部分业务逻辑通过<code>JavaScript</code>在数据库中重构一边，说不定会有意想不到的效果。这比伤筋动骨地单纯在业务层摸索改进要容易得多。</li>\n</ol>\n<p>说了这么多，怎么才能在<code>PostgreSQL</code>中用上<code>JavaScript</code>呢？</p>\n<ul>\n<li>第一步肯定是在电脑上装好<code>PostgreSQL</code>，这个不再赘述</li>\n<li><code>windows</code>用户，可以下载这里的安装包，<a href=\"http://www.postgresonline.com/journal/archives/379-PLV8-binaries-for-PostgreSQL-10-windows-both-32-bit-and-64-bit.html\">http://www.postgresonline.com/journal/archives/379-PLV8-binaries-for-PostgreSQL-10-windows-both-32-bit-and-64-bit.html</a> </li>\n<li><code>ubuntu</code>用户，<code>apt-get install postgresql-10-plv8</code></li>\n<li>更多安装细节，请参考官方文档：<a href=\"https://plv8.github.io/\">https://plv8.github.io</a> 以及 <a href=\"https://pgxn.org/dist/plv8/doc/plv8.html\">https://pgxn.org/dist/plv8/doc/plv8.html</a></li>\n<li>当然，如果你熟悉<code>docker</code>，可以使用我在<code>docker store</code>上分享的<code>lovearuis/postgres10_plv8</code>（<a href=\"https://store.docker.com/community/images/lovearuis/postgres10_plv8\">地址</a>），只需要这么一个命令<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker <span class=\"built_in\">run</span> <span class=\"attribute\">--name</span>=postgres10_plv8 -d -p 5432:5432 lovearuis/postgres10_plv8</span><br></pre></td></tr></table></figure>\n  就可以在本机<code>5432</code>端口上运行一个装好<code>JavaScript</code>支持的最新版<code>PostgreSQL</code></li>\n<li>安装完必要的<code>plv8</code>包之后，还要在数据库中执行<code>SQL</code>：<code>CREATE EXTENSION plv8;</code>，才能真正解锁<code>plv8</code>的洪荒之力。</li>\n</ul>\n<p>一切就绪之后，按照官方文档上举例的，先来个带<code>for</code>循环和生成<code>JSON</code>的耍耍，<code>SQL</code>如下：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">FUNCTION</span> plv8_test(keys TEXT[], vals TEXT[]) <span class=\"keyword\">RETURNS</span> JSON <span class=\"keyword\">AS</span> $$</span><br><span class=\"line\">  var o <span class=\"operator\">=</span> &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(var i<span class=\"operator\">=</span><span class=\"number\">0</span>; i<span class=\"operator\">&lt;</span>keys.length; i<span class=\"operator\">+</span><span class=\"operator\">+</span>)&#123;</span><br><span class=\"line\">o[keys[i]] <span class=\"operator\">=</span> vals[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> o;</span><br><span class=\"line\">$$ <span class=\"keyword\">LANGUAGE</span> plv8 IMMUTABLE STRICT;</span><br></pre></td></tr></table></figure>\n<p>尝试调用刚刚创建的<code>plv8_test</code>函数：</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> plv8_test(<span class=\"keyword\">ARRAY</span>[<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>], <span class=\"keyword\">ARRAY</span>[<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"string\">&#x27;29&#x27;</span>]);</span><br></pre></td></tr></table></figure>\n<p>获得结果<img src=\"/media/15365022296404.jpg\"><br>是不是美妙极了？☺️</p>\n<h3 id=\"放大招\"><a href=\"#放大招\" class=\"headerlink\" title=\"放大招\"></a>放大招</h3><p>是不是看了上面的介绍，有点心痒难耐了。🤪<strong>其实<code>PostgreSQL</code>在内部可调用的过程化语言的支持远不仅于此。你完全可以用你心爱的<code>Python</code>、<code>Java</code>、<code>PHP</code>甚至是<code>R</code>、<code>Lua</code>从事<code>PostgreSQL</code>中的数据库函数开发。</strong><br>尤其是<code>Python</code>、<code>Java</code>，这两个语言几乎在<code>PostgreSQL</code>的<code>PL</code>环境下有最大的权限空间。想象这样一个场景：<br>一个别人做的项目（你没有源码，或者有源码跟没有也没啥区别），领导说要加个需求，当一个数据到达某种阀值时，要发短信给一个人（比如考试成绩低于60的时候，发个短信给学生家长）。这个时候，你不需要再打开开发环境，在别人的代码里面流离失所，久久不能自拔。你需要做的，就是打开这个项目的<code>PostgreSQL</code>（谢天谢地，它用了世界上最先进的开源数据库，尽管它的代码跟翔没什么区别），然后用<code>Java</code>在<code>PostgreSQL</code>中写个数据库函数（请求一个短信网关的http接口或者别的什么东西），最后套一个触发器（3行<code>SQL</code>）就什么都完成了。<br>这画面太美，我不敢想象啊，哈哈。</p>\n"},{"title":"PostgreSQL中执行即时代码段(匿名存储过程)","date":"2019-02-27T01:52:29.000Z","_content":"某些时候需要执行过程化的逻辑，单纯靠组织`SQL`语句已经完成不了了，这个时候一般需要引入存储过程用以实现。但是如果只是单纯执行一段逻辑，而不是要封装一个函数，用来接收参数复用，完全可以通过`DO`语句执行一个匿名代码段。这样就可以避免：创建存储过程 -> 调用存储过程 -> 删除存储过程的窘境。\n这里给出一个简短的`SQL`演示：\n```\nDO\n  $$\n    declare\n      i int := 0;\n    begin\n      raise notice 'il:%',i;\n      declare\n        i int;\n      begin\n        raise notice 'i2:%',i;\n      end;\n    end\n    $$ language plpgsql;\n```\n","source":"_posts/postgresql_ execute_an_anonymous_codeblock.md","raw":"---\ntitle: PostgreSQL中执行即时代码段(匿名存储过程)\ndate: 2019-02-27 09:52:29\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n某些时候需要执行过程化的逻辑，单纯靠组织`SQL`语句已经完成不了了，这个时候一般需要引入存储过程用以实现。但是如果只是单纯执行一段逻辑，而不是要封装一个函数，用来接收参数复用，完全可以通过`DO`语句执行一个匿名代码段。这样就可以避免：创建存储过程 -> 调用存储过程 -> 删除存储过程的窘境。\n这里给出一个简短的`SQL`演示：\n```\nDO\n  $$\n    declare\n      i int := 0;\n    begin\n      raise notice 'il:%',i;\n      declare\n        i int;\n      begin\n        raise notice 'i2:%',i;\n      end;\n    end\n    $$ language plpgsql;\n```\n","slug":"postgresql_ execute_an_anonymous_codeblock","published":1,"updated":"2019-02-27T02:04:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmv005ky0mz97qpbh9c","content":"<p>某些时候需要执行过程化的逻辑，单纯靠组织<code>SQL</code>语句已经完成不了了，这个时候一般需要引入存储过程用以实现。但是如果只是单纯执行一段逻辑，而不是要封装一个函数，用来接收参数复用，完全可以通过<code>DO</code>语句执行一个匿名代码段。这样就可以避免：创建存储过程 -&gt; 调用存储过程 -&gt; 删除存储过程的窘境。<br>这里给出一个简短的<code>SQL</code>演示：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DO</span></span><br><span class=\"line\">  $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\">    <span class=\"keyword\">declare</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">      i <span class=\"type\">int</span> := <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">    <span class=\"keyword\">begin</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">raise</span> <span class=\"keyword\">notice</span> <span class=\"string\">&#x27;il:%&#x27;</span>,i;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">declare</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">        i <span class=\"type\">int</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">begin</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">        <span class=\"keyword\">raise</span> <span class=\"keyword\">notice</span> <span class=\"string\">&#x27;i2:%&#x27;</span>,i;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">end</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">    <span class=\"keyword\">end</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">    $$</span> <span class=\"keyword\">language</span> plpgsql;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>某些时候需要执行过程化的逻辑，单纯靠组织<code>SQL</code>语句已经完成不了了，这个时候一般需要引入存储过程用以实现。但是如果只是单纯执行一段逻辑，而不是要封装一个函数，用来接收参数复用，完全可以通过<code>DO</code>语句执行一个匿名代码段。这样就可以避免：创建存储过程 -&gt; 调用存储过程 -&gt; 删除存储过程的窘境。<br>这里给出一个简短的<code>SQL</code>演示：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">DO</span></span><br><span class=\"line\">  $$<span class=\"language-pgsql\"></span></span><br><span class=\"line\"><span class=\"language-pgsql\">    <span class=\"keyword\">declare</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">      i <span class=\"type\">int</span> := <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">    <span class=\"keyword\">begin</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">raise</span> <span class=\"keyword\">notice</span> <span class=\"string\">&#x27;il:%&#x27;</span>,i;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">declare</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">        i <span class=\"type\">int</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">begin</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">        <span class=\"keyword\">raise</span> <span class=\"keyword\">notice</span> <span class=\"string\">&#x27;i2:%&#x27;</span>,i;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">      <span class=\"keyword\">end</span>;</span></span><br><span class=\"line\"><span class=\"language-pgsql\">    <span class=\"keyword\">end</span></span></span><br><span class=\"line\"><span class=\"language-pgsql\">    $$</span> <span class=\"keyword\">language</span> plpgsql;</span><br></pre></td></tr></table></figure>\n"},{"title":"PostgreSQL中关于SCHEMA和SEARCH_PATH的一些技巧","date":"2018-08-26T00:52:57.000Z","_content":"#### 1. `extension`最好放在单独的`schema`里，就像这样\n```sql\ncreate schema \"extension_schema\";\ncreate extension \"ltree\" schema extension_schema;\n```\n\n#### 2.业务上不相干的表，建议也放在单独的`schema`中，比如这样\n```sql\ncreate schema \"metadata_schema\";\ncreate schema \"platform_schema\";\ncreate schema \"platform_schema\";\n```\n\n#### 3.[*可选*]从数据库设计的角度来说，不同`schema`中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写`SQL`的时候，可以方便的省略`schema`。这样就需要借助触发器了。像这样\n```sql\ncreate function table_create()\n  returns event_trigger\nlanguage plpgsql\nas $$\nDECLARE \n        table_name       VARCHAR;\n        short_table_name VARCHAR;\nBEGIN\n\n\n  SELECT object_identity\n  INTO table_name\n  FROM pg_event_trigger_ddl_commands();\n\n  SELECT substr(table_name, position('.' IN table_name) + 1)\n  INTO short_table_name;\n\n  SELECT count(*) > 1\n  INTO is_exist\n  FROM pg_catalog.pg_stat_user_tables\n  WHERE relname = short_table_name :: VARCHAR;\n\n  IF is_exist\n  THEN\n    RAISE EXCEPTION '%  already exists. event:%, command:%. abort.', table_name, TG_EVENT, TG_TAG;\n  END IF;\n\nEND;\n$$;\n```\n```sql\nCREATE EVENT TRIGGER etgr_table_create\nON ddl_command_end\nWHEN TAG IN ('CREATE TABLE')\nEXECUTE PROCEDURE table_create();\n```\n\n#### 4.现在`schema`已经够多了，但是用户连接到`PostgreSQL`的时候，默认只会去`$user`跟`public`这两个`schema`去寻找表，如果要访问别的`schema`还要在用到的时候采用`schema.table`的方式。这点在配置文件`postgresql.conf`中也可以看到\n```\n#search_path = '\"$user\", public'        # schema names\n```\n聪明的你已经猜到，只需要修改配置文件中的这个`search_path`，就可以让用户访问表的时候不必带上`schema`。\n但是我倒不建议这么做。因为这个配置文件是全局的。我们可能会有多个`database`运行于此，而他们有着不相干的`schema`，都写在这个配置文件里面显然不合适。我们应该通过下面的方式设置\n```sql\nalter database \"your_database\" set search_path = metadata_schema,metadata_schema,platform_schema,public;\n```\n这样就可以精确到对一个库设置它的默认`search_path`了。设置完毕后，重新建立数据库连接，执行`show search_path;`可以查看设置结果。\n除了上面通过`alter database`之外，`alter role`也能起到类似的效果，还靠小伙伴们自行发掘了。","source":"_posts/postgresql_schema_and_search_path.md","raw":"---\ntitle: PostgreSQL中关于SCHEMA和SEARCH_PATH的一些技巧\ndate: 2018-08-26 08:52:57\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n#### 1. `extension`最好放在单独的`schema`里，就像这样\n```sql\ncreate schema \"extension_schema\";\ncreate extension \"ltree\" schema extension_schema;\n```\n\n#### 2.业务上不相干的表，建议也放在单独的`schema`中，比如这样\n```sql\ncreate schema \"metadata_schema\";\ncreate schema \"platform_schema\";\ncreate schema \"platform_schema\";\n```\n\n#### 3.[*可选*]从数据库设计的角度来说，不同`schema`中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写`SQL`的时候，可以方便的省略`schema`。这样就需要借助触发器了。像这样\n```sql\ncreate function table_create()\n  returns event_trigger\nlanguage plpgsql\nas $$\nDECLARE \n        table_name       VARCHAR;\n        short_table_name VARCHAR;\nBEGIN\n\n\n  SELECT object_identity\n  INTO table_name\n  FROM pg_event_trigger_ddl_commands();\n\n  SELECT substr(table_name, position('.' IN table_name) + 1)\n  INTO short_table_name;\n\n  SELECT count(*) > 1\n  INTO is_exist\n  FROM pg_catalog.pg_stat_user_tables\n  WHERE relname = short_table_name :: VARCHAR;\n\n  IF is_exist\n  THEN\n    RAISE EXCEPTION '%  already exists. event:%, command:%. abort.', table_name, TG_EVENT, TG_TAG;\n  END IF;\n\nEND;\n$$;\n```\n```sql\nCREATE EVENT TRIGGER etgr_table_create\nON ddl_command_end\nWHEN TAG IN ('CREATE TABLE')\nEXECUTE PROCEDURE table_create();\n```\n\n#### 4.现在`schema`已经够多了，但是用户连接到`PostgreSQL`的时候，默认只会去`$user`跟`public`这两个`schema`去寻找表，如果要访问别的`schema`还要在用到的时候采用`schema.table`的方式。这点在配置文件`postgresql.conf`中也可以看到\n```\n#search_path = '\"$user\", public'        # schema names\n```\n聪明的你已经猜到，只需要修改配置文件中的这个`search_path`，就可以让用户访问表的时候不必带上`schema`。\n但是我倒不建议这么做。因为这个配置文件是全局的。我们可能会有多个`database`运行于此，而他们有着不相干的`schema`，都写在这个配置文件里面显然不合适。我们应该通过下面的方式设置\n```sql\nalter database \"your_database\" set search_path = metadata_schema,metadata_schema,platform_schema,public;\n```\n这样就可以精确到对一个库设置它的默认`search_path`了。设置完毕后，重新建立数据库连接，执行`show search_path;`可以查看设置结果。\n除了上面通过`alter database`之外，`alter role`也能起到类似的效果，还靠小伙伴们自行发掘了。","slug":"postgresql_schema_and_search_path","published":1,"updated":"2018-08-26T01:38:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmw005ny0mz16k85lsk","content":"<h4 id=\"1-extension最好放在单独的schema里，就像这样\"><a href=\"#1-extension最好放在单独的schema里，就像这样\" class=\"headerlink\" title=\"1. extension最好放在单独的schema里，就像这样\"></a>1. <code>extension</code>最好放在单独的<code>schema</code>里，就像这样</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;extension_schema&quot;;</span><br><span class=\"line\"><span class=\"keyword\">create</span> extension &quot;ltree&quot; schema extension_schema;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-业务上不相干的表，建议也放在单独的schema中，比如这样\"><a href=\"#2-业务上不相干的表，建议也放在单独的schema中，比如这样\" class=\"headerlink\" title=\"2.业务上不相干的表，建议也放在单独的schema中，比如这样\"></a>2.业务上不相干的表，建议也放在单独的<code>schema</code>中，比如这样</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;metadata_schema&quot;;</span><br><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;platform_schema&quot;;</span><br><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;platform_schema&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-可选-从数据库设计的角度来说，不同schema中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写SQL的时候，可以方便的省略schema。这样就需要借助触发器了。像这样\"><a href=\"#3-可选-从数据库设计的角度来说，不同schema中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写SQL的时候，可以方便的省略schema。这样就需要借助触发器了。像这样\" class=\"headerlink\" title=\"3.[可选]从数据库设计的角度来说，不同schema中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写SQL的时候，可以方便的省略schema。这样就需要借助触发器了。像这样\"></a>3.[<em>可选</em>]从数据库设计的角度来说，不同<code>schema</code>中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写<code>SQL</code>的时候，可以方便的省略<code>schema</code>。这样就需要借助触发器了。像这样</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> table_create()</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> event_trigger</span><br><span class=\"line\"><span class=\"keyword\">language</span> plpgsql</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">        table_name       <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\">        short_table_name <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> object_identity</span><br><span class=\"line\">  <span class=\"keyword\">INTO</span> table_name</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> pg_event_trigger_ddl_commands();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> substr(table_name, <span class=\"built_in\">position</span>(<span class=\"string\">&#x27;.&#x27;</span> <span class=\"keyword\">IN</span> table_name) <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">INTO</span> short_table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">INTO</span> is_exist</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> pg_catalog.pg_stat_user_tables</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> relname <span class=\"operator\">=</span> short_table_name :: <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  IF is_exist</span><br><span class=\"line\">  <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    RAISE EXCEPTION <span class=\"string\">&#x27;%  already exists. event:%, command:%. abort.&#x27;</span>, table_name, TG_EVENT, TG_TAG;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\">$$;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EVENT <span class=\"keyword\">TRIGGER</span> etgr_table_create</span><br><span class=\"line\"><span class=\"keyword\">ON</span> ddl_command_end</span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> TAG <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;CREATE TABLE&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">PROCEDURE</span> table_create();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-现在schema已经够多了，但是用户连接到PostgreSQL的时候，默认只会去-user跟public这两个schema去寻找表，如果要访问别的schema还要在用到的时候采用schema-table的方式。这点在配置文件postgresql-conf中也可以看到\"><a href=\"#4-现在schema已经够多了，但是用户连接到PostgreSQL的时候，默认只会去-user跟public这两个schema去寻找表，如果要访问别的schema还要在用到的时候采用schema-table的方式。这点在配置文件postgresql-conf中也可以看到\" class=\"headerlink\" title=\"4.现在schema已经够多了，但是用户连接到PostgreSQL的时候，默认只会去$user跟public这两个schema去寻找表，如果要访问别的schema还要在用到的时候采用schema.table的方式。这点在配置文件postgresql.conf中也可以看到\"></a>4.现在<code>schema</code>已经够多了，但是用户连接到<code>PostgreSQL</code>的时候，默认只会去<code>$user</code>跟<code>public</code>这两个<code>schema</code>去寻找表，如果要访问别的<code>schema</code>还要在用到的时候采用<code>schema.table</code>的方式。这点在配置文件<code>postgresql.conf</code>中也可以看到</h4><figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">#search_path = <span class=\"string\">&#x27;&quot;$user&quot;, public&#x27;</span>        # schema names</span><br></pre></td></tr></table></figure>\n<p>聪明的你已经猜到，只需要修改配置文件中的这个<code>search_path</code>，就可以让用户访问表的时候不必带上<code>schema</code>。<br>但是我倒不建议这么做。因为这个配置文件是全局的。我们可能会有多个<code>database</code>运行于此，而他们有着不相干的<code>schema</code>，都写在这个配置文件里面显然不合适。我们应该通过下面的方式设置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> database &quot;your_database&quot; <span class=\"keyword\">set</span> search_path <span class=\"operator\">=</span> metadata_schema,metadata_schema,platform_schema,public;</span><br></pre></td></tr></table></figure>\n<p>这样就可以精确到对一个库设置它的默认<code>search_path</code>了。设置完毕后，重新建立数据库连接，执行<code>show search_path;</code>可以查看设置结果。<br>除了上面通过<code>alter database</code>之外，<code>alter role</code>也能起到类似的效果，还靠小伙伴们自行发掘了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-extension最好放在单独的schema里，就像这样\"><a href=\"#1-extension最好放在单独的schema里，就像这样\" class=\"headerlink\" title=\"1. extension最好放在单独的schema里，就像这样\"></a>1. <code>extension</code>最好放在单独的<code>schema</code>里，就像这样</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;extension_schema&quot;;</span><br><span class=\"line\"><span class=\"keyword\">create</span> extension &quot;ltree&quot; schema extension_schema;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-业务上不相干的表，建议也放在单独的schema中，比如这样\"><a href=\"#2-业务上不相干的表，建议也放在单独的schema中，比如这样\" class=\"headerlink\" title=\"2.业务上不相干的表，建议也放在单独的schema中，比如这样\"></a>2.业务上不相干的表，建议也放在单独的<code>schema</code>中，比如这样</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;metadata_schema&quot;;</span><br><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;platform_schema&quot;;</span><br><span class=\"line\"><span class=\"keyword\">create</span> schema &quot;platform_schema&quot;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-可选-从数据库设计的角度来说，不同schema中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写SQL的时候，可以方便的省略schema。这样就需要借助触发器了。像这样\"><a href=\"#3-可选-从数据库设计的角度来说，不同schema中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写SQL的时候，可以方便的省略schema。这样就需要借助触发器了。像这样\" class=\"headerlink\" title=\"3.[可选]从数据库设计的角度来说，不同schema中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写SQL的时候，可以方便的省略schema。这样就需要借助触发器了。像这样\"></a>3.[<em>可选</em>]从数据库设计的角度来说，不同<code>schema</code>中的表名是可以重名的。但是我们有时候要反其道而行之，就是要任何情况下表名不同，方便编写<code>SQL</code>的时候，可以方便的省略<code>schema</code>。这样就需要借助触发器了。像这样</h4><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">function</span> table_create()</span><br><span class=\"line\">  <span class=\"keyword\">returns</span> event_trigger</span><br><span class=\"line\"><span class=\"keyword\">language</span> plpgsql</span><br><span class=\"line\"><span class=\"keyword\">as</span> $$</span><br><span class=\"line\"><span class=\"keyword\">DECLARE</span> </span><br><span class=\"line\">        table_name       <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\">        short_table_name <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\"><span class=\"keyword\">BEGIN</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> object_identity</span><br><span class=\"line\">  <span class=\"keyword\">INTO</span> table_name</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> pg_event_trigger_ddl_commands();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> substr(table_name, <span class=\"built_in\">position</span>(<span class=\"string\">&#x27;.&#x27;</span> <span class=\"keyword\">IN</span> table_name) <span class=\"operator\">+</span> <span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">INTO</span> short_table_name;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">SELECT</span> <span class=\"built_in\">count</span>(<span class=\"operator\">*</span>) <span class=\"operator\">&gt;</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">INTO</span> is_exist</span><br><span class=\"line\">  <span class=\"keyword\">FROM</span> pg_catalog.pg_stat_user_tables</span><br><span class=\"line\">  <span class=\"keyword\">WHERE</span> relname <span class=\"operator\">=</span> short_table_name :: <span class=\"type\">VARCHAR</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  IF is_exist</span><br><span class=\"line\">  <span class=\"keyword\">THEN</span></span><br><span class=\"line\">    RAISE EXCEPTION <span class=\"string\">&#x27;%  already exists. event:%, command:%. abort.&#x27;</span>, table_name, TG_EVENT, TG_TAG;</span><br><span class=\"line\">  <span class=\"keyword\">END</span> IF;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">END</span>;</span><br><span class=\"line\">$$;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> EVENT <span class=\"keyword\">TRIGGER</span> etgr_table_create</span><br><span class=\"line\"><span class=\"keyword\">ON</span> ddl_command_end</span><br><span class=\"line\"><span class=\"keyword\">WHEN</span> TAG <span class=\"keyword\">IN</span> (<span class=\"string\">&#x27;CREATE TABLE&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">EXECUTE</span> <span class=\"keyword\">PROCEDURE</span> table_create();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-现在schema已经够多了，但是用户连接到PostgreSQL的时候，默认只会去-user跟public这两个schema去寻找表，如果要访问别的schema还要在用到的时候采用schema-table的方式。这点在配置文件postgresql-conf中也可以看到\"><a href=\"#4-现在schema已经够多了，但是用户连接到PostgreSQL的时候，默认只会去-user跟public这两个schema去寻找表，如果要访问别的schema还要在用到的时候采用schema-table的方式。这点在配置文件postgresql-conf中也可以看到\" class=\"headerlink\" title=\"4.现在schema已经够多了，但是用户连接到PostgreSQL的时候，默认只会去$user跟public这两个schema去寻找表，如果要访问别的schema还要在用到的时候采用schema.table的方式。这点在配置文件postgresql.conf中也可以看到\"></a>4.现在<code>schema</code>已经够多了，但是用户连接到<code>PostgreSQL</code>的时候，默认只会去<code>$user</code>跟<code>public</code>这两个<code>schema</code>去寻找表，如果要访问别的<code>schema</code>还要在用到的时候采用<code>schema.table</code>的方式。这点在配置文件<code>postgresql.conf</code>中也可以看到</h4><figure class=\"highlight clean\"><table><tr><td class=\"code\"><pre><span class=\"line\">#search_path = <span class=\"string\">&#x27;&quot;$user&quot;, public&#x27;</span>        # schema names</span><br></pre></td></tr></table></figure>\n<p>聪明的你已经猜到，只需要修改配置文件中的这个<code>search_path</code>，就可以让用户访问表的时候不必带上<code>schema</code>。<br>但是我倒不建议这么做。因为这个配置文件是全局的。我们可能会有多个<code>database</code>运行于此，而他们有着不相干的<code>schema</code>，都写在这个配置文件里面显然不合适。我们应该通过下面的方式设置</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> database &quot;your_database&quot; <span class=\"keyword\">set</span> search_path <span class=\"operator\">=</span> metadata_schema,metadata_schema,platform_schema,public;</span><br></pre></td></tr></table></figure>\n<p>这样就可以精确到对一个库设置它的默认<code>search_path</code>了。设置完毕后，重新建立数据库连接，执行<code>show search_path;</code>可以查看设置结果。<br>除了上面通过<code>alter database</code>之外，<code>alter role</code>也能起到类似的效果，还靠小伙伴们自行发掘了。</p>\n"},{"title":"利用pg_stat_statements排查PostgreSQL中的慢SQL","date":"2019-03-24T13:26:07.000Z","_content":"1. 编辑`postgresql.conf`\n    * `shared_preload_libraries = 'pg_stat_statements'`\n    * `track_activity_query_size = 16384`\n2. 启用扩展`create extension pg_stat_statements`\n3. 查找慢`SQL`\n```\nselect round((100 * total_time / sum(total_time) over ())::numeric, 2) percent,\n       round(total_time::numeric, 2) as                                total,\n       calls,\n       round(mean_time::numeric, 2)  as                                mean,\n       query\nfrom pg_stat_statements\norder by total_time desc;\n```\n\n","source":"_posts/pg_stat_statements.md","raw":"---\ntitle: 利用pg_stat_statements排查PostgreSQL中的慢SQL\ndate: 2019-03-24 21:26:07\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n1. 编辑`postgresql.conf`\n    * `shared_preload_libraries = 'pg_stat_statements'`\n    * `track_activity_query_size = 16384`\n2. 启用扩展`create extension pg_stat_statements`\n3. 查找慢`SQL`\n```\nselect round((100 * total_time / sum(total_time) over ())::numeric, 2) percent,\n       round(total_time::numeric, 2) as                                total,\n       calls,\n       round(mean_time::numeric, 2)  as                                mean,\n       query\nfrom pg_stat_statements\norder by total_time desc;\n```\n\n","slug":"pg_stat_statements","published":1,"updated":"2020-10-30T06:17:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmw005ry0mz1i5333m8","content":"<ol>\n<li>编辑<code>postgresql.conf</code><ul>\n<li><code>shared_preload_libraries = &#39;pg_stat_statements&#39;</code></li>\n<li><code>track_activity_query_size = 16384</code></li>\n</ul>\n</li>\n<li>启用扩展<code>create extension pg_stat_statements</code></li>\n<li>查找慢<code>SQL</code><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> round((<span class=\"number\">100</span> * total_time / sum(total_time) <span class=\"keyword\">over</span> ())::<span class=\"type\">numeric</span>, <span class=\"number\">2</span>) percent,</span><br><span class=\"line\">       round(total_time::<span class=\"type\">numeric</span>, <span class=\"number\">2</span>) <span class=\"keyword\">as</span>                                total,</span><br><span class=\"line\">       calls,</span><br><span class=\"line\">       round(mean_time::<span class=\"type\">numeric</span>, <span class=\"number\">2</span>)  <span class=\"keyword\">as</span>                                mean,</span><br><span class=\"line\">       query</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_statements</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> total_time <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>编辑<code>postgresql.conf</code><ul>\n<li><code>shared_preload_libraries = &#39;pg_stat_statements&#39;</code></li>\n<li><code>track_activity_query_size = 16384</code></li>\n</ul>\n</li>\n<li>启用扩展<code>create extension pg_stat_statements</code></li>\n<li>查找慢<code>SQL</code><figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> round((<span class=\"number\">100</span> * total_time / sum(total_time) <span class=\"keyword\">over</span> ())::<span class=\"type\">numeric</span>, <span class=\"number\">2</span>) percent,</span><br><span class=\"line\">       round(total_time::<span class=\"type\">numeric</span>, <span class=\"number\">2</span>) <span class=\"keyword\">as</span>                                total,</span><br><span class=\"line\">       calls,</span><br><span class=\"line\">       round(mean_time::<span class=\"type\">numeric</span>, <span class=\"number\">2</span>)  <span class=\"keyword\">as</span>                                mean,</span><br><span class=\"line\">       query</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_statements</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> total_time <span class=\"keyword\">desc</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"PostgreSQL数组类型数据一条sql实现翻译","date":"2018-07-13T05:32:18.000Z","_content":"PostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放`1,3,5`这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。\n接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是`{1,3,5}`，关联查询后，希望看到`{红,黄,蓝}`\n话不多说，直接上sql\n```\nselect distinct app_message.id,app_message.ids_at_auth_user__to,\n  array_agg(auth_user.v_username) over (partition by app_message.id) as av_username_at_auth_user\nfrom app_message\n  join auth_user on auth_user.id = ANY (ids_at_auth_user__to)\n```\n`app_message`是个收发消息表，里面`ids_at_auth_user__to`字段是个ARRAY，存储了`auth_user`表的若干个id，代表收件箱的人（多人）\n![屏幕快照 2018-04-27 11.41.45](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png)\n\n","source":"_posts/postgresql_select_array.md","raw":"---\ntitle: PostgreSQL数组类型数据一条sql实现翻译\ndate: 2018-07-13 13:32:18\ncategories: 程序人生\ntags: PostgreSQL\n---\nPostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放`1,3,5`这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。\n接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是`{1,3,5}`，关联查询后，希望看到`{红,黄,蓝}`\n话不多说，直接上sql\n```\nselect distinct app_message.id,app_message.ids_at_auth_user__to,\n  array_agg(auth_user.v_username) over (partition by app_message.id) as av_username_at_auth_user\nfrom app_message\n  join auth_user on auth_user.id = ANY (ids_at_auth_user__to)\n```\n`app_message`是个收发消息表，里面`ids_at_auth_user__to`字段是个ARRAY，存储了`auth_user`表的若干个id，代表收件箱的人（多人）\n![屏幕快照 2018-04-27 11.41.45](/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png)\n\n","slug":"postgresql_select_array","published":1,"updated":"2018-07-16T12:53:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmw005uy0mzfj3s7z4c","content":"<p>PostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放<code>1,3,5</code>这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。<br>接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是<code>&#123;1,3,5&#125;</code>，关联查询后，希望看到<code>&#123;红,黄,蓝&#125;</code><br>话不多说，直接上sql</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> app_message.id,app_message.ids_at_auth_user__to,</span><br><span class=\"line\">  <span class=\"built_in\">array_agg</span>(auth_user.v_username) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app_message.id) <span class=\"keyword\">as</span> av_username_at_auth_user</span><br><span class=\"line\"><span class=\"keyword\">from</span> app_message</span><br><span class=\"line\">  <span class=\"keyword\">join</span> auth_user <span class=\"keyword\">on</span> auth_user.id = <span class=\"keyword\">ANY</span> (ids_at_auth_user__to)</span><br></pre></td></tr></table></figure>\n<p><code>app_message</code>是个收发消息表，里面<code>ids_at_auth_user__to</code>字段是个ARRAY，存储了<code>auth_user</code>表的若干个id，代表收件箱的人（多人）<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png\" alt=\"屏幕快照 2018-04-27 11.41.45\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>PostgreSQL的ARRAY类型是个非常实用的类型。以往在设计“多选”这种业务场景的时候，要么需要设计子表，要么弄个varchar字段，存放<code>1,3,5</code>这种逗号隔开的数据。现在有了原生支持的ARRAY类型，终于可以大胆的把多选的数据id放在这个字段里了。<br>接踵而至的问题是，如何一次性实现数组字段的数据翻译呢。比如实际数据是<code>&#123;1,3,5&#125;</code>，关联查询后，希望看到<code>&#123;红,黄,蓝&#125;</code><br>话不多说，直接上sql</p>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> app_message.id,app_message.ids_at_auth_user__to,</span><br><span class=\"line\">  <span class=\"built_in\">array_agg</span>(auth_user.v_username) <span class=\"keyword\">over</span> (<span class=\"keyword\">partition</span> <span class=\"keyword\">by</span> app_message.id) <span class=\"keyword\">as</span> av_username_at_auth_user</span><br><span class=\"line\"><span class=\"keyword\">from</span> app_message</span><br><span class=\"line\">  <span class=\"keyword\">join</span> auth_user <span class=\"keyword\">on</span> auth_user.id = <span class=\"keyword\">ANY</span> (ids_at_auth_user__to)</span><br></pre></td></tr></table></figure>\n<p><code>app_message</code>是个收发消息表，里面<code>ids_at_auth_user__to</code>字段是个ARRAY，存储了<code>auth_user</code>表的若干个id，代表收件箱的人（多人）<br><img src=\"/media/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-27%2011.41.45.png\" alt=\"屏幕快照 2018-04-27 11.41.45\"></p>\n"},{"title":"PostgreSQL里一条SQL统计合计与小计","date":"2018-07-22T10:30:31.000Z","_content":"```\nSELECT\n  CASE WHEN GROUPING(student) = 1\n    THEN '合计'\n  ELSE student END,\n  CASE WHEN  GROUPING(student) <> 1 and GROUPING(course) = 1\n    THEN '小计'\n  ELSE course END,\n  sum(score.score)\nFROM score\nGROUP BY ROLLUP (student, course)\nORDER BY GROUPING(student) DESC ,student DESC, GROUPING(course) DESC ,course DESC;\n```","source":"_posts/postgres_select_total_subtotal_one_sql.md","raw":"---\ntitle: PostgreSQL里一条SQL统计合计与小计\ndate: 2018-07-22 18:30:31\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n```\nSELECT\n  CASE WHEN GROUPING(student) = 1\n    THEN '合计'\n  ELSE student END,\n  CASE WHEN  GROUPING(student) <> 1 and GROUPING(course) = 1\n    THEN '小计'\n  ELSE course END,\n  sum(score.score)\nFROM score\nGROUP BY ROLLUP (student, course)\nORDER BY GROUPING(student) DESC ,student DESC, GROUPING(course) DESC ,course DESC;\n```","slug":"postgres_select_total_subtotal_one_sql","published":1,"updated":"2018-07-22T10:32:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmx005yy0mzazmigc2a","content":"<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> GROUPING(student) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">&#x27;合计&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> student <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span>  GROUPING(student) &lt;&gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> GROUPING(course) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">&#x27;小计&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> course <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  sum(score.score)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> score</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">ROLLUP</span> (student, course)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> GROUPING(student) <span class=\"keyword\">DESC</span> ,student <span class=\"keyword\">DESC</span>, GROUPING(course) <span class=\"keyword\">DESC</span> ,course <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span></span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span> GROUPING(student) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">&#x27;合计&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> student <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  <span class=\"keyword\">CASE</span> <span class=\"keyword\">WHEN</span>  GROUPING(student) &lt;&gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> GROUPING(course) = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">THEN</span> <span class=\"string\">&#x27;小计&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">ELSE</span> course <span class=\"keyword\">END</span>,</span><br><span class=\"line\">  sum(score.score)</span><br><span class=\"line\"><span class=\"keyword\">FROM</span> score</span><br><span class=\"line\"><span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"keyword\">ROLLUP</span> (student, course)</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> GROUPING(student) <span class=\"keyword\">DESC</span> ,student <span class=\"keyword\">DESC</span>, GROUPING(course) <span class=\"keyword\">DESC</span> ,course <span class=\"keyword\">DESC</span>;</span><br></pre></td></tr></table></figure>"},{"title":"找出Postgres中占用磁盘最多的表","date":"2020-10-30T06:15:10.000Z","_content":"\n```sql\nSELECT schemaname,\n       relname,\n       pg_size_pretty(pg_table_size(relid))\nfrom pg_stat_user_tables\norder by pg_table_size(relid) desc ,schemaname;\n```","source":"_posts/postgres_table_disk_used_order.md","raw":"---\ntitle: 找出Postgres中占用磁盘最多的表\ndate: 2020-10-30 14:15:10\ncategories: 程序人生\ntags:\n    - PostgreSQL\n---\n\n```sql\nSELECT schemaname,\n       relname,\n       pg_size_pretty(pg_table_size(relid))\nfrom pg_stat_user_tables\norder by pg_table_size(relid) desc ,schemaname;\n```","slug":"postgres_table_disk_used_order","published":1,"updated":"2020-11-16T00:57:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmy0061y0mzcqzt4nu8","content":"<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> schemaname,</span><br><span class=\"line\">       relname,</span><br><span class=\"line\">       pg_size_pretty(pg_table_size(relid))</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> pg_table_size(relid) <span class=\"keyword\">desc</span> ,schemaname;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> schemaname,</span><br><span class=\"line\">       relname,</span><br><span class=\"line\">       pg_size_pretty(pg_table_size(relid))</span><br><span class=\"line\"><span class=\"keyword\">from</span> pg_stat_user_tables</span><br><span class=\"line\"><span class=\"keyword\">order</span> <span class=\"keyword\">by</span> pg_table_size(relid) <span class=\"keyword\">desc</span> ,schemaname;</span><br></pre></td></tr></table></figure>"},{"title":"编写跨操作系统Java代码时动态获取文件分隔符","date":"2018-07-25T22:20:45.000Z","_content":"### 大概有以下几种思路\n1. `File.separator`系统相关的默认名称分隔符，为方便起见，表示为字符串。 该字符串包含单个字符，即separatorChar。\n2. `FileSystems.getDefault().getSeparator()`返回名称分隔符，表示为字符串。\n名称分隔符用于分隔路径字符串中的名称。 实现可能支持多个名称分隔符，在这种情况下，此方法返回特定于实现的默认名称分隔符。 通过调用toString（）方法创建路径字符串时使用此分隔符。\n对于默认提供程序，此方法返回与java.io.File.separator相同的分隔符。\n3. `System.getProperty(\"file.separator\")`\n\n正常情况下，选择第一种，就ok了。第二种是在Java7时代追加的，功能更为强大。第三种也不错，因为额外提供通过`-Dfile.separator=`参数来指定的特性。","source":"_posts/separator_in_java.md","raw":"---\ntitle: 编写跨操作系统Java代码时动态获取文件分隔符\ndate: 2018-07-26 06:20:45\ncategories: 程序人生\ntags:\n    - Java\n---\n### 大概有以下几种思路\n1. `File.separator`系统相关的默认名称分隔符，为方便起见，表示为字符串。 该字符串包含单个字符，即separatorChar。\n2. `FileSystems.getDefault().getSeparator()`返回名称分隔符，表示为字符串。\n名称分隔符用于分隔路径字符串中的名称。 实现可能支持多个名称分隔符，在这种情况下，此方法返回特定于实现的默认名称分隔符。 通过调用toString（）方法创建路径字符串时使用此分隔符。\n对于默认提供程序，此方法返回与java.io.File.separator相同的分隔符。\n3. `System.getProperty(\"file.separator\")`\n\n正常情况下，选择第一种，就ok了。第二种是在Java7时代追加的，功能更为强大。第三种也不错，因为额外提供通过`-Dfile.separator=`参数来指定的特性。","slug":"separator_in_java","published":1,"updated":"2018-08-14T01:41:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmy0065y0mzd6k94d9r","content":"<h3 id=\"大概有以下几种思路\"><a href=\"#大概有以下几种思路\" class=\"headerlink\" title=\"大概有以下几种思路\"></a>大概有以下几种思路</h3><ol>\n<li><code>File.separator</code>系统相关的默认名称分隔符，为方便起见，表示为字符串。 该字符串包含单个字符，即separatorChar。</li>\n<li><code>FileSystems.getDefault().getSeparator()</code>返回名称分隔符，表示为字符串。<br>名称分隔符用于分隔路径字符串中的名称。 实现可能支持多个名称分隔符，在这种情况下，此方法返回特定于实现的默认名称分隔符。 通过调用toString（）方法创建路径字符串时使用此分隔符。<br>对于默认提供程序，此方法返回与java.io.File.separator相同的分隔符。</li>\n<li><code>System.getProperty(&quot;file.separator&quot;)</code></li>\n</ol>\n<p>正常情况下，选择第一种，就ok了。第二种是在Java7时代追加的，功能更为强大。第三种也不错，因为额外提供通过<code>-Dfile.separator=</code>参数来指定的特性。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"大概有以下几种思路\"><a href=\"#大概有以下几种思路\" class=\"headerlink\" title=\"大概有以下几种思路\"></a>大概有以下几种思路</h3><ol>\n<li><code>File.separator</code>系统相关的默认名称分隔符，为方便起见，表示为字符串。 该字符串包含单个字符，即separatorChar。</li>\n<li><code>FileSystems.getDefault().getSeparator()</code>返回名称分隔符，表示为字符串。<br>名称分隔符用于分隔路径字符串中的名称。 实现可能支持多个名称分隔符，在这种情况下，此方法返回特定于实现的默认名称分隔符。 通过调用toString（）方法创建路径字符串时使用此分隔符。<br>对于默认提供程序，此方法返回与java.io.File.separator相同的分隔符。</li>\n<li><code>System.getProperty(&quot;file.separator&quot;)</code></li>\n</ol>\n<p>正常情况下，选择第一种，就ok了。第二种是在Java7时代追加的，功能更为强大。第三种也不错，因为额外提供通过<code>-Dfile.separator=</code>参数来指定的特性。</p>\n"},{"title":"性能封神的数据库访问库reactive-pg-client初探","date":"2018-09-14T01:29:27.000Z","_content":"不知道有没有人关注过TechEmpower的`Web Framework Benchmarks`（https://www.techempower.com/benchmarks/ ），一种把各种`Web`后端开发技术都罗列起来，在同样的机器下跑最简单的业务逻辑，来对比各技术性能的竞赛。参与跑分的技术代码，都是开源的，甚至很多代码就是由`Web`技术本身的作者维护的。\n虽说，跑分不能代表性能，性能更不能代表技术的优劣。但是有着么一个性能维度的粗浅比较，还是能带给我们不一样的收获。\n比如，在`2018-06-06`的最新一场比拼中，`Vert.x`搭配`PostgreSQL`的组合，在部分比试时表现十分抢眼，性能一骑绝尘且大幅领先第二名。被它踩在脚下摩擦的对手，不乏我们熟知的技术方案，比如`go`、`nodejs`、`spring`、`php`，还有`mysql`、`mongodb`等数据库。（这里我无意引战，有兴趣的朋友可以查看具体[跑分结果](https://www.techempower.com/benchmarks/#section=data-r16&hw=ph&test=db)及[相关代码](https://github.com/TechEmpower/FrameworkBenchmarks/tree/round16)）\n查看具体跑分[代码](https://github.com/TechEmpower/FrameworkBenchmarks/blob/724a773096f403d149cfaf59b8257465bbf70103/frameworks/Java/vertx/src/main/java/vertx/App.java)可知，`Vert.x`之所以能位居榜首，与其使用的数据库客户端是密不可分的。作为一套基于`Java`的技术解决方案，`Vert.x`没有使用`Java`程序员所熟知的`JDBC`，而是使用了一种叫[reactive-pg-client](https://github.com/reactiverse/reactive-pg-client)的技术。\n`reactive-pg-client`与`JDBC`最大的区别就是前者是针对`PostgreSQL`数据库单独开发的，利用了`PostgreSQL`异步特性，最大限度了挖掘了数据库的访问性能。\n现在我们就来简单尝试下`reactive-pg-client`，首先添加依赖\n```\ncompile 'io.reactiverse:reactive-pg-client:0.10.3'\n```\n准备`PgPoolOptions`\n```\nPgPoolOptions options = new PgPoolOptions()\n  .setPort(5432)\n  .setHost(\"the-host\")\n  .setDatabase(\"the-db\")\n  .setUser(\"user\")\n  .setPassword(\"secret\")\n  .setMaxSize(5);\n```\n接下来就可以用了\n```\n// Create the client pool\nPgPool client = PgClient.pool(options);\n\n// A simple query\nclient.query(\"SELECT * FROM users WHERE id='julien'\", ar -> {\n  if (ar.succeeded()) {\n    PgRowSet result = ar.result();\n    System.out.println(\"Got \" + result.size() + \" rows \");\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n\n  // Now close the pool\n  client.close();\n});\n```\n典型的异步代码编写风格，正是由于该库先天异步的特性，我们可以用一个线程，就能控制多个数据库链接（The client is reactive and non blocking, allowing to handle many database connections with a single thread.），籍此获得更好的计算机资源利用率，从而提高性能。更多信息请查看官方文档[reactive-pg-client](https://reactiverse.io/reactive-pg-client/guide/java/)\n\n明天，我将继续深入`reactive-pg-client`，带你尝试`PostgreSQL`独有的`NOTIFY`特性，实现从数据库端到业务程序段的数据主动推送。","source":"_posts/reactive-pg-client_start.md","raw":"---\ntitle: 性能封神的数据库访问库reactive-pg-client初探\ndate: 2018-09-14 09:29:27\ncategories: 程序人生\ntags:\n    - Vert.x\n    - PostgreSQL\n---\n不知道有没有人关注过TechEmpower的`Web Framework Benchmarks`（https://www.techempower.com/benchmarks/ ），一种把各种`Web`后端开发技术都罗列起来，在同样的机器下跑最简单的业务逻辑，来对比各技术性能的竞赛。参与跑分的技术代码，都是开源的，甚至很多代码就是由`Web`技术本身的作者维护的。\n虽说，跑分不能代表性能，性能更不能代表技术的优劣。但是有着么一个性能维度的粗浅比较，还是能带给我们不一样的收获。\n比如，在`2018-06-06`的最新一场比拼中，`Vert.x`搭配`PostgreSQL`的组合，在部分比试时表现十分抢眼，性能一骑绝尘且大幅领先第二名。被它踩在脚下摩擦的对手，不乏我们熟知的技术方案，比如`go`、`nodejs`、`spring`、`php`，还有`mysql`、`mongodb`等数据库。（这里我无意引战，有兴趣的朋友可以查看具体[跑分结果](https://www.techempower.com/benchmarks/#section=data-r16&hw=ph&test=db)及[相关代码](https://github.com/TechEmpower/FrameworkBenchmarks/tree/round16)）\n查看具体跑分[代码](https://github.com/TechEmpower/FrameworkBenchmarks/blob/724a773096f403d149cfaf59b8257465bbf70103/frameworks/Java/vertx/src/main/java/vertx/App.java)可知，`Vert.x`之所以能位居榜首，与其使用的数据库客户端是密不可分的。作为一套基于`Java`的技术解决方案，`Vert.x`没有使用`Java`程序员所熟知的`JDBC`，而是使用了一种叫[reactive-pg-client](https://github.com/reactiverse/reactive-pg-client)的技术。\n`reactive-pg-client`与`JDBC`最大的区别就是前者是针对`PostgreSQL`数据库单独开发的，利用了`PostgreSQL`异步特性，最大限度了挖掘了数据库的访问性能。\n现在我们就来简单尝试下`reactive-pg-client`，首先添加依赖\n```\ncompile 'io.reactiverse:reactive-pg-client:0.10.3'\n```\n准备`PgPoolOptions`\n```\nPgPoolOptions options = new PgPoolOptions()\n  .setPort(5432)\n  .setHost(\"the-host\")\n  .setDatabase(\"the-db\")\n  .setUser(\"user\")\n  .setPassword(\"secret\")\n  .setMaxSize(5);\n```\n接下来就可以用了\n```\n// Create the client pool\nPgPool client = PgClient.pool(options);\n\n// A simple query\nclient.query(\"SELECT * FROM users WHERE id='julien'\", ar -> {\n  if (ar.succeeded()) {\n    PgRowSet result = ar.result();\n    System.out.println(\"Got \" + result.size() + \" rows \");\n  } else {\n    System.out.println(\"Failure: \" + ar.cause().getMessage());\n  }\n\n  // Now close the pool\n  client.close();\n});\n```\n典型的异步代码编写风格，正是由于该库先天异步的特性，我们可以用一个线程，就能控制多个数据库链接（The client is reactive and non blocking, allowing to handle many database connections with a single thread.），籍此获得更好的计算机资源利用率，从而提高性能。更多信息请查看官方文档[reactive-pg-client](https://reactiverse.io/reactive-pg-client/guide/java/)\n\n明天，我将继续深入`reactive-pg-client`，带你尝试`PostgreSQL`独有的`NOTIFY`特性，实现从数据库端到业务程序段的数据主动推送。","slug":"reactive-pg-client_start","published":1,"updated":"2018-09-14T02:35:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmy0068y0mzhnfy31mj","content":"<p>不知道有没有人关注过TechEmpower的<code>Web Framework Benchmarks</code>（<a href=\"https://www.techempower.com/benchmarks/\">https://www.techempower.com/benchmarks/</a> ），一种把各种<code>Web</code>后端开发技术都罗列起来，在同样的机器下跑最简单的业务逻辑，来对比各技术性能的竞赛。参与跑分的技术代码，都是开源的，甚至很多代码就是由<code>Web</code>技术本身的作者维护的。<br>虽说，跑分不能代表性能，性能更不能代表技术的优劣。但是有着么一个性能维度的粗浅比较，还是能带给我们不一样的收获。<br>比如，在<code>2018-06-06</code>的最新一场比拼中，<code>Vert.x</code>搭配<code>PostgreSQL</code>的组合，在部分比试时表现十分抢眼，性能一骑绝尘且大幅领先第二名。被它踩在脚下摩擦的对手，不乏我们熟知的技术方案，比如<code>go</code>、<code>nodejs</code>、<code>spring</code>、<code>php</code>，还有<code>mysql</code>、<code>mongodb</code>等数据库。（这里我无意引战，有兴趣的朋友可以查看具体<a href=\"https://www.techempower.com/benchmarks/#section=data-r16&hw=ph&test=db\">跑分结果</a>及<a href=\"https://github.com/TechEmpower/FrameworkBenchmarks/tree/round16\">相关代码</a>）<br>查看具体跑分<a href=\"https://github.com/TechEmpower/FrameworkBenchmarks/blob/724a773096f403d149cfaf59b8257465bbf70103/frameworks/Java/vertx/src/main/java/vertx/App.java\">代码</a>可知，<code>Vert.x</code>之所以能位居榜首，与其使用的数据库客户端是密不可分的。作为一套基于<code>Java</code>的技术解决方案，<code>Vert.x</code>没有使用<code>Java</code>程序员所熟知的<code>JDBC</code>，而是使用了一种叫<a href=\"https://github.com/reactiverse/reactive-pg-client\">reactive-pg-client</a>的技术。<br><code>reactive-pg-client</code>与<code>JDBC</code>最大的区别就是前者是针对<code>PostgreSQL</code>数据库单独开发的，利用了<code>PostgreSQL</code>异步特性，最大限度了挖掘了数据库的访问性能。<br>现在我们就来简单尝试下<code>reactive-pg-client</code>，首先添加依赖</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">compile</span> &#x27;io.reactiverse:reactive-pg-client:<span class=\"number\">0</span>.<span class=\"number\">10</span>.<span class=\"number\">3</span>&#x27;</span><br></pre></td></tr></table></figure>\n<p>准备<code>PgPoolOptions</code></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">PgPoolOptions options = <span class=\"keyword\">new</span> <span class=\"constructor\">PgPoolOptions()</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Port(5432)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Host(<span class=\"string\">&quot;the-host&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Database(<span class=\"string\">&quot;the-db&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">User(<span class=\"string\">&quot;user&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Password(<span class=\"string\">&quot;secret&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">MaxSize(5)</span>;</span><br></pre></td></tr></table></figure>\n<p>接下来就可以用了</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create the client pool</span></span><br><span class=\"line\">PgPool client = PgClient.pool(<span class=\"keyword\">options</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A simple query</span></span><br><span class=\"line\">client.query(<span class=\"string\">&quot;SELECT * FROM users WHERE id=&#x27;julien&#x27;&quot;</span>, ar -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ar.succeeded()) &#123;</span><br><span class=\"line\">    PgRowSet result = ar.result();</span><br><span class=\"line\">    System.out.<span class=\"keyword\">println</span>(<span class=\"string\">&quot;Got &quot;</span> + result.<span class=\"keyword\">size</span>() + <span class=\"string\">&quot; rows &quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.<span class=\"keyword\">println</span>(<span class=\"string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Now close the pool</span></span><br><span class=\"line\">  client.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>典型的异步代码编写风格，正是由于该库先天异步的特性，我们可以用一个线程，就能控制多个数据库链接（The client is reactive and non blocking, allowing to handle many database connections with a single thread.），籍此获得更好的计算机资源利用率，从而提高性能。更多信息请查看官方文档<a href=\"https://reactiverse.io/reactive-pg-client/guide/java/\">reactive-pg-client</a></p>\n<p>明天，我将继续深入<code>reactive-pg-client</code>，带你尝试<code>PostgreSQL</code>独有的<code>NOTIFY</code>特性，实现从数据库端到业务程序段的数据主动推送。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>不知道有没有人关注过TechEmpower的<code>Web Framework Benchmarks</code>（<a href=\"https://www.techempower.com/benchmarks/\">https://www.techempower.com/benchmarks/</a> ），一种把各种<code>Web</code>后端开发技术都罗列起来，在同样的机器下跑最简单的业务逻辑，来对比各技术性能的竞赛。参与跑分的技术代码，都是开源的，甚至很多代码就是由<code>Web</code>技术本身的作者维护的。<br>虽说，跑分不能代表性能，性能更不能代表技术的优劣。但是有着么一个性能维度的粗浅比较，还是能带给我们不一样的收获。<br>比如，在<code>2018-06-06</code>的最新一场比拼中，<code>Vert.x</code>搭配<code>PostgreSQL</code>的组合，在部分比试时表现十分抢眼，性能一骑绝尘且大幅领先第二名。被它踩在脚下摩擦的对手，不乏我们熟知的技术方案，比如<code>go</code>、<code>nodejs</code>、<code>spring</code>、<code>php</code>，还有<code>mysql</code>、<code>mongodb</code>等数据库。（这里我无意引战，有兴趣的朋友可以查看具体<a href=\"https://www.techempower.com/benchmarks/#section=data-r16&hw=ph&test=db\">跑分结果</a>及<a href=\"https://github.com/TechEmpower/FrameworkBenchmarks/tree/round16\">相关代码</a>）<br>查看具体跑分<a href=\"https://github.com/TechEmpower/FrameworkBenchmarks/blob/724a773096f403d149cfaf59b8257465bbf70103/frameworks/Java/vertx/src/main/java/vertx/App.java\">代码</a>可知，<code>Vert.x</code>之所以能位居榜首，与其使用的数据库客户端是密不可分的。作为一套基于<code>Java</code>的技术解决方案，<code>Vert.x</code>没有使用<code>Java</code>程序员所熟知的<code>JDBC</code>，而是使用了一种叫<a href=\"https://github.com/reactiverse/reactive-pg-client\">reactive-pg-client</a>的技术。<br><code>reactive-pg-client</code>与<code>JDBC</code>最大的区别就是前者是针对<code>PostgreSQL</code>数据库单独开发的，利用了<code>PostgreSQL</code>异步特性，最大限度了挖掘了数据库的访问性能。<br>现在我们就来简单尝试下<code>reactive-pg-client</code>，首先添加依赖</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">compile</span> &#x27;io.reactiverse:reactive-pg-client:<span class=\"number\">0</span>.<span class=\"number\">10</span>.<span class=\"number\">3</span>&#x27;</span><br></pre></td></tr></table></figure>\n<p>准备<code>PgPoolOptions</code></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"code\"><pre><span class=\"line\">PgPoolOptions options = <span class=\"keyword\">new</span> <span class=\"constructor\">PgPoolOptions()</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Port(5432)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Host(<span class=\"string\">&quot;the-host&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Database(<span class=\"string\">&quot;the-db&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">User(<span class=\"string\">&quot;user&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">Password(<span class=\"string\">&quot;secret&quot;</span>)</span></span><br><span class=\"line\">  .set<span class=\"constructor\">MaxSize(5)</span>;</span><br></pre></td></tr></table></figure>\n<p>接下来就可以用了</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create the client pool</span></span><br><span class=\"line\">PgPool client = PgClient.pool(<span class=\"keyword\">options</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// A simple query</span></span><br><span class=\"line\">client.query(<span class=\"string\">&quot;SELECT * FROM users WHERE id=&#x27;julien&#x27;&quot;</span>, ar -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ar.succeeded()) &#123;</span><br><span class=\"line\">    PgRowSet result = ar.result();</span><br><span class=\"line\">    System.out.<span class=\"keyword\">println</span>(<span class=\"string\">&quot;Got &quot;</span> + result.<span class=\"keyword\">size</span>() + <span class=\"string\">&quot; rows &quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    System.out.<span class=\"keyword\">println</span>(<span class=\"string\">&quot;Failure: &quot;</span> + ar.cause().getMessage());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Now close the pool</span></span><br><span class=\"line\">  client.close();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>典型的异步代码编写风格，正是由于该库先天异步的特性，我们可以用一个线程，就能控制多个数据库链接（The client is reactive and non blocking, allowing to handle many database connections with a single thread.），籍此获得更好的计算机资源利用率，从而提高性能。更多信息请查看官方文档<a href=\"https://reactiverse.io/reactive-pg-client/guide/java/\">reactive-pg-client</a></p>\n<p>明天，我将继续深入<code>reactive-pg-client</code>，带你尝试<code>PostgreSQL</code>独有的<code>NOTIFY</code>特性，实现从数据库端到业务程序段的数据主动推送。</p>\n"},{"title":"使用postgrest全自动生成面向表的RESTful接口","date":"2018-10-10T07:58:38.000Z","_content":"\n尝试使用了一下`postgrest`，用法非常简单，但是功能非常强大。不仅能生成相应的`RESTful`接口，更是连`swagger`文档都给准备好了，简直意外惊喜。\n关于使用，如果有`docker`经验的话，直接看这个`compose`文件就好了\n```\n# postgrest.yml\n\nversion: '3'\nservices:\n  server:\n    image: postgrest/postgrest\n    ports:\n      - \"3000:3000\"\n    links:\n      - db:db\n    environment:\n      PGRST_DB_URI: postgres://app_user:password@db:5432/app_db\n      PGRST_DB_SCHEMA: public\n      PGRST_DB_ANON_ROLE: app_user #In production this role should not be the same as the one used for the connection\n    depends_on:\n      - db\n  db:\n    image: postgres\n    ports:\n      - \"5433:5432\"\n    environment:\n      POSTGRES_DB: app_db\n      POSTGRES_USER: app_user\n      POSTGRES_PASSWORD: password\n  # Uncomment this if you want to persist the data.\n  # volumes:\n  #   - \"./pgdata:/var/lib/postgresql/data\"\n  swagger:\n    image: swaggerapi/swagger-ui\n    ports:\n      - \"8080:8080\"\n    expose:\n      - \"8080\"\n    environment:\n      API_URL: http://127.0.0.1:3000/\n```\n运行命令\n```\ndocker-compose -f postgrest.yml up\n```\n就可以顺利启动好了。浏览器访问`http://127.0.0.1:8080`，就能看到`swagger`的界面，而`RESTful`接口则运行在`http://127.0.0.1:3000`。\n当然此时因为没有创建表，所以还没有接口可供使用。只要去数据库创建几张表，再回来刷新`swagger`页面，就能看到全套的`RESTful`接口喽。","source":"_posts/postgrest.md","raw":"---\ntitle: 使用postgrest全自动生成面向表的RESTful接口\ndate: 2018-10-10 15:58:38\ncategories: 程序人生\ntags:\n    - PostgreSQL\n    - RESTful\n---\n\n尝试使用了一下`postgrest`，用法非常简单，但是功能非常强大。不仅能生成相应的`RESTful`接口，更是连`swagger`文档都给准备好了，简直意外惊喜。\n关于使用，如果有`docker`经验的话，直接看这个`compose`文件就好了\n```\n# postgrest.yml\n\nversion: '3'\nservices:\n  server:\n    image: postgrest/postgrest\n    ports:\n      - \"3000:3000\"\n    links:\n      - db:db\n    environment:\n      PGRST_DB_URI: postgres://app_user:password@db:5432/app_db\n      PGRST_DB_SCHEMA: public\n      PGRST_DB_ANON_ROLE: app_user #In production this role should not be the same as the one used for the connection\n    depends_on:\n      - db\n  db:\n    image: postgres\n    ports:\n      - \"5433:5432\"\n    environment:\n      POSTGRES_DB: app_db\n      POSTGRES_USER: app_user\n      POSTGRES_PASSWORD: password\n  # Uncomment this if you want to persist the data.\n  # volumes:\n  #   - \"./pgdata:/var/lib/postgresql/data\"\n  swagger:\n    image: swaggerapi/swagger-ui\n    ports:\n      - \"8080:8080\"\n    expose:\n      - \"8080\"\n    environment:\n      API_URL: http://127.0.0.1:3000/\n```\n运行命令\n```\ndocker-compose -f postgrest.yml up\n```\n就可以顺利启动好了。浏览器访问`http://127.0.0.1:8080`，就能看到`swagger`的界面，而`RESTful`接口则运行在`http://127.0.0.1:3000`。\n当然此时因为没有创建表，所以还没有接口可供使用。只要去数据库创建几张表，再回来刷新`swagger`页面，就能看到全套的`RESTful`接口喽。","slug":"postgrest","published":1,"updated":"2018-10-10T08:05:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmz006cy0mzbw6s39st","content":"<p>尝试使用了一下<code>postgrest</code>，用法非常简单，但是功能非常强大。不仅能生成相应的<code>RESTful</code>接口，更是连<code>swagger</code>文档都给准备好了，简直意外惊喜。<br>关于使用，如果有<code>docker</code>经验的话，直接看这个<code>compose</code>文件就好了</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># postgrest.yml</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  server:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> postgrest/postgrest</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;3000:3000&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    links:</span></span><br><span class=\"line\">      - db:db</span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      PGRST_DB_URI:</span> postgres:<span class=\"comment\">//app_user:password@db:5432/app_db</span></span><br><span class=\"line\"><span class=\"symbol\">      PGRST_DB_SCHEMA:</span> public</span><br><span class=\"line\"><span class=\"symbol\">      PGRST_DB_ANON_ROLE:</span> app_user <span class=\"meta\">#In production this role should not be the same as the one used for the connection</span></span><br><span class=\"line\"><span class=\"symbol\">    depends_on:</span></span><br><span class=\"line\">      - db</span><br><span class=\"line\"><span class=\"symbol\">  db:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> postgres</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;5433:5432&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      POSTGRES_DB:</span> app_db</span><br><span class=\"line\"><span class=\"symbol\">      POSTGRES_USER:</span> app_user</span><br><span class=\"line\"><span class=\"symbol\">      POSTGRES_PASSWORD:</span> password</span><br><span class=\"line\">  <span class=\"meta\"># Uncomment this <span class=\"keyword\">if</span> you want to persist the data.</span></span><br><span class=\"line\">  <span class=\"meta\"># volumes:</span></span><br><span class=\"line\">  <span class=\"meta\">#   - <span class=\"string\">&quot;./pgdata:/var/lib/postgresql/data&quot;</span></span></span><br><span class=\"line\"><span class=\"symbol\">  swagger:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> swaggerapi/swagger-ui</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    expose:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;8080&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      API_URL:</span> http:<span class=\"comment\">//127.0.0.1:3000/</span></span><br></pre></td></tr></table></figure>\n<p>运行命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker<span class=\"literal\">-compose</span> <span class=\"operator\">-f</span> postgrest.yml up</span><br></pre></td></tr></table></figure>\n<p>就可以顺利启动好了。浏览器访问<code>http://127.0.0.1:8080</code>，就能看到<code>swagger</code>的界面，而<code>RESTful</code>接口则运行在<code>http://127.0.0.1:3000</code>。<br>当然此时因为没有创建表，所以还没有接口可供使用。只要去数据库创建几张表，再回来刷新<code>swagger</code>页面，就能看到全套的<code>RESTful</code>接口喽。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>尝试使用了一下<code>postgrest</code>，用法非常简单，但是功能非常强大。不仅能生成相应的<code>RESTful</code>接口，更是连<code>swagger</code>文档都给准备好了，简直意外惊喜。<br>关于使用，如果有<code>docker</code>经验的话，直接看这个<code>compose</code>文件就好了</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># postgrest.yml</span></span><br><span class=\"line\"><span class=\"symbol\"></span></span><br><span class=\"line\"><span class=\"symbol\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"symbol\">services:</span></span><br><span class=\"line\"><span class=\"symbol\">  server:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> postgrest/postgrest</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;3000:3000&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    links:</span></span><br><span class=\"line\">      - db:db</span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      PGRST_DB_URI:</span> postgres:<span class=\"comment\">//app_user:password@db:5432/app_db</span></span><br><span class=\"line\"><span class=\"symbol\">      PGRST_DB_SCHEMA:</span> public</span><br><span class=\"line\"><span class=\"symbol\">      PGRST_DB_ANON_ROLE:</span> app_user <span class=\"meta\">#In production this role should not be the same as the one used for the connection</span></span><br><span class=\"line\"><span class=\"symbol\">    depends_on:</span></span><br><span class=\"line\">      - db</span><br><span class=\"line\"><span class=\"symbol\">  db:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> postgres</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;5433:5432&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      POSTGRES_DB:</span> app_db</span><br><span class=\"line\"><span class=\"symbol\">      POSTGRES_USER:</span> app_user</span><br><span class=\"line\"><span class=\"symbol\">      POSTGRES_PASSWORD:</span> password</span><br><span class=\"line\">  <span class=\"meta\"># Uncomment this <span class=\"keyword\">if</span> you want to persist the data.</span></span><br><span class=\"line\">  <span class=\"meta\"># volumes:</span></span><br><span class=\"line\">  <span class=\"meta\">#   - <span class=\"string\">&quot;./pgdata:/var/lib/postgresql/data&quot;</span></span></span><br><span class=\"line\"><span class=\"symbol\">  swagger:</span></span><br><span class=\"line\"><span class=\"symbol\">    image:</span> swaggerapi/swagger-ui</span><br><span class=\"line\"><span class=\"symbol\">    ports:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;8080:8080&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    expose:</span></span><br><span class=\"line\">      - <span class=\"string\">&quot;8080&quot;</span></span><br><span class=\"line\"><span class=\"symbol\">    environment:</span></span><br><span class=\"line\"><span class=\"symbol\">      API_URL:</span> http:<span class=\"comment\">//127.0.0.1:3000/</span></span><br></pre></td></tr></table></figure>\n<p>运行命令</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker<span class=\"literal\">-compose</span> <span class=\"operator\">-f</span> postgrest.yml up</span><br></pre></td></tr></table></figure>\n<p>就可以顺利启动好了。浏览器访问<code>http://127.0.0.1:8080</code>，就能看到<code>swagger</code>的界面，而<code>RESTful</code>接口则运行在<code>http://127.0.0.1:3000</code>。<br>当然此时因为没有创建表，所以还没有接口可供使用。只要去数据库创建几张表，再回来刷新<code>swagger</code>页面，就能看到全套的<code>RESTful</code>接口喽。</p>\n"},{"title":"reactive-pg-client实现数据库到应用程序的数据推送","date":"2018-09-15T09:53:48.000Z","_content":"昨天聊过，依托`reactive-pg-client`可以做很多传统`JDBC`无法实现的事情，比如`PostgreSQL`的消息推送（`notify`和`listen`）。有了这种功能，我们就可以轻易实现从数据库层主向业务逻辑代码推送消息的功能。可以说，又一次为我们打开了新世界的大门。\n### 先来回顾下`PostgreSQL`的`notify`和`listen`\n主要参考[官方文档](http://www.postgres.cn/docs/10/sql-notify.html)，其实非常简单，核心`SQL`就两句话：\n* 发消息：\n    ```\n    NOTIFY channel_name;\n    ```\n    `NOTIFY`是一个关键字，后面跟着的第一参数是，频道的名字，这个是用户随便定义的，只要之后跟`LISTEN`的保持一致即可。`NOTIFY`还有第二个可选参数，就是消息内容，类型也必须是字符串，并且长度限制在`8000`字节。\n    `NOTIFY channel_name message_body`还有一种等效的写法，也就是\n    ```\n    SELECT pg_notify(channel_name，message_body）\n    ```\n    后者的好处是可以用到`SQL`的预编译特性。\n* 收消息：\n    ```\n    LISTEN channel_name;\n    ```\n    \n这里补充几个知识点：\n* `NOTIFY`/`LISTEN`这些语法不是`SQL` 标准，属于`PostgreSQL`特有的功能\n* 跟`LISTEN`相反的，有`UNLISTEN`可供使用\n* `NOTIFY`是广播模式，也就是所有同频道的`LISTEN`都能接收到信息\n* 先`NOTIFY`，再`LISTEN`是没有效果的。这个也符合直觉。\n* 想测试的话，最好借助`PostgreSQL`自带的`psql`环境，可以很容易测试，其他`SQL`客户端程序可能就没那么友好了。\n\n### 有了`PostgreSQL`的基础知识储备，我们就可以用`reactive-pg-client`尝试一把了\n直接上代码\n```\n pgClient.getConnection {\n            def conn = it.result()\n\n            conn.notificationHandler({ notification ->\n                println(\"Received ${notification.payload} on channel ${notification.channel}\")\n                context.assertEquals(notification.payload, message)\n                context.assertEquals(notification.channel, channelName)\n                async.complete()\n            })\n\n            conn.preparedQuery(\"LISTEN $channelName\", { ar ->\n                println(\"Subscribed to channel\")\n\n                conn.preparedQuery('''select pg_notify($1,$2)''', Tuple.of(channelName, message), {})\n            })\n        }\n```\n没什么复杂的，通过`reactive-pg-client`拿到`connection`之后，先用这个`connection`注册个`notificationHandler`用来接收消息。但是此时还不够，还必须在同`connection`上执行`LISTEN`的`SQL`语句，才能保证之前的`notificationHandler`是有效的。至于`NOTIFY`语句并不要求非要用这个`connection`，这也是符合我们业务需求的。\n以上完整代码，可以在我的[github](https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy)中找到。\n上面我是在当前代码中，手动`NOTIFY`的，我们完全可以吧`NOTIFY`放在数据库的触发器、或者数据库定时任务中，就可以实现数据库到应用程序的数据推送了。另外经测试，`NOTIFY`与`LISTEN`两个语法在`JDBC`环境下也是可以执行成功的（`SQL`不会报错），只是`LISTEN`不会有任何效果就是了。\n\n明天，我将演示基于`reactive-pg-client`的数据库事务demo。","source":"_posts/reactive-pg-client_notify.md","raw":"---\ntitle: reactive-pg-client实现数据库到应用程序的数据推送\ndate: 2018-09-15 17:53:48\ncategories: 程序人生\ntags:\n    - Vert.x\n    - PostgreSQL\n---\n昨天聊过，依托`reactive-pg-client`可以做很多传统`JDBC`无法实现的事情，比如`PostgreSQL`的消息推送（`notify`和`listen`）。有了这种功能，我们就可以轻易实现从数据库层主向业务逻辑代码推送消息的功能。可以说，又一次为我们打开了新世界的大门。\n### 先来回顾下`PostgreSQL`的`notify`和`listen`\n主要参考[官方文档](http://www.postgres.cn/docs/10/sql-notify.html)，其实非常简单，核心`SQL`就两句话：\n* 发消息：\n    ```\n    NOTIFY channel_name;\n    ```\n    `NOTIFY`是一个关键字，后面跟着的第一参数是，频道的名字，这个是用户随便定义的，只要之后跟`LISTEN`的保持一致即可。`NOTIFY`还有第二个可选参数，就是消息内容，类型也必须是字符串，并且长度限制在`8000`字节。\n    `NOTIFY channel_name message_body`还有一种等效的写法，也就是\n    ```\n    SELECT pg_notify(channel_name，message_body）\n    ```\n    后者的好处是可以用到`SQL`的预编译特性。\n* 收消息：\n    ```\n    LISTEN channel_name;\n    ```\n    \n这里补充几个知识点：\n* `NOTIFY`/`LISTEN`这些语法不是`SQL` 标准，属于`PostgreSQL`特有的功能\n* 跟`LISTEN`相反的，有`UNLISTEN`可供使用\n* `NOTIFY`是广播模式，也就是所有同频道的`LISTEN`都能接收到信息\n* 先`NOTIFY`，再`LISTEN`是没有效果的。这个也符合直觉。\n* 想测试的话，最好借助`PostgreSQL`自带的`psql`环境，可以很容易测试，其他`SQL`客户端程序可能就没那么友好了。\n\n### 有了`PostgreSQL`的基础知识储备，我们就可以用`reactive-pg-client`尝试一把了\n直接上代码\n```\n pgClient.getConnection {\n            def conn = it.result()\n\n            conn.notificationHandler({ notification ->\n                println(\"Received ${notification.payload} on channel ${notification.channel}\")\n                context.assertEquals(notification.payload, message)\n                context.assertEquals(notification.channel, channelName)\n                async.complete()\n            })\n\n            conn.preparedQuery(\"LISTEN $channelName\", { ar ->\n                println(\"Subscribed to channel\")\n\n                conn.preparedQuery('''select pg_notify($1,$2)''', Tuple.of(channelName, message), {})\n            })\n        }\n```\n没什么复杂的，通过`reactive-pg-client`拿到`connection`之后，先用这个`connection`注册个`notificationHandler`用来接收消息。但是此时还不够，还必须在同`connection`上执行`LISTEN`的`SQL`语句，才能保证之前的`notificationHandler`是有效的。至于`NOTIFY`语句并不要求非要用这个`connection`，这也是符合我们业务需求的。\n以上完整代码，可以在我的[github](https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy)中找到。\n上面我是在当前代码中，手动`NOTIFY`的，我们完全可以吧`NOTIFY`放在数据库的触发器、或者数据库定时任务中，就可以实现数据库到应用程序的数据推送了。另外经测试，`NOTIFY`与`LISTEN`两个语法在`JDBC`环境下也是可以执行成功的（`SQL`不会报错），只是`LISTEN`不会有任何效果就是了。\n\n明天，我将演示基于`reactive-pg-client`的数据库事务demo。","slug":"reactive-pg-client_notify","published":1,"updated":"2018-09-15T11:15:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmz006fy0mzafssbsqx","content":"<p>昨天聊过，依托<code>reactive-pg-client</code>可以做很多传统<code>JDBC</code>无法实现的事情，比如<code>PostgreSQL</code>的消息推送（<code>notify</code>和<code>listen</code>）。有了这种功能，我们就可以轻易实现从数据库层主向业务逻辑代码推送消息的功能。可以说，又一次为我们打开了新世界的大门。</p>\n<h3 id=\"先来回顾下PostgreSQL的notify和listen\"><a href=\"#先来回顾下PostgreSQL的notify和listen\" class=\"headerlink\" title=\"先来回顾下PostgreSQL的notify和listen\"></a>先来回顾下<code>PostgreSQL</code>的<code>notify</code>和<code>listen</code></h3><p>主要参考<a href=\"http://www.postgres.cn/docs/10/sql-notify.html\">官方文档</a>，其实非常简单，核心<code>SQL</code>就两句话：</p>\n<ul>\n<li>发消息：  <figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">NOTIFY channel_name<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n  <code>NOTIFY</code>是一个关键字，后面跟着的第一参数是，频道的名字，这个是用户随便定义的，只要之后跟<code>LISTEN</code>的保持一致即可。<code>NOTIFY</code>还有第二个可选参数，就是消息内容，类型也必须是字符串，并且长度限制在<code>8000</code>字节。<br>  <code>NOTIFY channel_name message_body</code>还有一种等效的写法，也就是  <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_notify(channel_name，message_body）</span><br></pre></td></tr></table></figure>\n  后者的好处是可以用到<code>SQL</code>的预编译特性。</li>\n<li>收消息：  <figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">LISTEN channel_name<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这里补充几个知识点：</p>\n<ul>\n<li><code>NOTIFY</code>&#x2F;<code>LISTEN</code>这些语法不是<code>SQL</code> 标准，属于<code>PostgreSQL</code>特有的功能</li>\n<li>跟<code>LISTEN</code>相反的，有<code>UNLISTEN</code>可供使用</li>\n<li><code>NOTIFY</code>是广播模式，也就是所有同频道的<code>LISTEN</code>都能接收到信息</li>\n<li>先<code>NOTIFY</code>，再<code>LISTEN</code>是没有效果的。这个也符合直觉。</li>\n<li>想测试的话，最好借助<code>PostgreSQL</code>自带的<code>psql</code>环境，可以很容易测试，其他<code>SQL</code>客户端程序可能就没那么友好了。</li>\n</ul>\n<h3 id=\"有了PostgreSQL的基础知识储备，我们就可以用reactive-pg-client尝试一把了\"><a href=\"#有了PostgreSQL的基础知识储备，我们就可以用reactive-pg-client尝试一把了\" class=\"headerlink\" title=\"有了PostgreSQL的基础知识储备，我们就可以用reactive-pg-client尝试一把了\"></a>有了<code>PostgreSQL</code>的基础知识储备，我们就可以用<code>reactive-pg-client</code>尝试一把了</h3><p>直接上代码</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">pgClient.getConnection &#123;</span><br><span class=\"line\">           def conn = it.result()</span><br><span class=\"line\"></span><br><span class=\"line\">           conn.notificationHandler(&#123; notification -&gt;</span><br><span class=\"line\">               println(<span class=\"string\">&quot;Received $&#123;notification.payload&#125; on channel $&#123;notification.channel&#125;&quot;</span>)</span><br><span class=\"line\">               context.assertEquals(notification.payload, message)</span><br><span class=\"line\">               context.assertEquals(notification.channel, channelName)</span><br><span class=\"line\">               async.complete()</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">           conn.preparedQuery(<span class=\"string\">&quot;LISTEN $channelName&quot;</span>, &#123; ar -&gt;</span><br><span class=\"line\">               println(<span class=\"string\">&quot;Subscribed to channel&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">               conn.preparedQuery(<span class=\"string\">&#x27;&#x27;&#x27;select pg_notify($1,$2)&#x27;&#x27;&#x27;</span>, Tuple.of(channelName, message), &#123;&#125;)</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>没什么复杂的，通过<code>reactive-pg-client</code>拿到<code>connection</code>之后，先用这个<code>connection</code>注册个<code>notificationHandler</code>用来接收消息。但是此时还不够，还必须在同<code>connection</code>上执行<code>LISTEN</code>的<code>SQL</code>语句，才能保证之前的<code>notificationHandler</code>是有效的。至于<code>NOTIFY</code>语句并不要求非要用这个<code>connection</code>，这也是符合我们业务需求的。<br>以上完整代码，可以在我的<a href=\"https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy\">github</a>中找到。<br>上面我是在当前代码中，手动<code>NOTIFY</code>的，我们完全可以吧<code>NOTIFY</code>放在数据库的触发器、或者数据库定时任务中，就可以实现数据库到应用程序的数据推送了。另外经测试，<code>NOTIFY</code>与<code>LISTEN</code>两个语法在<code>JDBC</code>环境下也是可以执行成功的（<code>SQL</code>不会报错），只是<code>LISTEN</code>不会有任何效果就是了。</p>\n<p>明天，我将演示基于<code>reactive-pg-client</code>的数据库事务demo。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天聊过，依托<code>reactive-pg-client</code>可以做很多传统<code>JDBC</code>无法实现的事情，比如<code>PostgreSQL</code>的消息推送（<code>notify</code>和<code>listen</code>）。有了这种功能，我们就可以轻易实现从数据库层主向业务逻辑代码推送消息的功能。可以说，又一次为我们打开了新世界的大门。</p>\n<h3 id=\"先来回顾下PostgreSQL的notify和listen\"><a href=\"#先来回顾下PostgreSQL的notify和listen\" class=\"headerlink\" title=\"先来回顾下PostgreSQL的notify和listen\"></a>先来回顾下<code>PostgreSQL</code>的<code>notify</code>和<code>listen</code></h3><p>主要参考<a href=\"http://www.postgres.cn/docs/10/sql-notify.html\">官方文档</a>，其实非常简单，核心<code>SQL</code>就两句话：</p>\n<ul>\n<li>发消息：  <figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">NOTIFY channel_name<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n  <code>NOTIFY</code>是一个关键字，后面跟着的第一参数是，频道的名字，这个是用户随便定义的，只要之后跟<code>LISTEN</code>的保持一致即可。<code>NOTIFY</code>还有第二个可选参数，就是消息内容，类型也必须是字符串，并且长度限制在<code>8000</code>字节。<br>  <code>NOTIFY channel_name message_body</code>还有一种等效的写法，也就是  <figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> pg_notify(channel_name，message_body）</span><br></pre></td></tr></table></figure>\n  后者的好处是可以用到<code>SQL</code>的预编译特性。</li>\n<li>收消息：  <figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">LISTEN channel_name<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这里补充几个知识点：</p>\n<ul>\n<li><code>NOTIFY</code>&#x2F;<code>LISTEN</code>这些语法不是<code>SQL</code> 标准，属于<code>PostgreSQL</code>特有的功能</li>\n<li>跟<code>LISTEN</code>相反的，有<code>UNLISTEN</code>可供使用</li>\n<li><code>NOTIFY</code>是广播模式，也就是所有同频道的<code>LISTEN</code>都能接收到信息</li>\n<li>先<code>NOTIFY</code>，再<code>LISTEN</code>是没有效果的。这个也符合直觉。</li>\n<li>想测试的话，最好借助<code>PostgreSQL</code>自带的<code>psql</code>环境，可以很容易测试，其他<code>SQL</code>客户端程序可能就没那么友好了。</li>\n</ul>\n<h3 id=\"有了PostgreSQL的基础知识储备，我们就可以用reactive-pg-client尝试一把了\"><a href=\"#有了PostgreSQL的基础知识储备，我们就可以用reactive-pg-client尝试一把了\" class=\"headerlink\" title=\"有了PostgreSQL的基础知识储备，我们就可以用reactive-pg-client尝试一把了\"></a>有了<code>PostgreSQL</code>的基础知识储备，我们就可以用<code>reactive-pg-client</code>尝试一把了</h3><p>直接上代码</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"code\"><pre><span class=\"line\">pgClient.getConnection &#123;</span><br><span class=\"line\">           def conn = it.result()</span><br><span class=\"line\"></span><br><span class=\"line\">           conn.notificationHandler(&#123; notification -&gt;</span><br><span class=\"line\">               println(<span class=\"string\">&quot;Received $&#123;notification.payload&#125; on channel $&#123;notification.channel&#125;&quot;</span>)</span><br><span class=\"line\">               context.assertEquals(notification.payload, message)</span><br><span class=\"line\">               context.assertEquals(notification.channel, channelName)</span><br><span class=\"line\">               async.complete()</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">           conn.preparedQuery(<span class=\"string\">&quot;LISTEN $channelName&quot;</span>, &#123; ar -&gt;</span><br><span class=\"line\">               println(<span class=\"string\">&quot;Subscribed to channel&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">               conn.preparedQuery(<span class=\"string\">&#x27;&#x27;&#x27;select pg_notify($1,$2)&#x27;&#x27;&#x27;</span>, Tuple.of(channelName, message), &#123;&#125;)</span><br><span class=\"line\">           &#125;)</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n<p>没什么复杂的，通过<code>reactive-pg-client</code>拿到<code>connection</code>之后，先用这个<code>connection</code>注册个<code>notificationHandler</code>用来接收消息。但是此时还不够，还必须在同<code>connection</code>上执行<code>LISTEN</code>的<code>SQL</code>语句，才能保证之前的<code>notificationHandler</code>是有效的。至于<code>NOTIFY</code>语句并不要求非要用这个<code>connection</code>，这也是符合我们业务需求的。<br>以上完整代码，可以在我的<a href=\"https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy\">github</a>中找到。<br>上面我是在当前代码中，手动<code>NOTIFY</code>的，我们完全可以吧<code>NOTIFY</code>放在数据库的触发器、或者数据库定时任务中，就可以实现数据库到应用程序的数据推送了。另外经测试，<code>NOTIFY</code>与<code>LISTEN</code>两个语法在<code>JDBC</code>环境下也是可以执行成功的（<code>SQL</code>不会报错），只是<code>LISTEN</code>不会有任何效果就是了。</p>\n<p>明天，我将演示基于<code>reactive-pg-client</code>的数据库事务demo。</p>\n"},{"title":"ssh中文乱码","date":"2018-09-02T02:50:27.000Z","_content":"ssh远程到服务器后，遇到中文乱码，建议通过`locale`检查当前的字符集，如果遇到`LC_ALL=`无值，十有八九是要出问题的。\n此时可以通过执行`export  LC_ALL=zh_CN.UTF-8`临时解决。\n当然，把上面这句添加到`.bash_profile`中，就可以永久解决了。 就像这样\n```bash\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/bin\n\nexport PATH\nexport  LC_ALL=zh_CN.UTF-8\n```\n\n补充一点，用`en_US.UTF-8`代替上文的`zh_CN.UTF-8`也是同样有效的。","source":"_posts/ssh_chinese_garbled.md","raw":"---\ntitle: ssh中文乱码\ndate: 2018-09-02 10:50:27\ncategories: 程序人生\ntags:\n    - 乱码\n---\nssh远程到服务器后，遇到中文乱码，建议通过`locale`检查当前的字符集，如果遇到`LC_ALL=`无值，十有八九是要出问题的。\n此时可以通过执行`export  LC_ALL=zh_CN.UTF-8`临时解决。\n当然，把上面这句添加到`.bash_profile`中，就可以永久解决了。 就像这样\n```bash\n# .bash_profile\n\n# Get the aliases and functions\nif [ -f ~/.bashrc ]; then\n        . ~/.bashrc\nfi\n\n# User specific environment and startup programs\n\nPATH=$PATH:$HOME/bin\n\nexport PATH\nexport  LC_ALL=zh_CN.UTF-8\n```\n\n补充一点，用`en_US.UTF-8`代替上文的`zh_CN.UTF-8`也是同样有效的。","slug":"ssh_chinese_garbled","published":1,"updated":"2018-09-02T03:10:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqmz006iy0mz1vpudf2r","content":"<p>ssh远程到服务器后，遇到中文乱码，建议通过<code>locale</code>检查当前的字符集，如果遇到<code>LC_ALL=</code>无值，十有八九是要出问题的。<br>此时可以通过执行<code>export  LC_ALL=zh_CN.UTF-8</code>临时解决。<br>当然，把上面这句添加到<code>.bash_profile</code>中，就可以永久解决了。 就像这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get the aliases and functions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . ~/.bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"><span class=\"built_in\">export</span>  LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>补充一点，用<code>en_US.UTF-8</code>代替上文的<code>zh_CN.UTF-8</code>也是同样有效的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ssh远程到服务器后，遇到中文乱码，建议通过<code>locale</code>检查当前的字符集，如果遇到<code>LC_ALL=</code>无值，十有八九是要出问题的。<br>此时可以通过执行<code>export  LC_ALL=zh_CN.UTF-8</code>临时解决。<br>当然，把上面这句添加到<code>.bash_profile</code>中，就可以永久解决了。 就像这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .bash_profile</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Get the aliases and functions</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -f ~/.bashrc ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        . ~/.bashrc</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># User specific environment and startup programs</span></span><br><span class=\"line\"></span><br><span class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HOME</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH</span><br><span class=\"line\"><span class=\"built_in\">export</span>  LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>补充一点，用<code>en_US.UTF-8</code>代替上文的<code>zh_CN.UTF-8</code>也是同样有效的。</p>\n"},{"title":"在git中使用submodule","date":"2018-09-22T23:53:15.000Z","_content":"如果`clone`一个项目后，发现其中有`.gitmodules`文件，就说明这个项目是包含子项目的。这个文件的产生，是由于在一个`git`项目内，执行命令\n```\ngit submodule add a_git_project_path rack\n```\n最后一个参数是创建文件夹的名字，这个跟执行`git clone`时的用法一样。\n当`clone`项目后发现存在`.gitmodules`文件后。可以注意观察下，相关的submodule对应的文件夹里，是没有内容的。此时需要通过\n```\ngit submodule init\ngit submodule update\n```\n分别初始化submodule和获取其数据。\n有了`submodule`的存在，我们可以很方便的拆分一个大项目到若干小项目，方便多人合作开发。\n下一次，我将就`submodule`的嵌套性展开测试。","source":"_posts/submodule_in_git.md","raw":"---\ntitle: 在git中使用submodule\ndate: 2018-09-23 07:53:15\ncategories: 程序人生\ntags:\n    - git\n---\n如果`clone`一个项目后，发现其中有`.gitmodules`文件，就说明这个项目是包含子项目的。这个文件的产生，是由于在一个`git`项目内，执行命令\n```\ngit submodule add a_git_project_path rack\n```\n最后一个参数是创建文件夹的名字，这个跟执行`git clone`时的用法一样。\n当`clone`项目后发现存在`.gitmodules`文件后。可以注意观察下，相关的submodule对应的文件夹里，是没有内容的。此时需要通过\n```\ngit submodule init\ngit submodule update\n```\n分别初始化submodule和获取其数据。\n有了`submodule`的存在，我们可以很方便的拆分一个大项目到若干小项目，方便多人合作开发。\n下一次，我将就`submodule`的嵌套性展开测试。","slug":"submodule_in_git","published":1,"updated":"2018-09-24T03:29:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn0006my0mzg5wv2zrp","content":"<p>如果<code>clone</code>一个项目后，发现其中有<code>.gitmodules</code>文件，就说明这个项目是包含子项目的。这个文件的产生，是由于在一个<code>git</code>项目内，执行命令</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">submodule </span><span class=\"keyword\">add </span>a_git_project_path rack</span><br></pre></td></tr></table></figure>\n<p>最后一个参数是创建文件夹的名字，这个跟执行<code>git clone</code>时的用法一样。<br>当<code>clone</code>项目后发现存在<code>.gitmodules</code>文件后。可以注意观察下，相关的submodule对应的文件夹里，是没有内容的。此时需要通过</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">submodule </span>init</span><br><span class=\"line\">git <span class=\"keyword\">submodule </span>update</span><br></pre></td></tr></table></figure>\n<p>分别初始化submodule和获取其数据。<br>有了<code>submodule</code>的存在，我们可以很方便的拆分一个大项目到若干小项目，方便多人合作开发。<br>下一次，我将就<code>submodule</code>的嵌套性展开测试。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果<code>clone</code>一个项目后，发现其中有<code>.gitmodules</code>文件，就说明这个项目是包含子项目的。这个文件的产生，是由于在一个<code>git</code>项目内，执行命令</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">submodule </span><span class=\"keyword\">add </span>a_git_project_path rack</span><br></pre></td></tr></table></figure>\n<p>最后一个参数是创建文件夹的名字，这个跟执行<code>git clone</code>时的用法一样。<br>当<code>clone</code>项目后发现存在<code>.gitmodules</code>文件后。可以注意观察下，相关的submodule对应的文件夹里，是没有内容的。此时需要通过</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">submodule </span>init</span><br><span class=\"line\">git <span class=\"keyword\">submodule </span>update</span><br></pre></td></tr></table></figure>\n<p>分别初始化submodule和获取其数据。<br>有了<code>submodule</code>的存在，我们可以很方便的拆分一个大项目到若干小项目，方便多人合作开发。<br>下一次，我将就<code>submodule</code>的嵌套性展开测试。</p>\n"},{"title":"启动Docker容器后要注意的时区问题","date":"2018-07-30T00:46:14.000Z","_content":"对于中国用户来说，一般的docker容器启动后，如果执行`docker  exec -it xxxx date`会发现打印出来的时间，比当前北京时间早八个小时。所以需要调整容器的时区，主要有两个命令（要在容器内部执行）：\n* `cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime`\n* `echo \"Asia/Shanghai\" > /etc/timezone`\n\n其中第一个命令就能解决不少问题，比如我用`PostgreSQL`的话，`select now()`就可以通过第一条命令修正。但是`Tomcat`等java相关的程序，还需要第二条命令，才能获得正确的时间。","source":"_posts/timezone_in_docker.md","raw":"---\ntitle: 启动Docker容器后要注意的时区问题\ndate: 2018-07-30 08:46:14\ncategories: 程序人生\ntags: Docker\n---\n对于中国用户来说，一般的docker容器启动后，如果执行`docker  exec -it xxxx date`会发现打印出来的时间，比当前北京时间早八个小时。所以需要调整容器的时区，主要有两个命令（要在容器内部执行）：\n* `cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime`\n* `echo \"Asia/Shanghai\" > /etc/timezone`\n\n其中第一个命令就能解决不少问题，比如我用`PostgreSQL`的话，`select now()`就可以通过第一条命令修正。但是`Tomcat`等java相关的程序，还需要第二条命令，才能获得正确的时间。","slug":"timezone_in_docker","published":1,"updated":"2018-07-30T00:54:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn0006py0mzgmxqae6t","content":"<p>对于中国用户来说，一般的docker容器启动后，如果执行<code>docker  exec -it xxxx date</code>会发现打印出来的时间，比当前北京时间早八个小时。所以需要调整容器的时区，主要有两个命令（要在容器内部执行）：</p>\n<ul>\n<li><code>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></li>\n<li><code>echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</code></li>\n</ul>\n<p>其中第一个命令就能解决不少问题，比如我用<code>PostgreSQL</code>的话，<code>select now()</code>就可以通过第一条命令修正。但是<code>Tomcat</code>等java相关的程序，还需要第二条命令，才能获得正确的时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>对于中国用户来说，一般的docker容器启动后，如果执行<code>docker  exec -it xxxx date</code>会发现打印出来的时间，比当前北京时间早八个小时。所以需要调整容器的时区，主要有两个命令（要在容器内部执行）：</p>\n<ul>\n<li><code>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></li>\n<li><code>echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone</code></li>\n</ul>\n<p>其中第一个命令就能解决不少问题，比如我用<code>PostgreSQL</code>的话，<code>select now()</code>就可以通过第一条命令修正。但是<code>Tomcat</code>等java相关的程序，还需要第二条命令，才能获得正确的时间。</p>\n"},{"title":"Gradle中的sourceCompatibility与targetCompatibility","date":"2018-08-27T03:45:57.000Z","_content":"`Gradle`中有两个属性，我也是一知半解。今天正好要练习下`Java10`，那就先把这两个属性的问题测试透了再说。那就是`sourceCompatibility`和`targetCompatibility`。\n简单的说，`sourceCompatibility`属性跟编译环境有关，而`targetCompatibility`属性跟运行环境有关。\n至少有这么几个原则，是不能违背的：\n1. `sourceCompatibility`关系到你使用到的`Java`语法特性及库\n2. `sourceCompatibility`不能比`targetCompatibility`大\n3. `targetCompatibility`不能比目标客户端运行环境的`JavaVersion`大\n4. `targetCompatibility`不能比当前`Gradle`使用的`JavaVersion`大\n\n总结起来就是这样\n```\n代码用的语言特性对应的JavaVersion \n≦ sourceCompatibility \n≦ targetCompatibility \n≦ Gradle使用的JavaVersion \n≦ 客户端环境的JavaVersion\n```\n","source":"_posts/sourceCompatibility_and_targetCompatibility_in_gradle.md","raw":"---\ntitle: Gradle中的sourceCompatibility与targetCompatibility\ndate: 2018-08-27 11:45:57\ncategories: 程序人生\ntags:\n    - gradle\n---\n`Gradle`中有两个属性，我也是一知半解。今天正好要练习下`Java10`，那就先把这两个属性的问题测试透了再说。那就是`sourceCompatibility`和`targetCompatibility`。\n简单的说，`sourceCompatibility`属性跟编译环境有关，而`targetCompatibility`属性跟运行环境有关。\n至少有这么几个原则，是不能违背的：\n1. `sourceCompatibility`关系到你使用到的`Java`语法特性及库\n2. `sourceCompatibility`不能比`targetCompatibility`大\n3. `targetCompatibility`不能比目标客户端运行环境的`JavaVersion`大\n4. `targetCompatibility`不能比当前`Gradle`使用的`JavaVersion`大\n\n总结起来就是这样\n```\n代码用的语言特性对应的JavaVersion \n≦ sourceCompatibility \n≦ targetCompatibility \n≦ Gradle使用的JavaVersion \n≦ 客户端环境的JavaVersion\n```\n","slug":"sourceCompatibility_and_targetCompatibility_in_gradle","published":1,"updated":"2018-08-27T05:01:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn0006ty0mz7z5mdy7x","content":"<p><code>Gradle</code>中有两个属性，我也是一知半解。今天正好要练习下<code>Java10</code>，那就先把这两个属性的问题测试透了再说。那就是<code>sourceCompatibility</code>和<code>targetCompatibility</code>。<br>简单的说，<code>sourceCompatibility</code>属性跟编译环境有关，而<code>targetCompatibility</code>属性跟运行环境有关。<br>至少有这么几个原则，是不能违背的：</p>\n<ol>\n<li><code>sourceCompatibility</code>关系到你使用到的<code>Java</code>语法特性及库</li>\n<li><code>sourceCompatibility</code>不能比<code>targetCompatibility</code>大</li>\n<li><code>targetCompatibility</code>不能比目标客户端运行环境的<code>JavaVersion</code>大</li>\n<li><code>targetCompatibility</code>不能比当前<code>Gradle</code>使用的<code>JavaVersion</code>大</li>\n</ol>\n<p>总结起来就是这样</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">代码用的语言特性对应的JavaVersion </span><br><span class=\"line\">≦ <span class=\"keyword\">sourceCompatibility</span> </span><br><span class=\"line\">≦ <span class=\"keyword\">targetCompatibility</span> </span><br><span class=\"line\">≦ Gradle使用的JavaVersion </span><br><span class=\"line\">≦ 客户端环境的JavaVersion</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><code>Gradle</code>中有两个属性，我也是一知半解。今天正好要练习下<code>Java10</code>，那就先把这两个属性的问题测试透了再说。那就是<code>sourceCompatibility</code>和<code>targetCompatibility</code>。<br>简单的说，<code>sourceCompatibility</code>属性跟编译环境有关，而<code>targetCompatibility</code>属性跟运行环境有关。<br>至少有这么几个原则，是不能违背的：</p>\n<ol>\n<li><code>sourceCompatibility</code>关系到你使用到的<code>Java</code>语法特性及库</li>\n<li><code>sourceCompatibility</code>不能比<code>targetCompatibility</code>大</li>\n<li><code>targetCompatibility</code>不能比目标客户端运行环境的<code>JavaVersion</code>大</li>\n<li><code>targetCompatibility</code>不能比当前<code>Gradle</code>使用的<code>JavaVersion</code>大</li>\n</ol>\n<p>总结起来就是这样</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"code\"><pre><span class=\"line\">代码用的语言特性对应的JavaVersion </span><br><span class=\"line\">≦ <span class=\"keyword\">sourceCompatibility</span> </span><br><span class=\"line\">≦ <span class=\"keyword\">targetCompatibility</span> </span><br><span class=\"line\">≦ Gradle使用的JavaVersion </span><br><span class=\"line\">≦ 客户端环境的JavaVersion</span><br></pre></td></tr></table></figure>\n"},{"title":"tomcat中URL中文乱码问题","date":"2018-07-29T01:31:01.000Z","_content":"找到\n```\n<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" />\n```\n追加配置为\n```\n<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" URIEncoding=\"UTF-8\"/>\n```","source":"_posts/tomcat_url_chinese_garbled.md","raw":"---\ntitle: tomcat中URL中文乱码问题\ndate: 2018-07-29 09:31:01\ncategories: 程序人生\ntags:\n    - tomcat\n    - 乱码\n---\n找到\n```\n<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" />\n```\n追加配置为\n```\n<Connector connectionTimeout=\"20000\" port=\"8080\" protocol=\"HTTP/1.1\" redirectPort=\"8443\" URIEncoding=\"UTF-8\"/>\n```","slug":"tomcat_url_chinese_garbled","published":1,"updated":"2018-07-29T01:34:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn0006wy0mzamqp828c","content":"<p>找到</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Connector connectionTimeout<span class=\"operator\">=</span><span class=\"string\">&quot;20000&quot;</span> port<span class=\"operator\">=</span><span class=\"string\">&quot;8080&quot;</span> protocol<span class=\"operator\">=</span><span class=\"string\">&quot;HTTP/1.1&quot;</span> redirectPort<span class=\"operator\">=</span><span class=\"string\">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>追加配置为</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Connector <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span> <span class=\"attribute\">port</span>=<span class=\"string\">&quot;8080&quot;</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span> <span class=\"attribute\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>找到</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Connector connectionTimeout<span class=\"operator\">=</span><span class=\"string\">&quot;20000&quot;</span> port<span class=\"operator\">=</span><span class=\"string\">&quot;8080&quot;</span> protocol<span class=\"operator\">=</span><span class=\"string\">&quot;HTTP/1.1&quot;</span> redirectPort<span class=\"operator\">=</span><span class=\"string\">&quot;8443&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>追加配置为</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;Connector <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">&quot;20000&quot;</span> <span class=\"attribute\">port</span>=<span class=\"string\">&quot;8080&quot;</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">&quot;HTTP/1.1&quot;</span> <span class=\"attribute\">redirectPort</span>=<span class=\"string\">&quot;8443&quot;</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">&quot;UTF-8&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>"},{"title":"ubuntu里查看软件包信息","date":"2018-09-05T00:49:48.000Z","_content":"\n以`postgresql-10-plv8`这个软件包为例，需要知道软件包的一些必要信息，比如版本、项目主页、大小、简单说明之类的，可以用如下命令查看：\n```\napt show postgresql-10-plv8\n```\n对于早期版本的ubuntu（<14.04），可以使用这个命令\n```\napt-cache show postgresql-10-plv8\n```\n另外一种方式也是极好的，就是利用`aptitude`，前提是你先安装了它，那么就可以这么用：\n```\naptitude show postgresql-10-plv8\n```\n`aptitude`比前者强的地方是它能告诉你该软件包是否已经安装\n\n","source":"_posts/ubuntu_show_soft_info.md","raw":"---\ntitle: ubuntu里查看软件包信息\ndate: 2018-09-05 08:49:48\ncategories: 程序人生\ntags:\n    - ubuntu\n---\n\n以`postgresql-10-plv8`这个软件包为例，需要知道软件包的一些必要信息，比如版本、项目主页、大小、简单说明之类的，可以用如下命令查看：\n```\napt show postgresql-10-plv8\n```\n对于早期版本的ubuntu（<14.04），可以使用这个命令\n```\napt-cache show postgresql-10-plv8\n```\n另外一种方式也是极好的，就是利用`aptitude`，前提是你先安装了它，那么就可以这么用：\n```\naptitude show postgresql-10-plv8\n```\n`aptitude`比前者强的地方是它能告诉你该软件包是否已经安装\n\n","slug":"ubuntu_show_soft_info","published":1,"updated":"2018-09-05T01:19:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn10070y0mz2t9rgrom","content":"<p>以<code>postgresql-10-plv8</code>这个软件包为例，需要知道软件包的一些必要信息，比如版本、项目主页、大小、简单说明之类的，可以用如下命令查看：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apt</span> show postgresql-<span class=\"number\">10</span>-plv8</span><br></pre></td></tr></table></figure>\n<p>对于早期版本的ubuntu（&lt;14.04），可以使用这个命令</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"keyword\">cache </span><span class=\"keyword\">show </span>postgresql<span class=\"number\">-10</span>-plv8</span><br></pre></td></tr></table></figure>\n<p>另外一种方式也是极好的，就是利用<code>aptitude</code>，前提是你先安装了它，那么就可以这么用：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">aptitude</span> show postgresql-<span class=\"number\">10</span>-plv8</span><br></pre></td></tr></table></figure>\n<p><code>aptitude</code>比前者强的地方是它能告诉你该软件包是否已经安装</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以<code>postgresql-10-plv8</code>这个软件包为例，需要知道软件包的一些必要信息，比如版本、项目主页、大小、简单说明之类的，可以用如下命令查看：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">apt</span> show postgresql-<span class=\"number\">10</span>-plv8</span><br></pre></td></tr></table></figure>\n<p>对于早期版本的ubuntu（&lt;14.04），可以使用这个命令</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt-<span class=\"keyword\">cache </span><span class=\"keyword\">show </span>postgresql<span class=\"number\">-10</span>-plv8</span><br></pre></td></tr></table></figure>\n<p>另外一种方式也是极好的，就是利用<code>aptitude</code>，前提是你先安装了它，那么就可以这么用：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">aptitude</span> show postgresql-<span class=\"number\">10</span>-plv8</span><br></pre></td></tr></table></figure>\n<p><code>aptitude</code>比前者强的地方是它能告诉你该软件包是否已经安装</p>\n"},{"title":"完整卸载MacOS里的JDK","date":"2018-11-28T00:18:01.000Z","_content":"首先，所有的资料在[java官方网站](https://www.java.com/en/download/help/mac_uninstall_java.xml)都有提供，我这里做个搬运工，只罗列一下重点。\n1. 下载[工具](https://javadl-esd-secure.oracle.com/update/jut/JavaUninstallTool.dmg)，并运行之\n2. 打开终端，执行命令移除相关文件夹\n    * sudo rm -fr /Library/Internet\\ Plug-Ins/JavaAppletPlugin.plugin \n    * sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane \n    * sudo rm -fr ~/Library/Application\\ Support/Oracle/Java\n","source":"_posts/uninstall_jdk_in_macos.md","raw":"---\ntitle: 完整卸载MacOS里的JDK\ndate: 2018-11-28 08:18:01\ncategories: 工具技巧\ntags:\n    - Java\n---\n首先，所有的资料在[java官方网站](https://www.java.com/en/download/help/mac_uninstall_java.xml)都有提供，我这里做个搬运工，只罗列一下重点。\n1. 下载[工具](https://javadl-esd-secure.oracle.com/update/jut/JavaUninstallTool.dmg)，并运行之\n2. 打开终端，执行命令移除相关文件夹\n    * sudo rm -fr /Library/Internet\\ Plug-Ins/JavaAppletPlugin.plugin \n    * sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane \n    * sudo rm -fr ~/Library/Application\\ Support/Oracle/Java\n","slug":"uninstall_jdk_in_macos","published":1,"updated":"2018-11-28T00:22:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn10073y0mzh7hpfp1w","content":"<p>首先，所有的资料在<a href=\"https://www.java.com/en/download/help/mac_uninstall_java.xml\">java官方网站</a>都有提供，我这里做个搬运工，只罗列一下重点。</p>\n<ol>\n<li>下载<a href=\"https://javadl-esd-secure.oracle.com/update/jut/JavaUninstallTool.dmg\">工具</a>，并运行之</li>\n<li>打开终端，执行命令移除相关文件夹<ul>\n<li>sudo rm -fr &#x2F;Library&#x2F;Internet\\ Plug-Ins&#x2F;JavaAppletPlugin.plugin </li>\n<li>sudo rm -fr &#x2F;Library&#x2F;PreferencePanes&#x2F;JavaControlPanel.prefPane </li>\n<li>sudo rm -fr ~&#x2F;Library&#x2F;Application\\ Support&#x2F;Oracle&#x2F;Java</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>首先，所有的资料在<a href=\"https://www.java.com/en/download/help/mac_uninstall_java.xml\">java官方网站</a>都有提供，我这里做个搬运工，只罗列一下重点。</p>\n<ol>\n<li>下载<a href=\"https://javadl-esd-secure.oracle.com/update/jut/JavaUninstallTool.dmg\">工具</a>，并运行之</li>\n<li>打开终端，执行命令移除相关文件夹<ul>\n<li>sudo rm -fr &#x2F;Library&#x2F;Internet\\ Plug-Ins&#x2F;JavaAppletPlugin.plugin </li>\n<li>sudo rm -fr &#x2F;Library&#x2F;PreferencePanes&#x2F;JavaControlPanel.prefPane </li>\n<li>sudo rm -fr ~&#x2F;Library&#x2F;Application\\ Support&#x2F;Oracle&#x2F;Java</li>\n</ul>\n</li>\n</ol>\n"},{"title":"几个较新的Vert.x例子","date":"2019-02-28T05:46:04.000Z","_content":"* https://github.com/yuri-mednikov/bike-share\n* https://github.com/PharosProduction/tutorial-vertx-microservices-java\n* https://github.com/migibert/vertx-in-production\n* https://github.com/marceloandradep/vertx-example\n\n基本上都是2019年新鲜出炉的几个项目，还算比较新\n","source":"_posts/vertx_demo_2019.md","raw":"---\ntitle: 几个较新的Vert.x例子\ndate: 2019-02-28 13:46:04\ncategories: 程序人生\ntags:\n    - Vert.x\n---\n* https://github.com/yuri-mednikov/bike-share\n* https://github.com/PharosProduction/tutorial-vertx-microservices-java\n* https://github.com/migibert/vertx-in-production\n* https://github.com/marceloandradep/vertx-example\n\n基本上都是2019年新鲜出炉的几个项目，还算比较新\n","slug":"vertx_demo_2019","published":1,"updated":"2019-02-28T05:50:39.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn10077y0mz9vwe15rk","content":"<ul>\n<li><a href=\"https://github.com/yuri-mednikov/bike-share\">https://github.com/yuri-mednikov/bike-share</a></li>\n<li><a href=\"https://github.com/PharosProduction/tutorial-vertx-microservices-java\">https://github.com/PharosProduction/tutorial-vertx-microservices-java</a></li>\n<li><a href=\"https://github.com/migibert/vertx-in-production\">https://github.com/migibert/vertx-in-production</a></li>\n<li><a href=\"https://github.com/marceloandradep/vertx-example\">https://github.com/marceloandradep/vertx-example</a></li>\n</ul>\n<p>基本上都是2019年新鲜出炉的几个项目，还算比较新</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"https://github.com/yuri-mednikov/bike-share\">https://github.com/yuri-mednikov/bike-share</a></li>\n<li><a href=\"https://github.com/PharosProduction/tutorial-vertx-microservices-java\">https://github.com/PharosProduction/tutorial-vertx-microservices-java</a></li>\n<li><a href=\"https://github.com/migibert/vertx-in-production\">https://github.com/migibert/vertx-in-production</a></li>\n<li><a href=\"https://github.com/marceloandradep/vertx-example\">https://github.com/marceloandradep/vertx-example</a></li>\n</ul>\n<p>基本上都是2019年新鲜出炉的几个项目，还算比较新</p>\n"},{"title":"reactive-pg-client中的数据库事务","date":"2018-09-15T23:50:39.000Z","_content":"使用`reactive-pg-client`中的数据库事务有两种写法，一种是通过`PgConnection`的`begin`方法，开启一段数据库事务；另一种是通过`PgPool`的`begin`方法。\n先来看第一种：\n```\npool.getConnection(res -> {\n  if (res.succeeded()) {\n\n    // Transaction must use a connection\n    PgConnection conn = res.result();\n\n    // Begin the transaction\n    PgTransaction tx = conn.begin();\n\n    // Various statements\n    conn.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\", ar -> {});\n    conn.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\", ar -> {});\n\n    // Commit the transaction\n    tx.commit(ar -> {\n      if (ar.succeeded()) {\n        System.out.println(\"Transaction succeeded\");\n      } else {\n        System.out.println(\"Transaction failed \" + ar.cause().getMessage());\n      }\n\n      // Return the connection to the pool\n      conn.close();\n    });\n  }\n});\n```\n再看第二种：\n```\npool.begin(res -> {\n  if (res.succeeded()) {\n\n    // Get the transaction\n    PgTransaction tx = res.result();\n\n    // Various statements\n    tx.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\", ar -> {});\n    tx.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\", ar -> {});\n\n    // Commit the transaction and return the connection to the pool\n    tx.commit(ar -> {\n      if (ar.succeeded()) {\n        System.out.println(\"Transaction succeeded\");\n      } else {\n        System.out.println(\"Transaction failed \" + ar.cause().getMessage());\n      }\n    });\n  }\n});\n```\n可以看到第二种写法更为精简，`Handler`内部直接可以拿到`PgTransaction`，不需要像第一种那样使用`PgConnection`的`begin`才能得到`PgTransaction`，并且因为第二种不存在直接操纵`PgConnection`，自然也省略了手动`close`的步骤。\n经过我自己测试，有两点需要注意一下：\n* `PgTransaction`可以通过`abortHandler`方法，捕捉到事务失败（如果失败的话）的事件。\n* 在使用事务的过程中，想通过`preparedQuery`使用预编译的`SQL`未能成功，目前原因未知。\n\n详细的演示代码，可以在我的[github](https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy)中找到。\n","source":"_posts/transaction_in_reactive-pg-client.md","raw":"---\ntitle: reactive-pg-client中的数据库事务\ndate: 2018-09-16 07:50:39\ncategories: 程序人生\ntags:\n    - Vert.x\n    - PostgreSQL\n---\n使用`reactive-pg-client`中的数据库事务有两种写法，一种是通过`PgConnection`的`begin`方法，开启一段数据库事务；另一种是通过`PgPool`的`begin`方法。\n先来看第一种：\n```\npool.getConnection(res -> {\n  if (res.succeeded()) {\n\n    // Transaction must use a connection\n    PgConnection conn = res.result();\n\n    // Begin the transaction\n    PgTransaction tx = conn.begin();\n\n    // Various statements\n    conn.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\", ar -> {});\n    conn.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\", ar -> {});\n\n    // Commit the transaction\n    tx.commit(ar -> {\n      if (ar.succeeded()) {\n        System.out.println(\"Transaction succeeded\");\n      } else {\n        System.out.println(\"Transaction failed \" + ar.cause().getMessage());\n      }\n\n      // Return the connection to the pool\n      conn.close();\n    });\n  }\n});\n```\n再看第二种：\n```\npool.begin(res -> {\n  if (res.succeeded()) {\n\n    // Get the transaction\n    PgTransaction tx = res.result();\n\n    // Various statements\n    tx.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Julien','Viet')\", ar -> {});\n    tx.query(\"INSERT INTO Users (first_name,last_name) VALUES ('Emad','Alblueshi')\", ar -> {});\n\n    // Commit the transaction and return the connection to the pool\n    tx.commit(ar -> {\n      if (ar.succeeded()) {\n        System.out.println(\"Transaction succeeded\");\n      } else {\n        System.out.println(\"Transaction failed \" + ar.cause().getMessage());\n      }\n    });\n  }\n});\n```\n可以看到第二种写法更为精简，`Handler`内部直接可以拿到`PgTransaction`，不需要像第一种那样使用`PgConnection`的`begin`才能得到`PgTransaction`，并且因为第二种不存在直接操纵`PgConnection`，自然也省略了手动`close`的步骤。\n经过我自己测试，有两点需要注意一下：\n* `PgTransaction`可以通过`abortHandler`方法，捕捉到事务失败（如果失败的话）的事件。\n* 在使用事务的过程中，想通过`preparedQuery`使用预编译的`SQL`未能成功，目前原因未知。\n\n详细的演示代码，可以在我的[github](https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy)中找到。\n","slug":"transaction_in_reactive-pg-client","published":1,"updated":"2018-09-16T01:10:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn1007ay0mzh7ijbuma","content":"<p>使用<code>reactive-pg-client</code>中的数据库事务有两种写法，一种是通过<code>PgConnection</code>的<code>begin</code>方法，开启一段数据库事务；另一种是通过<code>PgPool</code>的<code>begin</code>方法。<br>先来看第一种：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">pool.getConnection(res -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.succeeded()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Transaction</span> must use a <span class=\"keyword\">connection</span></span><br><span class=\"line\">    PgConnection conn = res.result();</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Begin</span> the <span class=\"keyword\">transaction</span></span><br><span class=\"line\">    PgTransaction tx = conn.<span class=\"keyword\">begin</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Various statements</span><br><span class=\"line\">    conn.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Julien&#x27;,&#x27;Viet&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\">    conn.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Emad&#x27;,&#x27;Alblueshi&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Commit</span> the <span class=\"keyword\">transaction</span></span><br><span class=\"line\">    tx.<span class=\"keyword\">commit</span>(ar -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ar.succeeded()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction succeeded&quot;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction failed &quot; + ar.cause().getMessage());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // <span class=\"keyword\">Return</span> the <span class=\"keyword\">connection</span> <span class=\"keyword\">to</span> the pool</span><br><span class=\"line\">      conn.<span class=\"keyword\">close</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>再看第二种：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">pool.<span class=\"keyword\">begin</span>(res -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.succeeded()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Get</span> the <span class=\"keyword\">transaction</span></span><br><span class=\"line\">    PgTransaction tx = res.result();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Various statements</span><br><span class=\"line\">    tx.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Julien&#x27;,&#x27;Viet&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\">    tx.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Emad&#x27;,&#x27;Alblueshi&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Commit</span> the <span class=\"keyword\">transaction</span> <span class=\"keyword\">and</span> <span class=\"keyword\">return</span> the <span class=\"keyword\">connection</span> <span class=\"keyword\">to</span> the pool</span><br><span class=\"line\">    tx.<span class=\"keyword\">commit</span>(ar -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ar.succeeded()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction succeeded&quot;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction failed &quot; + ar.cause().getMessage());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以看到第二种写法更为精简，<code>Handler</code>内部直接可以拿到<code>PgTransaction</code>，不需要像第一种那样使用<code>PgConnection</code>的<code>begin</code>才能得到<code>PgTransaction</code>，并且因为第二种不存在直接操纵<code>PgConnection</code>，自然也省略了手动<code>close</code>的步骤。<br>经过我自己测试，有两点需要注意一下：</p>\n<ul>\n<li><code>PgTransaction</code>可以通过<code>abortHandler</code>方法，捕捉到事务失败（如果失败的话）的事件。</li>\n<li>在使用事务的过程中，想通过<code>preparedQuery</code>使用预编译的<code>SQL</code>未能成功，目前原因未知。</li>\n</ul>\n<p>详细的演示代码，可以在我的<a href=\"https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy\">github</a>中找到。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>使用<code>reactive-pg-client</code>中的数据库事务有两种写法，一种是通过<code>PgConnection</code>的<code>begin</code>方法，开启一段数据库事务；另一种是通过<code>PgPool</code>的<code>begin</code>方法。<br>先来看第一种：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">pool.getConnection(res -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.succeeded()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Transaction</span> must use a <span class=\"keyword\">connection</span></span><br><span class=\"line\">    PgConnection conn = res.result();</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Begin</span> the <span class=\"keyword\">transaction</span></span><br><span class=\"line\">    PgTransaction tx = conn.<span class=\"keyword\">begin</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Various statements</span><br><span class=\"line\">    conn.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Julien&#x27;,&#x27;Viet&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\">    conn.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Emad&#x27;,&#x27;Alblueshi&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Commit</span> the <span class=\"keyword\">transaction</span></span><br><span class=\"line\">    tx.<span class=\"keyword\">commit</span>(ar -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ar.succeeded()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction succeeded&quot;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction failed &quot; + ar.cause().getMessage());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // <span class=\"keyword\">Return</span> the <span class=\"keyword\">connection</span> <span class=\"keyword\">to</span> the pool</span><br><span class=\"line\">      conn.<span class=\"keyword\">close</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>再看第二种：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"code\"><pre><span class=\"line\">pool.<span class=\"keyword\">begin</span>(res -&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.succeeded()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Get</span> the <span class=\"keyword\">transaction</span></span><br><span class=\"line\">    PgTransaction tx = res.result();</span><br><span class=\"line\"></span><br><span class=\"line\">    // Various statements</span><br><span class=\"line\">    tx.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Julien&#x27;,&#x27;Viet&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\">    tx.query(&quot;INSERT INTO Users (first_name,last_name) VALUES (&#x27;Emad&#x27;,&#x27;Alblueshi&#x27;)&quot;, ar -&gt; &#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // <span class=\"keyword\">Commit</span> the <span class=\"keyword\">transaction</span> <span class=\"keyword\">and</span> <span class=\"keyword\">return</span> the <span class=\"keyword\">connection</span> <span class=\"keyword\">to</span> the pool</span><br><span class=\"line\">    tx.<span class=\"keyword\">commit</span>(ar -&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ar.succeeded()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction succeeded&quot;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">System</span>.<span class=\"keyword\">out</span>.println(&quot;Transaction failed &quot; + ar.cause().getMessage());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以看到第二种写法更为精简，<code>Handler</code>内部直接可以拿到<code>PgTransaction</code>，不需要像第一种那样使用<code>PgConnection</code>的<code>begin</code>才能得到<code>PgTransaction</code>，并且因为第二种不存在直接操纵<code>PgConnection</code>，自然也省略了手动<code>close</code>的步骤。<br>经过我自己测试，有两点需要注意一下：</p>\n<ul>\n<li><code>PgTransaction</code>可以通过<code>abortHandler</code>方法，捕捉到事务失败（如果失败的话）的事件。</li>\n<li>在使用事务的过程中，想通过<code>preparedQuery</code>使用预编译的<code>SQL</code>未能成功，目前原因未知。</li>\n</ul>\n<p>详细的演示代码，可以在我的<a href=\"https://github.com/aruis/studyvertx/blob/master/src/test/groovy/com/aruistar/studyvertx/ReactivePostgresClientTest.groovy\">github</a>中找到。</p>\n"},{"title":"Vert.x异步方法转同步","date":"2018-07-20T23:16:12.000Z","_content":"以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。\n后来在使用`vertx-pac4j`的时候，无意中看到它源码中，也有我上面说的场景使用。就在`org.pac4j.vertx.context.session.VertxSessionStore`类的这一段：\n```\n @Override\n    public Session getSession(String sessionId) {\n        final CompletableFuture<io.vertx.ext.web.Session> vertxSessionFuture = new CompletableFuture<>();\n        sessionStore.get(sessionId, asyncResult -> {\n            if (asyncResult.succeeded()) {\n                vertxSessionFuture.complete(asyncResult.result());\n            } else {\n                vertxSessionFuture.completeExceptionally(asyncResult.cause());\n            }\n        });\n        final CompletableFuture<Session> pac4jSessionFuture = vertxSessionFuture.thenApply(session -> {\n            if (session != null) {\n                return new VertxSession(session);\n            } else {\n                return null;\n            }\n        });\n        try {\n            return pac4jSessionFuture.get();\n        } catch (InterruptedException|ExecutionException e) {\n            throw new TechnicalException(e);\n        }\n    }\n```\n可以明显看到`sessionStore.get`是的常规的Vert.x异步调用。\n基于这种应用方式，我尝试用`groovy`模仿写了一下，效果显著，代码如下：\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\nString sayHello() {\n    CompletableFuture completableFuture = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(3000, {\n        completableFuture.complete(\"hello world\")\n    })\n\n    return completableFuture.get()\n}\n\nprintln(sayHello())\n```\n上面这种写法，主要还是依赖了java1.8的`CompletableFuture`类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。","source":"_posts/vertx_async_to_sync.md","raw":"---\ntitle: Vert.x异步方法转同步\ndate: 2018-07-21 07:16:12\ncategories: 程序人生\ntags:\n    - Vert.x\n---\n以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。\n后来在使用`vertx-pac4j`的时候，无意中看到它源码中，也有我上面说的场景使用。就在`org.pac4j.vertx.context.session.VertxSessionStore`类的这一段：\n```\n @Override\n    public Session getSession(String sessionId) {\n        final CompletableFuture<io.vertx.ext.web.Session> vertxSessionFuture = new CompletableFuture<>();\n        sessionStore.get(sessionId, asyncResult -> {\n            if (asyncResult.succeeded()) {\n                vertxSessionFuture.complete(asyncResult.result());\n            } else {\n                vertxSessionFuture.completeExceptionally(asyncResult.cause());\n            }\n        });\n        final CompletableFuture<Session> pac4jSessionFuture = vertxSessionFuture.thenApply(session -> {\n            if (session != null) {\n                return new VertxSession(session);\n            } else {\n                return null;\n            }\n        });\n        try {\n            return pac4jSessionFuture.get();\n        } catch (InterruptedException|ExecutionException e) {\n            throw new TechnicalException(e);\n        }\n    }\n```\n可以明显看到`sessionStore.get`是的常规的Vert.x异步调用。\n基于这种应用方式，我尝试用`groovy`模仿写了一下，效果显著，代码如下：\n```\nimport io.vertx.core.Vertx\n\nimport java.util.concurrent.CompletableFuture\n\nString sayHello() {\n    CompletableFuture completableFuture = new CompletableFuture()\n\n    Vertx vertx = Vertx.vertx()\n    vertx.setTimer(3000, {\n        completableFuture.complete(\"hello world\")\n    })\n\n    return completableFuture.get()\n}\n\nprintln(sayHello())\n```\n上面这种写法，主要还是依赖了java1.8的`CompletableFuture`类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。","slug":"vertx_async_to_sync","published":1,"updated":"2018-09-12T02:40:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn2007dy0mz08vf0a2y","content":"<p>以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。<br>后来在使用<code>vertx-pac4j</code>的时候，无意中看到它源码中，也有我上面说的场景使用。就在<code>org.pac4j.vertx.context.session.VertxSessionStore</code>类的这一段：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Session getSession(<span class=\"keyword\">String</span> sessionId) &#123;</span><br><span class=\"line\">       final CompletableFuture&lt;io.vertx.ext.web.Session&gt; vertxSessionFuture = <span class=\"keyword\">new</span> <span class=\"type\">CompletableFuture</span>&lt;&gt;();</span><br><span class=\"line\">       sessionStore.<span class=\"keyword\">get</span>(sessionId, asyncResult -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (asyncResult.succeeded()) &#123;</span><br><span class=\"line\">               vertxSessionFuture.complete(asyncResult.result());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               vertxSessionFuture.completeExceptionally(asyncResult.cause());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       final CompletableFuture&lt;Session&gt; pac4jSessionFuture = vertxSessionFuture.thenApply(session -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">VertxSession</span>(session);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> pac4jSessionFuture.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException|ExecutionException e) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">TechnicalException</span>(e);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>可以明显看到<code>sessionStore.get</code>是的常规的Vert.x异步调用。<br>基于这种应用方式，我尝试用<code>groovy</code>模仿写了一下，效果显著，代码如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import io<span class=\"selector-class\">.vertx</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.Vertx</span></span><br><span class=\"line\"></span><br><span class=\"line\">import java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.concurrent</span><span class=\"selector-class\">.CompletableFuture</span></span><br><span class=\"line\"></span><br><span class=\"line\">String <span class=\"built_in\">sayHello</span>() &#123;</span><br><span class=\"line\">    CompletableFuture completableFuture = new <span class=\"built_in\">CompletableFuture</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx<span class=\"selector-class\">.vertx</span>()</span><br><span class=\"line\">    vertx<span class=\"selector-class\">.setTimer</span>(<span class=\"number\">3000</span>, &#123;</span><br><span class=\"line\">        completableFuture<span class=\"selector-class\">.complete</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return completableFuture<span class=\"selector-class\">.get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">println</span><span class=\"params\">(sayHello()</span></span>)</span><br></pre></td></tr></table></figure>\n<p>上面这种写法，主要还是依赖了java1.8的<code>CompletableFuture</code>类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前用Vert.x的时候就有这样的疑问，如果我提供的方法是基于Vert.x异步实现的。如何被一个同步的应用调用呢，比如Spring。当时我一度以为要自己开一个线程，然后不断轮询结果，之后再返回，通过这样，把一个异步的方法，包装成同步的方法。<br>后来在使用<code>vertx-pac4j</code>的时候，无意中看到它源码中，也有我上面说的场景使用。就在<code>org.pac4j.vertx.context.session.VertxSessionStore</code>类的这一段：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   <span class=\"keyword\">public</span> Session getSession(<span class=\"keyword\">String</span> sessionId) &#123;</span><br><span class=\"line\">       final CompletableFuture&lt;io.vertx.ext.web.Session&gt; vertxSessionFuture = <span class=\"keyword\">new</span> <span class=\"type\">CompletableFuture</span>&lt;&gt;();</span><br><span class=\"line\">       sessionStore.<span class=\"keyword\">get</span>(sessionId, asyncResult -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (asyncResult.succeeded()) &#123;</span><br><span class=\"line\">               vertxSessionFuture.complete(asyncResult.result());</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               vertxSessionFuture.completeExceptionally(asyncResult.cause());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       final CompletableFuture&lt;Session&gt; pac4jSessionFuture = vertxSessionFuture.thenApply(session -&gt; &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"type\">VertxSession</span>(session);</span><br><span class=\"line\">           &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> pac4jSessionFuture.<span class=\"keyword\">get</span>();</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (InterruptedException|ExecutionException e) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"type\">TechnicalException</span>(e);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>可以明显看到<code>sessionStore.get</code>是的常规的Vert.x异步调用。<br>基于这种应用方式，我尝试用<code>groovy</code>模仿写了一下，效果显著，代码如下：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"code\"><pre><span class=\"line\">import io<span class=\"selector-class\">.vertx</span><span class=\"selector-class\">.core</span><span class=\"selector-class\">.Vertx</span></span><br><span class=\"line\"></span><br><span class=\"line\">import java<span class=\"selector-class\">.util</span><span class=\"selector-class\">.concurrent</span><span class=\"selector-class\">.CompletableFuture</span></span><br><span class=\"line\"></span><br><span class=\"line\">String <span class=\"built_in\">sayHello</span>() &#123;</span><br><span class=\"line\">    CompletableFuture completableFuture = new <span class=\"built_in\">CompletableFuture</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    Vertx vertx = Vertx<span class=\"selector-class\">.vertx</span>()</span><br><span class=\"line\">    vertx<span class=\"selector-class\">.setTimer</span>(<span class=\"number\">3000</span>, &#123;</span><br><span class=\"line\">        completableFuture<span class=\"selector-class\">.complete</span>(<span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    return completableFuture<span class=\"selector-class\">.get</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">println</span><span class=\"params\">(sayHello()</span></span>)</span><br></pre></td></tr></table></figure>\n<p>上面这种写法，主要还是依赖了java1.8的<code>CompletableFuture</code>类，后续我会单独开文章讲解这个类的使用。今天就先到这里吧。</p>\n"},{"title":"给异步的Vert.x程序做单元测试","date":"2018-09-13T00:33:56.000Z","_content":"异步的程序先天不好单元测试，尤其是按照传统的`JUnit`思路来弄，肯定是不行的。好在`Vert.x`想到了这一点，所以提供了`vertx-unit`包，专门考虑了对异步代码的测试。\n使用起来也很简单，首先\n```\ntestCompile \"io.vertx:vertx-unit:3.5.3\"\n```\n然后创建一个测试类\n```\n@RunWith(VertxUnitRunner.class)\npublic class JUnitTestSuite {\n  @Test\n  public void testSomething(TestContext context) {\n    context.assertFalse(false);\n  }\n}\n```\n如果要是测试异步程序，只需要调用`TestContext`的`async()`方法即可。然后直到手动调用其`complete()`方法，整个测试过程才会结束。请看例子：\n```\n@Test\nvoid testSomething(TestContext context) {\n    def async = context.async()\n    Vertx.vertx().setTimer(3000, {\n        context.assertFalse(false)\n        async.complete()\n    })\n}\n```\n`async`方法的注释写得还是很详细的\n```\nCreate and returns a new async object, the returned async controls the completion of the test. Calling the Async.complete() completes the async operation.\n\nThe test case will complete when all the async objects have their Async.complete() method called at least once.\n\nThis method shall be used for creating asynchronous exit points for the executed test.\n```\n\n更多内容请参考官方文档：[vertx-unit](https://vertx.io/docs/vertx-unit/java/)","source":"_posts/vertx_unit_test.md","raw":"---\ntitle: 给异步的Vert.x程序做单元测试\ndate: 2018-09-13 08:33:56\ncategories: 程序人生\ntags:\n    - Vert.x\n---\n异步的程序先天不好单元测试，尤其是按照传统的`JUnit`思路来弄，肯定是不行的。好在`Vert.x`想到了这一点，所以提供了`vertx-unit`包，专门考虑了对异步代码的测试。\n使用起来也很简单，首先\n```\ntestCompile \"io.vertx:vertx-unit:3.5.3\"\n```\n然后创建一个测试类\n```\n@RunWith(VertxUnitRunner.class)\npublic class JUnitTestSuite {\n  @Test\n  public void testSomething(TestContext context) {\n    context.assertFalse(false);\n  }\n}\n```\n如果要是测试异步程序，只需要调用`TestContext`的`async()`方法即可。然后直到手动调用其`complete()`方法，整个测试过程才会结束。请看例子：\n```\n@Test\nvoid testSomething(TestContext context) {\n    def async = context.async()\n    Vertx.vertx().setTimer(3000, {\n        context.assertFalse(false)\n        async.complete()\n    })\n}\n```\n`async`方法的注释写得还是很详细的\n```\nCreate and returns a new async object, the returned async controls the completion of the test. Calling the Async.complete() completes the async operation.\n\nThe test case will complete when all the async objects have their Async.complete() method called at least once.\n\nThis method shall be used for creating asynchronous exit points for the executed test.\n```\n\n更多内容请参考官方文档：[vertx-unit](https://vertx.io/docs/vertx-unit/java/)","slug":"vertx_unit_test","published":1,"updated":"2018-09-13T02:27:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn2007hy0mzbz0o6fph","content":"<p>异步的程序先天不好单元测试，尤其是按照传统的<code>JUnit</code>思路来弄，肯定是不行的。好在<code>Vert.x</code>想到了这一点，所以提供了<code>vertx-unit</code>包，专门考虑了对异步代码的测试。<br>使用起来也很简单，首先</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">testCompile</span> <span class=\"string\">&quot;io.vertx:vertx-unit:3.5.3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后创建一个测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(VertxUnitRunner.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JUnitTestSuite</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSomething</span><span class=\"params\">(TestContext context)</span> &#123;</span><br><span class=\"line\">    context.assertFalse(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要是测试异步程序，只需要调用<code>TestContext</code>的<code>async()</code>方法即可。然后直到手动调用其<code>complete()</code>方法，整个测试过程才会结束。请看例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"built_in\">void</span> <span class=\"title function_\">testSomething</span>(<span class=\"params\">TestContext context</span>) &#123;</span><br><span class=\"line\">    def <span class=\"keyword\">async</span> = context.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">    <span class=\"title class_\">Vertx</span>.<span class=\"title function_\">vertx</span>().<span class=\"title function_\">setTimer</span>(<span class=\"number\">3000</span>, &#123;</span><br><span class=\"line\">        context.<span class=\"title function_\">assertFalse</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"keyword\">async</span>.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>async</code>方法的注释写得还是很详细的</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">and</span> returns a <span class=\"keyword\">new</span> <span class=\"keyword\">async</span> object, the returned <span class=\"keyword\">async</span> controls the completion <span class=\"keyword\">of</span> the test. Calling the <span class=\"keyword\">Async</span>.complete() completes the <span class=\"keyword\">async</span> operation.</span><br><span class=\"line\"></span><br><span class=\"line\">The test <span class=\"keyword\">case</span> will complete when all the <span class=\"keyword\">async</span> objects have their <span class=\"keyword\">Async</span>.complete() <span class=\"keyword\">method</span> <span class=\"title function_\">called</span> <span class=\"title function_\">at</span> <span class=\"title function_\">least</span> <span class=\"title function_\">once</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">This</span> <span class=\"title function_\">method</span> <span class=\"title function_\">shall</span> <span class=\"title function_\">be</span> <span class=\"title function_\">used</span> <span class=\"title function_\">for</span> <span class=\"title function_\">creating</span> <span class=\"title function_\">asynchronous</span> <span class=\"title function_\">exit</span> <span class=\"title function_\">points</span> <span class=\"title function_\">for</span> <span class=\"title function_\">the</span> <span class=\"title function_\">executed</span> <span class=\"title function_\">test</span>.</span><br></pre></td></tr></table></figure>\n\n<p>更多内容请参考官方文档：<a href=\"https://vertx.io/docs/vertx-unit/java/\">vertx-unit</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>异步的程序先天不好单元测试，尤其是按照传统的<code>JUnit</code>思路来弄，肯定是不行的。好在<code>Vert.x</code>想到了这一点，所以提供了<code>vertx-unit</code>包，专门考虑了对异步代码的测试。<br>使用起来也很简单，首先</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">testCompile</span> <span class=\"string\">&quot;io.vertx:vertx-unit:3.5.3&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后创建一个测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(VertxUnitRunner.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JUnitTestSuite</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Test</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testSomething</span><span class=\"params\">(TestContext context)</span> &#123;</span><br><span class=\"line\">    context.assertFalse(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果要是测试异步程序，只需要调用<code>TestContext</code>的<code>async()</code>方法即可。然后直到手动调用其<code>complete()</code>方法，整个测试过程才会结束。请看例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"built_in\">void</span> <span class=\"title function_\">testSomething</span>(<span class=\"params\">TestContext context</span>) &#123;</span><br><span class=\"line\">    def <span class=\"keyword\">async</span> = context.<span class=\"title function_\">async</span>()</span><br><span class=\"line\">    <span class=\"title class_\">Vertx</span>.<span class=\"title function_\">vertx</span>().<span class=\"title function_\">setTimer</span>(<span class=\"number\">3000</span>, &#123;</span><br><span class=\"line\">        context.<span class=\"title function_\">assertFalse</span>(<span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"keyword\">async</span>.<span class=\"title function_\">complete</span>()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>async</code>方法的注释写得还是很详细的</p>\n<figure class=\"highlight oxygene\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Create</span> <span class=\"keyword\">and</span> returns a <span class=\"keyword\">new</span> <span class=\"keyword\">async</span> object, the returned <span class=\"keyword\">async</span> controls the completion <span class=\"keyword\">of</span> the test. Calling the <span class=\"keyword\">Async</span>.complete() completes the <span class=\"keyword\">async</span> operation.</span><br><span class=\"line\"></span><br><span class=\"line\">The test <span class=\"keyword\">case</span> will complete when all the <span class=\"keyword\">async</span> objects have their <span class=\"keyword\">Async</span>.complete() <span class=\"keyword\">method</span> <span class=\"title function_\">called</span> <span class=\"title function_\">at</span> <span class=\"title function_\">least</span> <span class=\"title function_\">once</span>.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">This</span> <span class=\"title function_\">method</span> <span class=\"title function_\">shall</span> <span class=\"title function_\">be</span> <span class=\"title function_\">used</span> <span class=\"title function_\">for</span> <span class=\"title function_\">creating</span> <span class=\"title function_\">asynchronous</span> <span class=\"title function_\">exit</span> <span class=\"title function_\">points</span> <span class=\"title function_\">for</span> <span class=\"title function_\">the</span> <span class=\"title function_\">executed</span> <span class=\"title function_\">test</span>.</span><br></pre></td></tr></table></figure>\n\n<p>更多内容请参考官方文档：<a href=\"https://vertx.io/docs/vertx-unit/java/\">vertx-unit</a></p>\n"},{"title":"上墙纪念","date":"2018-08-28T00:58:55.000Z","_content":"![](/media/15354179433179.jpg)\n[vertx-examples](https://github.com/vert-x3/vertx-examples)项目合并了我一次`PR`，所以我的ID出现在[contributors](https://github.com/vert-x3/vertx-examples/graphs/contributors)里了。应该是为数不多的亚裔面孔。嗨皮。","source":"_posts/vertx_example_contributors.md","raw":"---\ntitle: 上墙纪念\ndate: 2018-08-28 08:58:55\ncategories: 程序人生\ntags:\n    - contributors\n---\n![](/media/15354179433179.jpg)\n[vertx-examples](https://github.com/vert-x3/vertx-examples)项目合并了我一次`PR`，所以我的ID出现在[contributors](https://github.com/vert-x3/vertx-examples/graphs/contributors)里了。应该是为数不多的亚裔面孔。嗨皮。","slug":"vertx_example_contributors","published":1,"updated":"2018-08-28T01:03:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn2007ky0mzbzxo0nnb","content":"<p><img src=\"/media/15354179433179.jpg\"><br><a href=\"https://github.com/vert-x3/vertx-examples\">vertx-examples</a>项目合并了我一次<code>PR</code>，所以我的ID出现在<a href=\"https://github.com/vert-x3/vertx-examples/graphs/contributors\">contributors</a>里了。应该是为数不多的亚裔面孔。嗨皮。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/media/15354179433179.jpg\"><br><a href=\"https://github.com/vert-x3/vertx-examples\">vertx-examples</a>项目合并了我一次<code>PR</code>，所以我的ID出现在<a href=\"https://github.com/vert-x3/vertx-examples/graphs/contributors\">contributors</a>里了。应该是为数不多的亚裔面孔。嗨皮。</p>\n"},{"title":"vim必知必会","date":"2018-09-03T02:32:50.000Z","_content":"### 普通模式下光标移动\n* `h`：左移一个字符\n* `j`：下移一行\n* `k`：上移一行\n* `l`：右移一个字符\n\n* `PageDown`(`Ctrl+F`)：下翻一屏\n* `PageUp`（`Ctrl+B`）上翻一屏\n* `G`：移动到最后一行\n* `num G`：移动到第*num*行\n* `gg`：移动到第一行\n\n### 命令模式下的命令\n* `q`：退出\n* `q!`：放弃修改，退出\n* `w filename`：保存到另外一个文件\n* `wq`：保存并退出\n\n### 普通模式下的编辑命令\n* `x`：删除光标位置的的字符\n* `dd`：删除光标所在行\n* `dw`：删除光标所在单词\n* `d$`：删除光标至行尾\n* `J`：删除光标所在行的换行符\n* `u`：撤销操作\n* `a`：在光标后追加数据\n* `A`：在光标所在行末尾追加数据\n* `r char`：用*char*替换光标所在字符\n* `R text`：用*text*替换光标所在位置数据\n\n### 复制粘贴\n* `y`复制，跟`d`类似，`yw`复制一个单词，`y$`复制到行尾\n* `p`粘贴\n还有个特别好用的就是`v`模式，可以通过敲`v`进入，然后就可以移动光标批量选择内容，按`y`复制，之后合适的位置`p`进行粘贴\n\n### 查找替换\n* `:s/old/new/`替换一处\n* `:%s/old/new/g`替换所有\n* `:%s/old/new/gc`以交互询问的方式，替换所有\n\n\n\n","source":"_posts/vim_note.md","raw":"---\ntitle: vim必知必会\ndate: 2018-09-03 10:32:50\ncategories: 程序人生\ntags:\n    - Linux\n    - vim\n---\n### 普通模式下光标移动\n* `h`：左移一个字符\n* `j`：下移一行\n* `k`：上移一行\n* `l`：右移一个字符\n\n* `PageDown`(`Ctrl+F`)：下翻一屏\n* `PageUp`（`Ctrl+B`）上翻一屏\n* `G`：移动到最后一行\n* `num G`：移动到第*num*行\n* `gg`：移动到第一行\n\n### 命令模式下的命令\n* `q`：退出\n* `q!`：放弃修改，退出\n* `w filename`：保存到另外一个文件\n* `wq`：保存并退出\n\n### 普通模式下的编辑命令\n* `x`：删除光标位置的的字符\n* `dd`：删除光标所在行\n* `dw`：删除光标所在单词\n* `d$`：删除光标至行尾\n* `J`：删除光标所在行的换行符\n* `u`：撤销操作\n* `a`：在光标后追加数据\n* `A`：在光标所在行末尾追加数据\n* `r char`：用*char*替换光标所在字符\n* `R text`：用*text*替换光标所在位置数据\n\n### 复制粘贴\n* `y`复制，跟`d`类似，`yw`复制一个单词，`y$`复制到行尾\n* `p`粘贴\n还有个特别好用的就是`v`模式，可以通过敲`v`进入，然后就可以移动光标批量选择内容，按`y`复制，之后合适的位置`p`进行粘贴\n\n### 查找替换\n* `:s/old/new/`替换一处\n* `:%s/old/new/g`替换所有\n* `:%s/old/new/gc`以交互询问的方式，替换所有\n\n\n\n","slug":"vim_note","published":1,"updated":"2018-09-03T03:51:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn3007oy0mzef2mhm5x","content":"<h3 id=\"普通模式下光标移动\"><a href=\"#普通模式下光标移动\" class=\"headerlink\" title=\"普通模式下光标移动\"></a>普通模式下光标移动</h3><ul>\n<li><p><code>h</code>：左移一个字符</p>\n</li>\n<li><p><code>j</code>：下移一行</p>\n</li>\n<li><p><code>k</code>：上移一行</p>\n</li>\n<li><p><code>l</code>：右移一个字符</p>\n</li>\n<li><p><code>PageDown</code>(<code>Ctrl+F</code>)：下翻一屏</p>\n</li>\n<li><p><code>PageUp</code>（<code>Ctrl+B</code>）上翻一屏</p>\n</li>\n<li><p><code>G</code>：移动到最后一行</p>\n</li>\n<li><p><code>num G</code>：移动到第<em>num</em>行</p>\n</li>\n<li><p><code>gg</code>：移动到第一行</p>\n</li>\n</ul>\n<h3 id=\"命令模式下的命令\"><a href=\"#命令模式下的命令\" class=\"headerlink\" title=\"命令模式下的命令\"></a>命令模式下的命令</h3><ul>\n<li><code>q</code>：退出</li>\n<li><code>q!</code>：放弃修改，退出</li>\n<li><code>w filename</code>：保存到另外一个文件</li>\n<li><code>wq</code>：保存并退出</li>\n</ul>\n<h3 id=\"普通模式下的编辑命令\"><a href=\"#普通模式下的编辑命令\" class=\"headerlink\" title=\"普通模式下的编辑命令\"></a>普通模式下的编辑命令</h3><ul>\n<li><code>x</code>：删除光标位置的的字符</li>\n<li><code>dd</code>：删除光标所在行</li>\n<li><code>dw</code>：删除光标所在单词</li>\n<li><code>d$</code>：删除光标至行尾</li>\n<li><code>J</code>：删除光标所在行的换行符</li>\n<li><code>u</code>：撤销操作</li>\n<li><code>a</code>：在光标后追加数据</li>\n<li><code>A</code>：在光标所在行末尾追加数据</li>\n<li><code>r char</code>：用<em>char</em>替换光标所在字符</li>\n<li><code>R text</code>：用<em>text</em>替换光标所在位置数据</li>\n</ul>\n<h3 id=\"复制粘贴\"><a href=\"#复制粘贴\" class=\"headerlink\" title=\"复制粘贴\"></a>复制粘贴</h3><ul>\n<li><code>y</code>复制，跟<code>d</code>类似，<code>yw</code>复制一个单词，<code>y$</code>复制到行尾</li>\n<li><code>p</code>粘贴<br>还有个特别好用的就是<code>v</code>模式，可以通过敲<code>v</code>进入，然后就可以移动光标批量选择内容，按<code>y</code>复制，之后合适的位置<code>p</code>进行粘贴</li>\n</ul>\n<h3 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h3><ul>\n<li><code>:s/old/new/</code>替换一处</li>\n<li><code>:%s/old/new/g</code>替换所有</li>\n<li><code>:%s/old/new/gc</code>以交互询问的方式，替换所有</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"普通模式下光标移动\"><a href=\"#普通模式下光标移动\" class=\"headerlink\" title=\"普通模式下光标移动\"></a>普通模式下光标移动</h3><ul>\n<li><p><code>h</code>：左移一个字符</p>\n</li>\n<li><p><code>j</code>：下移一行</p>\n</li>\n<li><p><code>k</code>：上移一行</p>\n</li>\n<li><p><code>l</code>：右移一个字符</p>\n</li>\n<li><p><code>PageDown</code>(<code>Ctrl+F</code>)：下翻一屏</p>\n</li>\n<li><p><code>PageUp</code>（<code>Ctrl+B</code>）上翻一屏</p>\n</li>\n<li><p><code>G</code>：移动到最后一行</p>\n</li>\n<li><p><code>num G</code>：移动到第<em>num</em>行</p>\n</li>\n<li><p><code>gg</code>：移动到第一行</p>\n</li>\n</ul>\n<h3 id=\"命令模式下的命令\"><a href=\"#命令模式下的命令\" class=\"headerlink\" title=\"命令模式下的命令\"></a>命令模式下的命令</h3><ul>\n<li><code>q</code>：退出</li>\n<li><code>q!</code>：放弃修改，退出</li>\n<li><code>w filename</code>：保存到另外一个文件</li>\n<li><code>wq</code>：保存并退出</li>\n</ul>\n<h3 id=\"普通模式下的编辑命令\"><a href=\"#普通模式下的编辑命令\" class=\"headerlink\" title=\"普通模式下的编辑命令\"></a>普通模式下的编辑命令</h3><ul>\n<li><code>x</code>：删除光标位置的的字符</li>\n<li><code>dd</code>：删除光标所在行</li>\n<li><code>dw</code>：删除光标所在单词</li>\n<li><code>d$</code>：删除光标至行尾</li>\n<li><code>J</code>：删除光标所在行的换行符</li>\n<li><code>u</code>：撤销操作</li>\n<li><code>a</code>：在光标后追加数据</li>\n<li><code>A</code>：在光标所在行末尾追加数据</li>\n<li><code>r char</code>：用<em>char</em>替换光标所在字符</li>\n<li><code>R text</code>：用<em>text</em>替换光标所在位置数据</li>\n</ul>\n<h3 id=\"复制粘贴\"><a href=\"#复制粘贴\" class=\"headerlink\" title=\"复制粘贴\"></a>复制粘贴</h3><ul>\n<li><code>y</code>复制，跟<code>d</code>类似，<code>yw</code>复制一个单词，<code>y$</code>复制到行尾</li>\n<li><code>p</code>粘贴<br>还有个特别好用的就是<code>v</code>模式，可以通过敲<code>v</code>进入，然后就可以移动光标批量选择内容，按<code>y</code>复制，之后合适的位置<code>p</code>进行粘贴</li>\n</ul>\n<h3 id=\"查找替换\"><a href=\"#查找替换\" class=\"headerlink\" title=\"查找替换\"></a>查找替换</h3><ul>\n<li><code>:s/old/new/</code>替换一处</li>\n<li><code>:%s/old/new/g</code>替换所有</li>\n<li><code>:%s/old/new/gc</code>以交互询问的方式，替换所有</li>\n</ul>\n"},{"title":"黔西南州兴义市马岭河峡谷半日游","date":"2018-08-19T23:18:18.000Z","_content":"最近在贵州出差，一个小城市，兴义市，隶属于黔西南布依族苗族自治州。周末去了趟当地的景点——马岭河峡谷，感觉不错，几处瀑布意境各不相同。随手拍了几张照片，聊作纪念。\n![](/media/IMG_7384.jpg)\n![](/media/IMG_7284.jpg)\n![](/media/IMG_7350.jpg)\n\n\n","source":"_posts/xingyi-malinghe.md","raw":"---\ntitle: 黔西南州兴义市马岭河峡谷半日游\ndate: 2018-08-20 07:18:18\ncategories: 游记\n---\n最近在贵州出差，一个小城市，兴义市，隶属于黔西南布依族苗族自治州。周末去了趟当地的景点——马岭河峡谷，感觉不错，几处瀑布意境各不相同。随手拍了几张照片，聊作纪念。\n![](/media/IMG_7384.jpg)\n![](/media/IMG_7284.jpg)\n![](/media/IMG_7350.jpg)\n\n\n","slug":"xingyi-malinghe","published":1,"updated":"2018-08-19T23:37:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn3007ry0mzfynb543i","content":"<p>最近在贵州出差，一个小城市，兴义市，隶属于黔西南布依族苗族自治州。周末去了趟当地的景点——马岭河峡谷，感觉不错，几处瀑布意境各不相同。随手拍了几张照片，聊作纪念。<br><img src=\"/media/IMG_7384.jpg\"><br><img src=\"/media/IMG_7284.jpg\"><br><img src=\"/media/IMG_7350.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在贵州出差，一个小城市，兴义市，隶属于黔西南布依族苗族自治州。周末去了趟当地的景点——马岭河峡谷，感觉不错，几处瀑布意境各不相同。随手拍了几张照片，聊作纪念。<br><img src=\"/media/IMG_7384.jpg\"><br><img src=\"/media/IMG_7284.jpg\"><br><img src=\"/media/IMG_7350.jpg\"></p>\n"},{"title":"小诗一首","date":"2018-07-24T00:16:47.000Z","_content":"![](/media/DSC04458.jpg)\n### 都谓彭城多霾日，\n### 落笔春城溅靛青。\n### 天公莫要惜颜色，\n### 几许蔚蓝伴我行。\n#### ——戊戌年六月偶瞥于徐州\n\n","source":"_posts/xuzhou_xiari.md","raw":"---\ntitle: 小诗一首\ndate: 2018-07-24 08:16:47\ncategories: 文艺中年\ntags:\n---\n![](/media/DSC04458.jpg)\n### 都谓彭城多霾日，\n### 落笔春城溅靛青。\n### 天公莫要惜颜色，\n### 几许蔚蓝伴我行。\n#### ——戊戌年六月偶瞥于徐州\n\n","slug":"xuzhou_xiari","published":1,"updated":"2018-07-24T00:21:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0werqn7009fy0mzewgjcn90","content":"<p><img src=\"/media/DSC04458.jpg\"></p>\n<h3 id=\"都谓彭城多霾日，\"><a href=\"#都谓彭城多霾日，\" class=\"headerlink\" title=\"都谓彭城多霾日，\"></a>都谓彭城多霾日，</h3><h3 id=\"落笔春城溅靛青。\"><a href=\"#落笔春城溅靛青。\" class=\"headerlink\" title=\"落笔春城溅靛青。\"></a>落笔春城溅靛青。</h3><h3 id=\"天公莫要惜颜色，\"><a href=\"#天公莫要惜颜色，\" class=\"headerlink\" title=\"天公莫要惜颜色，\"></a>天公莫要惜颜色，</h3><h3 id=\"几许蔚蓝伴我行。\"><a href=\"#几许蔚蓝伴我行。\" class=\"headerlink\" title=\"几许蔚蓝伴我行。\"></a>几许蔚蓝伴我行。</h3><h4 id=\"——戊戌年六月偶瞥于徐州\"><a href=\"#——戊戌年六月偶瞥于徐州\" class=\"headerlink\" title=\"——戊戌年六月偶瞥于徐州\"></a>——戊戌年六月偶瞥于徐州</h4>","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/media/DSC04458.jpg\"></p>\n<h3 id=\"都谓彭城多霾日，\"><a href=\"#都谓彭城多霾日，\" class=\"headerlink\" title=\"都谓彭城多霾日，\"></a>都谓彭城多霾日，</h3><h3 id=\"落笔春城溅靛青。\"><a href=\"#落笔春城溅靛青。\" class=\"headerlink\" title=\"落笔春城溅靛青。\"></a>落笔春城溅靛青。</h3><h3 id=\"天公莫要惜颜色，\"><a href=\"#天公莫要惜颜色，\" class=\"headerlink\" title=\"天公莫要惜颜色，\"></a>天公莫要惜颜色，</h3><h3 id=\"几许蔚蓝伴我行。\"><a href=\"#几许蔚蓝伴我行。\" class=\"headerlink\" title=\"几许蔚蓝伴我行。\"></a>几许蔚蓝伴我行。</h3><h4 id=\"——戊戌年六月偶瞥于徐州\"><a href=\"#——戊戌年六月偶瞥于徐州\" class=\"headerlink\" title=\"——戊戌年六月偶瞥于徐州\"></a>——戊戌年六月偶瞥于徐州</h4>"},{"title":"maupassant主题在Apple M1上不能用的问题","date":"2022-03-22T09:12:44.000Z","_content":"\n我这个博客是用[hexo](https://hexo.io/zh-cn/) 搭建的，说实话`node`的技术栈真是很烦，各种依赖非常重，借用一位朋友的话说\"天下苦`node`久矣\"。\n\n不过对我来说，平时开发也不用`node`了，现在就用用`blog`嘛，也不是不能忍。\n\n谁成想，两年前换了`Apple M1`后，情况都变了。`blog`直接跑不起来了，当时我一直以为是`hexo`的问题，很无奈就只能停更了。\n\n中间陆陆续续，各种东西也在适配，我也都顺手尝试了几次，不过无疾而终，这也就导致了我这个`blog`断更了这么久。\n\n`失之东隅，收之桑榆`，虽然`blog`都长草了，但是[B站](https://space.bilibili.com/24370353) 倒是有点蒸蒸日上的感觉。\n\n时间来到了`2022`年，我突然觉得视频的形式虽然受众广，也适合安利教程啊、软件啊、开箱评测类的东西。但是本质上，视频对沉淀自己，其实没有`blog`来的深刻。\n\n所以`blog`还是不能丢，从今天起，我要回归这个`blog`，继续记录生活与技术。\n\n回归标题，说说我是怎么解决之前我的`blog`无法`hexo g -d`的问题。\n\n经研究发现不是`hexo`的问题，而是我用的这款皮肤`maupassant`，它依赖一个包`hexo-renderer-sass`，众所周知，`sass`的一些生态在`node`里就是万恶之源啊。\n\n但其实`sass`大部分情况下也早就适配`M1`了，只是这个`hexo-renderer-sass`已经三年没人管了。实在没办法，我只能自己`fork`了一下，改了一下依赖。\n\n也就是把下面这段：\n\n```shell\n\"dependencies\": {\n \"node-sass\": \"^4.5.3\"\n}\n```\n\n改成了:\n\n```shell\n\"dependencies\": {\n \"node-sass\": \"^7.0.1\"\n}\n```\n\n这个时候，回到我自己的`blog`项目的`package.json`文件，手动添加依赖：\n\n```shell\n\"dependencies\": {\n  ...\n  \"hexo-renderer-sass\": \"github:aruis/hexo-renderer-sass\",\n  ...\n}  \n```\n\n然后`npm install`，就万事大吉了。\n\n就这样，我的`blog`就复活了，😄\n","source":"_posts/maupassant-in-apple-silicon.md","raw":"---\ntitle: maupassant主题在Apple M1上不能用的问题\ndate: 2022-03-22 17:12:44\ncategories: 程序人生\ntags:\n    - Mac\n---\n\n我这个博客是用[hexo](https://hexo.io/zh-cn/) 搭建的，说实话`node`的技术栈真是很烦，各种依赖非常重，借用一位朋友的话说\"天下苦`node`久矣\"。\n\n不过对我来说，平时开发也不用`node`了，现在就用用`blog`嘛，也不是不能忍。\n\n谁成想，两年前换了`Apple M1`后，情况都变了。`blog`直接跑不起来了，当时我一直以为是`hexo`的问题，很无奈就只能停更了。\n\n中间陆陆续续，各种东西也在适配，我也都顺手尝试了几次，不过无疾而终，这也就导致了我这个`blog`断更了这么久。\n\n`失之东隅，收之桑榆`，虽然`blog`都长草了，但是[B站](https://space.bilibili.com/24370353) 倒是有点蒸蒸日上的感觉。\n\n时间来到了`2022`年，我突然觉得视频的形式虽然受众广，也适合安利教程啊、软件啊、开箱评测类的东西。但是本质上，视频对沉淀自己，其实没有`blog`来的深刻。\n\n所以`blog`还是不能丢，从今天起，我要回归这个`blog`，继续记录生活与技术。\n\n回归标题，说说我是怎么解决之前我的`blog`无法`hexo g -d`的问题。\n\n经研究发现不是`hexo`的问题，而是我用的这款皮肤`maupassant`，它依赖一个包`hexo-renderer-sass`，众所周知，`sass`的一些生态在`node`里就是万恶之源啊。\n\n但其实`sass`大部分情况下也早就适配`M1`了，只是这个`hexo-renderer-sass`已经三年没人管了。实在没办法，我只能自己`fork`了一下，改了一下依赖。\n\n也就是把下面这段：\n\n```shell\n\"dependencies\": {\n \"node-sass\": \"^4.5.3\"\n}\n```\n\n改成了:\n\n```shell\n\"dependencies\": {\n \"node-sass\": \"^7.0.1\"\n}\n```\n\n这个时候，回到我自己的`blog`项目的`package.json`文件，手动添加依赖：\n\n```shell\n\"dependencies\": {\n  ...\n  \"hexo-renderer-sass\": \"github:aruis/hexo-renderer-sass\",\n  ...\n}  \n```\n\n然后`npm install`，就万事大吉了。\n\n就这样，我的`blog`就复活了，😄\n","slug":"maupassant-in-apple-silicon","published":1,"updated":"2022-03-22T12:48:11.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl124w5sr0000femz4ixobyzm","content":"<p>我这个博客是用<a href=\"https://hexo.io/zh-cn/\">hexo</a> 搭建的，说实话<code>node</code>的技术栈真是很烦，各种依赖非常重，借用一位朋友的话说”天下苦<code>node</code>久矣”。</p>\n<p>不过对我来说，平时开发也不用<code>node</code>了，现在就用用<code>blog</code>嘛，也不是不能忍。</p>\n<p>谁成想，两年前换了<code>Apple M1</code>后，情况都变了。<code>blog</code>直接跑不起来了，当时我一直以为是<code>hexo</code>的问题，很无奈就只能停更了。</p>\n<p>中间陆陆续续，各种东西也在适配，我也都顺手尝试了几次，不过无疾而终，这也就导致了我这个<code>blog</code>断更了这么久。</p>\n<p><code>失之东隅，收之桑榆</code>，虽然<code>blog</code>都长草了，但是<a href=\"https://space.bilibili.com/24370353\">B站</a> 倒是有点蒸蒸日上的感觉。</p>\n<p>时间来到了<code>2022</code>年，我突然觉得视频的形式虽然受众广，也适合安利教程啊、软件啊、开箱评测类的东西。但是本质上，视频对沉淀自己，其实没有<code>blog</code>来的深刻。</p>\n<p>所以<code>blog</code>还是不能丢，从今天起，我要回归这个<code>blog</code>，继续记录生活与技术。</p>\n<p>回归标题，说说我是怎么解决之前我的<code>blog</code>无法<code>hexo g -d</code>的问题。</p>\n<p>经研究发现不是<code>hexo</code>的问题，而是我用的这款皮肤<code>maupassant</code>，它依赖一个包<code>hexo-renderer-sass</code>，众所周知，<code>sass</code>的一些生态在<code>node</code>里就是万恶之源啊。</p>\n<p>但其实<code>sass</code>大部分情况下也早就适配<code>M1</code>了，只是这个<code>hexo-renderer-sass</code>已经三年没人管了。实在没办法，我只能自己<code>fork</code>了一下，改了一下依赖。</p>\n<p>也就是把下面这段：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\"> &quot;node-sass&quot;: &quot;^4.5.3&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改成了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\"> &quot;node-sass&quot;: &quot;^7.0.1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，回到我自己的<code>blog</code>项目的<code>package.json</code>文件，手动添加依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;hexo-renderer-sass&quot;: &quot;github:aruis/hexo-renderer-sass&quot;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>然后<code>npm install</code>，就万事大吉了。</p>\n<p>就这样，我的<code>blog</code>就复活了，😄</p>\n","site":{"data":{}},"excerpt":"","more":"<p>我这个博客是用<a href=\"https://hexo.io/zh-cn/\">hexo</a> 搭建的，说实话<code>node</code>的技术栈真是很烦，各种依赖非常重，借用一位朋友的话说”天下苦<code>node</code>久矣”。</p>\n<p>不过对我来说，平时开发也不用<code>node</code>了，现在就用用<code>blog</code>嘛，也不是不能忍。</p>\n<p>谁成想，两年前换了<code>Apple M1</code>后，情况都变了。<code>blog</code>直接跑不起来了，当时我一直以为是<code>hexo</code>的问题，很无奈就只能停更了。</p>\n<p>中间陆陆续续，各种东西也在适配，我也都顺手尝试了几次，不过无疾而终，这也就导致了我这个<code>blog</code>断更了这么久。</p>\n<p><code>失之东隅，收之桑榆</code>，虽然<code>blog</code>都长草了，但是<a href=\"https://space.bilibili.com/24370353\">B站</a> 倒是有点蒸蒸日上的感觉。</p>\n<p>时间来到了<code>2022</code>年，我突然觉得视频的形式虽然受众广，也适合安利教程啊、软件啊、开箱评测类的东西。但是本质上，视频对沉淀自己，其实没有<code>blog</code>来的深刻。</p>\n<p>所以<code>blog</code>还是不能丢，从今天起，我要回归这个<code>blog</code>，继续记录生活与技术。</p>\n<p>回归标题，说说我是怎么解决之前我的<code>blog</code>无法<code>hexo g -d</code>的问题。</p>\n<p>经研究发现不是<code>hexo</code>的问题，而是我用的这款皮肤<code>maupassant</code>，它依赖一个包<code>hexo-renderer-sass</code>，众所周知，<code>sass</code>的一些生态在<code>node</code>里就是万恶之源啊。</p>\n<p>但其实<code>sass</code>大部分情况下也早就适配<code>M1</code>了，只是这个<code>hexo-renderer-sass</code>已经三年没人管了。实在没办法，我只能自己<code>fork</code>了一下，改了一下依赖。</p>\n<p>也就是把下面这段：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\"> &quot;node-sass&quot;: &quot;^4.5.3&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>改成了:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\"> &quot;node-sass&quot;: &quot;^7.0.1&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个时候，回到我自己的<code>blog</code>项目的<code>package.json</code>文件，手动添加依赖：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &quot;hexo-renderer-sass&quot;: &quot;github:aruis/hexo-renderer-sass&quot;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>然后<code>npm install</code>，就万事大吉了。</p>\n<p>就这样，我的<code>blog</code>就复活了，😄</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl0werqmb0006y0mzdrw2ccth","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmd000cy0mz7am6283v"},{"post_id":"cl0werqm60000y0mzdv5af6vk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmd000gy0mz1y2ma7zi"},{"post_id":"cl0werqmb0007y0mzbsu3et26","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqme000jy0mz3u7detqe"},{"post_id":"cl0werqmc000ay0mz72nw22ub","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqme000ny0mz75340s9c"},{"post_id":"cl0werqm90002y0mz13rx16uj","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmf000qy0mz8zlr2xgx"},{"post_id":"cl0werqmc000by0mz3e9pbj34","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmf000uy0mz4st3d379"},{"post_id":"cl0werqmd000fy0mz2hsx8ih6","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmf000xy0mzfp34cgk3"},{"post_id":"cl0werqma0005y0mzee4a0vko","category_id":"cl0werqmd000dy0mz2jjec1mx","_id":"cl0werqmg000zy0mzc51kcpto"},{"post_id":"cl0werqme000iy0mzdcsc4aj4","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmh0012y0mz55exf206"},{"post_id":"cl0werqme000py0mz8upsdlo8","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmh0014y0mze1dmdf0y"},{"post_id":"cl0werqmf000ty0mzgtvua12r","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmh0017y0mzbd2001c2"},{"post_id":"cl0werqmf000wy0mz5smh3e58","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmh0019y0mz67iydk9y"},{"post_id":"cl0werqme000my0mz3ysndmre","category_id":"cl0werqmf000ry0mz9me0hdqp","_id":"cl0werqmi001dy0mzgzofb1qp"},{"post_id":"cl0werqmf000yy0mzb2p27t6n","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmi001gy0mzgqde3htx"},{"post_id":"cl0werqmh0011y0mz6ingezvg","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmi001ky0mzfzl1f2xq"},{"post_id":"cl0werqmh0013y0mz4wh15a1i","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmj001ny0mzah4m75a8"},{"post_id":"cl0werqmh0018y0mz3tl0cru2","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmj001ry0mz3s7x6dra"},{"post_id":"cl0werqmi001cy0mz03p36ili","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmj001uy0mz6aa34ivf"},{"post_id":"cl0werqmi001fy0mz491j79af","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmj001xy0mz5hlo5g63"},{"post_id":"cl0werqmh0016y0mzdbgg3ok0","category_id":"cl0werqmi001by0mzateb0b5n","_id":"cl0werqmk0020y0mz6i9qe8dl"},{"post_id":"cl0werqmi001jy0mzfl5t8czx","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmk0022y0mz5kwu7ha0"},{"post_id":"cl0werqmj001my0mzf7ytbx5t","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmk0026y0mz8qsjfo4v"},{"post_id":"cl0werqmj001qy0mzaiigdsmk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmk0028y0mz26koai65"},{"post_id":"cl0werqmj001ty0mz3j0i5a5x","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqml002by0mzavxv9grx"},{"post_id":"cl0werqmj001wy0mz26qi101z","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqml002ey0mz522z57bp"},{"post_id":"cl0werqmk001zy0mzb8hlc48m","category_id":"cl0werqmi001by0mzateb0b5n","_id":"cl0werqml002hy0mz0cqv4san"},{"post_id":"cl0werqmk0021y0mz88mp2vfl","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqml002ky0mzejgrg84k"},{"post_id":"cl0werqmk0025y0mz5m705a0r","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmm002ny0mzhvm8b9w3"},{"post_id":"cl0werqmk0027y0mz57b1djds","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmm002qy0mzhhzecdzc"},{"post_id":"cl0werqmk002ay0mz94cg0b0t","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmm002ty0mz61zi9kv2"},{"post_id":"cl0werqml002dy0mzam6m6ekp","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmm002wy0mzhy8g6ann"},{"post_id":"cl0werqml002gy0mzbb3jeyly","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmn0030y0mz82jsc7zq"},{"post_id":"cl0werqml002jy0mza4zr9ge0","category_id":"cl0werqmd000dy0mz2jjec1mx","_id":"cl0werqmn0033y0mz0px26qx9"},{"post_id":"cl0werqmm002my0mzevvlgawk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmn0036y0mzcoxv2lzg"},{"post_id":"cl0werqmm002py0mz7dr5akbv","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmn0039y0mz0uxa54bs"},{"post_id":"cl0werqmm002sy0mz57x5h7b5","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmo003dy0mz57ldfjsw"},{"post_id":"cl0werqmm002vy0mz1detcw1j","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmo003gy0mz7tn15j3j"},{"post_id":"cl0werqmn002zy0mz35o07lo9","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmo003ky0mzd1hvh351"},{"post_id":"cl0werqmn0032y0mz3jlk26np","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmp003ny0mz3bepcdoa"},{"post_id":"cl0werqmn0035y0mzgpbo73gc","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmp003ry0mz0vmk2ofz"},{"post_id":"cl0werqmn0038y0mz5ijje8ll","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmp003uy0mz8ypjhyis"},{"post_id":"cl0werqmn003cy0mzalrubzep","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmp003xy0mzeerz07mf"},{"post_id":"cl0werqmo003fy0mz22rzeaa8","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmq0040y0mz1qlmeogx"},{"post_id":"cl0werqmo003jy0mzeanu3glh","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmq0044y0mzew4s81r4"},{"post_id":"cl0werqmo003my0mzeoro61yk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmq0048y0mzbq3pc6pt"},{"post_id":"cl0werqmp003qy0mzchuf9l90","category_id":"cl0werqmi001by0mzateb0b5n","_id":"cl0werqmq004by0mzaqhk6mcx"},{"post_id":"cl0werqmp003ty0mz9nv7fnsx","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmr004ey0mz0gro8bik"},{"post_id":"cl0werqmp003wy0mz9m700l0w","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmr004iy0mzd47phhlz"},{"post_id":"cl0werqmq0043y0mzfwbd7sow","category_id":"cl0werqmd000dy0mz2jjec1mx","_id":"cl0werqmr004ly0mzfzkkcc4g"},{"post_id":"cl0werqmq0047y0mzg6jl122o","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmr004py0mzdiz8afyc"},{"post_id":"cl0werqmq004ay0mzb8ltbfsk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqms004sy0mzbqnr815c"},{"post_id":"cl0werqmp003zy0mz9elpgdov","category_id":"cl0werqmq0045y0mz0ffzby4f","_id":"cl0werqms004wy0mz58o69p4c"},{"post_id":"cl0werqmq004dy0mzfpzvg37i","category_id":"cl0werqmq0045y0mz0ffzby4f","_id":"cl0werqms004zy0mzc77wcfgx"},{"post_id":"cl0werqmr004hy0mz3eb77ijc","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqms0053y0mzh0hh90ub"},{"post_id":"cl0werqmr004ky0mzd8kngool","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmt0056y0mzgdmp7txa"},{"post_id":"cl0werqmr004oy0mzfmbx7xdf","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmt005ay0mz5r6e5qg6"},{"post_id":"cl0werqmr004ry0mzhyk39tx2","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmv005dy0mz6lgmdpfe"},{"post_id":"cl0werqms004vy0mzgc33bvkd","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmv005iy0mzf5ztcllc"},{"post_id":"cl0werqms004yy0mz2btae5mt","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmw005ly0mz6gcj6r7n"},{"post_id":"cl0werqms0052y0mz3v5cg22f","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmw005oy0mzd33bbhar"},{"post_id":"cl0werqmt0055y0mzcf8u6cfv","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmw005sy0mz9p674txz"},{"post_id":"cl0werqmu005cy0mzhe847s58","category_id":"cl0werqmd000dy0mz2jjec1mx","_id":"cl0werqmw005vy0mz4s1f8u6d"},{"post_id":"cl0werqmv005hy0mzalg9hb13","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmx005zy0mzeghm2e7o"},{"post_id":"cl0werqmv005ky0mz97qpbh9c","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmy0062y0mz2iekcj7q"},{"post_id":"cl0werqmt0059y0mz199f0gky","category_id":"cl0werqmv005fy0mz5x4i3367","_id":"cl0werqmy0066y0mz9hca10yq"},{"post_id":"cl0werqmw005ny0mz16k85lsk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmy0069y0mzfv6phxcw"},{"post_id":"cl0werqmw005ry0mz1i5333m8","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmz006dy0mz3lxk6hk2"},{"post_id":"cl0werqmw005uy0mzfj3s7z4c","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmz006gy0mz9rr60i1d"},{"post_id":"cl0werqmx005yy0mzazmigc2a","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqmz006jy0mzcj8n8n5b"},{"post_id":"cl0werqmy0061y0mzcqzt4nu8","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn0006ny0mz4zo3dlge"},{"post_id":"cl0werqmy0065y0mzd6k94d9r","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn0006qy0mz9t2ohie1"},{"post_id":"cl0werqmy0068y0mzhnfy31mj","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn0006uy0mz9hsydsa4"},{"post_id":"cl0werqmz006cy0mzbw6s39st","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn0006xy0mz8zymc7m0"},{"post_id":"cl0werqmz006fy0mzafssbsqx","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn10071y0mzhux59gbd"},{"post_id":"cl0werqmz006iy0mz1vpudf2r","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn10074y0mz4ne30xh4"},{"post_id":"cl0werqn0006my0mzg5wv2zrp","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn10078y0mz67j6dhf0"},{"post_id":"cl0werqn0006py0mzgmxqae6t","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn1007by0mzapmj5yuh"},{"post_id":"cl0werqn0006ty0mz7z5mdy7x","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn2007ey0mz8favcmme"},{"post_id":"cl0werqn0006wy0mzamqp828c","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn2007iy0mz95fi6hpa"},{"post_id":"cl0werqn10070y0mz2t9rgrom","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn2007ly0mz94p8d50i"},{"post_id":"cl0werqn10073y0mzh7hpfp1w","category_id":"cl0werqmi001by0mzateb0b5n","_id":"cl0werqn3007py0mzch3kcvhx"},{"post_id":"cl0werqn10077y0mz9vwe15rk","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn3007sy0mz4uuf3oz6"},{"post_id":"cl0werqn1007ay0mzh7ijbuma","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn3007vy0mz0u16357t"},{"post_id":"cl0werqn2007dy0mz08vf0a2y","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn3007xy0mz266w8dog"},{"post_id":"cl0werqn2007hy0mzbz0o6fph","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn30080y0mz6f0ydwx9"},{"post_id":"cl0werqn2007ky0mzbzxo0nnb","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn30082y0mz189e43ex"},{"post_id":"cl0werqn3007oy0mzef2mhm5x","category_id":"cl0werqma0003y0mz481w760v","_id":"cl0werqn30085y0mzfumn01qf"},{"post_id":"cl0werqn3007ry0mzfynb543i","category_id":"cl0werqmq0045y0mz0ffzby4f","_id":"cl0werqn40087y0mz9nso83z8"},{"post_id":"cl0werqn7009fy0mzewgjcn90","category_id":"cl0werqmf000ry0mz9me0hdqp","_id":"cl0werqn7009gy0mz33kehod9"},{"post_id":"cl124w5sr0000femz4ixobyzm","category_id":"cl0werqma0003y0mz481w760v","_id":"cl124w5sv0002femz9hanfxro"}],"PostTag":[{"post_id":"cl0werqm60000y0mzdv5af6vk","tag_id":"cl0werqma0004y0mz10enh84q","_id":"cl0werqmd000hy0mzciam9vk7"},{"post_id":"cl0werqm60000y0mzdv5af6vk","tag_id":"cl0werqmb0009y0mzhl4j6hqs","_id":"cl0werqme000ky0mzdt4w1gml"},{"post_id":"cl0werqm90002y0mz13rx16uj","tag_id":"cl0werqmd000ey0mz5skxfbma","_id":"cl0werqme000oy0mzaxdaa9zt"},{"post_id":"cl0werqma0005y0mzee4a0vko","tag_id":"cl0werqme000ly0mzhz2ebyn6","_id":"cl0werqmf000vy0mzb2ux38p8"},{"post_id":"cl0werqmb0006y0mzdrw2ccth","tag_id":"cl0werqmf000sy0mz7nzl6kmj","_id":"cl0werqmi001ey0mzga5w22bs"},{"post_id":"cl0werqmb0006y0mzdrw2ccth","tag_id":"cl0werqmg0010y0mz8k1hd9h1","_id":"cl0werqmi001hy0mz1v69ecvc"},{"post_id":"cl0werqmb0006y0mzdrw2ccth","tag_id":"cl0werqmh0015y0mzc901608a","_id":"cl0werqmi001ly0mz2e1i5xlv"},{"post_id":"cl0werqmb0007y0mzbsu3et26","tag_id":"cl0werqmh0015y0mzc901608a","_id":"cl0werqmj001oy0mze9fw76qk"},{"post_id":"cl0werqmc000ay0mz72nw22ub","tag_id":"cl0werqmh0015y0mzc901608a","_id":"cl0werqmj001sy0mzgdxy1gll"},{"post_id":"cl0werqmc000by0mz3e9pbj34","tag_id":"cl0werqmj001py0mz3sofdx2w","_id":"cl0werqmj001yy0mz1gmtaxtr"},{"post_id":"cl0werqmd000fy0mz2hsx8ih6","tag_id":"cl0werqmj001vy0mz6qebh0oy","_id":"cl0werqmk0024y0mz3qcaaba7"},{"post_id":"cl0werqme000iy0mzdcsc4aj4","tag_id":"cl0werqmk0023y0mz4k8o70a5","_id":"cl0werqml002cy0mz3qdj1unc"},{"post_id":"cl0werqme000my0mz3ysndmre","tag_id":"cl0werqmk0029y0mz1pwbalj9","_id":"cl0werqml002iy0mze3s00rxq"},{"post_id":"cl0werqme000py0mz8upsdlo8","tag_id":"cl0werqmj001py0mz3sofdx2w","_id":"cl0werqmm002oy0mze0fu8yrt"},{"post_id":"cl0werqmf000wy0mz5smh3e58","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmm002uy0mza2gg8ykk"},{"post_id":"cl0werqmm002py0mz7dr5akbv","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmm002xy0mzgpxue1ir"},{"post_id":"cl0werqmf000yy0mzb2p27t6n","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmn0031y0mz3xftfp9n"},{"post_id":"cl0werqmh0011y0mz6ingezvg","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmn0037y0mz6hhabwnr"},{"post_id":"cl0werqmn0032y0mz3jlk26np","tag_id":"cl0werqmf000sy0mz7nzl6kmj","_id":"cl0werqmn003ay0mzaqk341rk"},{"post_id":"cl0werqmn0035y0mzgpbo73gc","tag_id":"cl0werqmf000sy0mz7nzl6kmj","_id":"cl0werqmo003ey0mz1tgr919q"},{"post_id":"cl0werqmh0013y0mz4wh15a1i","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmo003hy0mzbw6k85n6"},{"post_id":"cl0werqmn003cy0mzalrubzep","tag_id":"cl0werqmb0009y0mzhl4j6hqs","_id":"cl0werqmo003ly0mzb1ioburl"},{"post_id":"cl0werqmh0016y0mzdbgg3ok0","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmp003oy0mz6698benn"},{"post_id":"cl0werqmh0018y0mz3tl0cru2","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmp003sy0mz2mn193u8"},{"post_id":"cl0werqmi001cy0mz03p36ili","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmp003yy0mzawoofccb"},{"post_id":"cl0werqmp003wy0mz9m700l0w","tag_id":"cl0werqmd000ey0mz5skxfbma","_id":"cl0werqmq0041y0mzb0u0h39m"},{"post_id":"cl0werqmi001fy0mz491j79af","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmq0046y0mz4w6zc92h"},{"post_id":"cl0werqmi001jy0mzfl5t8czx","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmq004cy0mzfrb50qis"},{"post_id":"cl0werqmq0047y0mzg6jl122o","tag_id":"cl0werqmd000ey0mz5skxfbma","_id":"cl0werqmr004fy0mzdyfa41un"},{"post_id":"cl0werqmq004ay0mzb8ltbfsk","tag_id":"cl0werqmj001py0mz3sofdx2w","_id":"cl0werqmr004jy0mzc00h8q3g"},{"post_id":"cl0werqmj001my0mzf7ytbx5t","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmr004my0mz3t8w1e0x"},{"post_id":"cl0werqmr004hy0mz3eb77ijc","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmr004qy0mzco7ecmpk"},{"post_id":"cl0werqmj001qy0mzaiigdsmk","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqms004ty0mz5dc99v43"},{"post_id":"cl0werqmr004ky0mzd8kngool","tag_id":"cl0werqmj001py0mz3sofdx2w","_id":"cl0werqms004xy0mz4zuv4ilm"},{"post_id":"cl0werqmj001ty0mz3j0i5a5x","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqms0050y0mzhyihazxk"},{"post_id":"cl0werqmr004ry0mzhyk39tx2","tag_id":"cl0werqmk0023y0mz4k8o70a5","_id":"cl0werqmt0054y0mz63a395sp"},{"post_id":"cl0werqmj001wy0mz26qi101z","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmt0057y0mz9tckflxj"},{"post_id":"cl0werqms0052y0mz3v5cg22f","tag_id":"cl0werqmj001py0mz3sofdx2w","_id":"cl0werqmt005by0mz1w3o0817"},{"post_id":"cl0werqmk0021y0mz88mp2vfl","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmv005ey0mz6ryafa71"},{"post_id":"cl0werqmt0055y0mzcf8u6cfv","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmv005jy0mz20l15zby"},{"post_id":"cl0werqmk0025y0mz5m705a0r","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmw005my0mz7c45cykx"},{"post_id":"cl0werqmv005hy0mzalg9hb13","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmw005qy0mz3pw31hnq"},{"post_id":"cl0werqmv005ky0mz97qpbh9c","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmw005ty0mz5i140wc7"},{"post_id":"cl0werqmk0027y0mz57b1djds","tag_id":"cl0werqmv005gy0mz23r35s4p","_id":"cl0werqmw005xy0mzaggucc0p"},{"post_id":"cl0werqmw005ny0mz16k85lsk","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmx0060y0mz713w0dmt"},{"post_id":"cl0werqmw005ry0mz1i5333m8","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmy0064y0mz7vm38q53"},{"post_id":"cl0werqmk002ay0mz94cg0b0t","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqmy0067y0mzb14if1im"},{"post_id":"cl0werqmw005uy0mzfj3s7z4c","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmz006ay0mzb4h14cw8"},{"post_id":"cl0werqmx005yy0mzazmigc2a","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmz006ey0mzfu5i652b"},{"post_id":"cl0werqmy0061y0mzcqzt4nu8","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqmz006hy0mz3lztfh2i"},{"post_id":"cl0werqmy0065y0mzd6k94d9r","tag_id":"cl0werqmd000ey0mz5skxfbma","_id":"cl0werqn0006ly0mzdd0j9i54"},{"post_id":"cl0werqml002dy0mzam6m6ekp","tag_id":"cl0werqmw005wy0mz40uh49mb","_id":"cl0werqn0006oy0mzbi8vasa5"},{"post_id":"cl0werqml002dy0mzam6m6ekp","tag_id":"cl0werqmy0063y0mzhrfk9nlb","_id":"cl0werqn0006sy0mz0428afmd"},{"post_id":"cl0werqmy0068y0mzhnfy31mj","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn0006vy0mz0ep63n3d"},{"post_id":"cl0werqmy0068y0mzhnfy31mj","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqn0006zy0mz93l1cmrs"},{"post_id":"cl0werqmz006fy0mzafssbsqx","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn10072y0mzh39ufxcf"},{"post_id":"cl0werqmz006fy0mzafssbsqx","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqn10075y0mz3zgv4vjh"},{"post_id":"cl0werqml002gy0mzbb3jeyly","tag_id":"cl0werqmz006by0mzfbmb0a8o","_id":"cl0werqn10079y0mz1rlz4fga"},{"post_id":"cl0werqmz006iy0mz1vpudf2r","tag_id":"cl0werqmg0010y0mz8k1hd9h1","_id":"cl0werqn1007cy0mz2cj6fliy"},{"post_id":"cl0werqmm002my0mzevvlgawk","tag_id":"cl0werqmz006ky0mzaey9dvz6","_id":"cl0werqn2007gy0mzb0sr2yji"},{"post_id":"cl0werqn0006ty0mz7z5mdy7x","tag_id":"cl0werqmf000sy0mz7nzl6kmj","_id":"cl0werqn2007jy0mzg5r181lf"},{"post_id":"cl0werqmm002sy0mz57x5h7b5","tag_id":"cl0werqn0006ry0mz3t33fqu3","_id":"cl0werqn3007ny0mz0klf82z6"},{"post_id":"cl0werqn10073y0mzh7hpfp1w","tag_id":"cl0werqmd000ey0mz5skxfbma","_id":"cl0werqn3007qy0mz86z80d7y"},{"post_id":"cl0werqn10077y0mz9vwe15rk","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn3007uy0mz0v2j96gg"},{"post_id":"cl0werqn1007ay0mzh7ijbuma","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn3007wy0mzamufceq1"},{"post_id":"cl0werqn1007ay0mzh7ijbuma","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqn3007yy0mz5wgwg84m"},{"post_id":"cl0werqmm002vy0mz1detcw1j","tag_id":"cl0werqn0006yy0mzbyhr9x94","_id":"cl0werqn30081y0mz4qhn7uqw"},{"post_id":"cl0werqmm002vy0mz1detcw1j","tag_id":"cl0werqn10076y0mzh1lw85t4","_id":"cl0werqn30083y0mz14z8aiv3"},{"post_id":"cl0werqn2007dy0mz08vf0a2y","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn40086y0mz3obi2laz"},{"post_id":"cl0werqn2007hy0mzbz0o6fph","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn40088y0mzf7fb0r5a"},{"post_id":"cl0werqmn002zy0mz35o07lo9","tag_id":"cl0werqma0004y0mz10enh84q","_id":"cl0werqn4008ay0mzf2vkhyq3"},{"post_id":"cl0werqmn002zy0mz35o07lo9","tag_id":"cl0werqn2007fy0mz7hqne0gv","_id":"cl0werqn4008by0mzerbh9zbu"},{"post_id":"cl0werqmn002zy0mz35o07lo9","tag_id":"cl0werqmf000sy0mz7nzl6kmj","_id":"cl0werqn4008dy0mz425qc0o7"},{"post_id":"cl0werqmn0038y0mz5ijje8ll","tag_id":"cl0werqn2007my0mz4etbat9p","_id":"cl0werqn4008ey0mz4yzydzzm"},{"post_id":"cl0werqmn0038y0mz5ijje8ll","tag_id":"cl0werqn3007ty0mz6zxb4mpn","_id":"cl0werqn4008gy0mz0qhk6s3c"},{"post_id":"cl0werqmo003fy0mz22rzeaa8","tag_id":"cl0werqn3007ty0mz6zxb4mpn","_id":"cl0werqn4008hy0mz7y4fhj1i"},{"post_id":"cl0werqmo003jy0mzeanu3glh","tag_id":"cl0werqn3007ty0mz6zxb4mpn","_id":"cl0werqn5008jy0mz7e8bdqp9"},{"post_id":"cl0werqmo003my0mzeoro61yk","tag_id":"cl0werqn3007ty0mz6zxb4mpn","_id":"cl0werqn5008ky0mza65tfowk"},{"post_id":"cl0werqmp003qy0mzchuf9l90","tag_id":"cl0werqn4008cy0mz4fw54h6q","_id":"cl0werqn5008my0mz9v5mdoxn"},{"post_id":"cl0werqmq0043y0mzfwbd7sow","tag_id":"cl0werqn4008fy0mz3mvifiqx","_id":"cl0werqn5008ny0mzclczc7vj"},{"post_id":"cl0werqmr004oy0mzfmbx7xdf","tag_id":"cl0werqmw005py0mz7829d9b0","_id":"cl0werqn5008py0mzhxl5eawk"},{"post_id":"cl0werqms004vy0mzgc33bvkd","tag_id":"cl0werqn5008ly0mzh8f9etxj","_id":"cl0werqn5008ry0mzc9mj0c8d"},{"post_id":"cl0werqms004vy0mzgc33bvkd","tag_id":"cl0werqn5008oy0mzgsnh0ord","_id":"cl0werqn5008sy0mzgex05eyu"},{"post_id":"cl0werqms004yy0mz2btae5mt","tag_id":"cl0werqmw005wy0mz40uh49mb","_id":"cl0werqn5008uy0mzfy0a8t66"},{"post_id":"cl0werqmt0059y0mz199f0gky","tag_id":"cl0werqn5008ty0mzfw3k5key","_id":"cl0werqn5008wy0mz2lrh24a8"},{"post_id":"cl0werqmu005cy0mzhe847s58","tag_id":"cl0werqn4008fy0mz3mvifiqx","_id":"cl0werqn5008yy0mz8ry81qj9"},{"post_id":"cl0werqmz006cy0mzbw6s39st","tag_id":"cl0werqml002ly0mz2hqgh24z","_id":"cl0werqn50090y0mzc4m5g1tm"},{"post_id":"cl0werqmz006cy0mzbw6s39st","tag_id":"cl0werqn5008xy0mz4ugsh8co","_id":"cl0werqn50091y0mzh9gr0b1h"},{"post_id":"cl0werqn0006my0mzg5wv2zrp","tag_id":"cl0werqn5008zy0mzfcvhd978","_id":"cl0werqn60093y0mzaxind999"},{"post_id":"cl0werqn0006py0mzgmxqae6t","tag_id":"cl0werqn0006yy0mzbyhr9x94","_id":"cl0werqn60095y0mz9911dmel"},{"post_id":"cl0werqn0006wy0mzamqp828c","tag_id":"cl0werqn60094y0mzfjqw5q6g","_id":"cl0werqn60097y0mz7f69dbeu"},{"post_id":"cl0werqn0006wy0mzamqp828c","tag_id":"cl0werqmg0010y0mz8k1hd9h1","_id":"cl0werqn60098y0mzbjstdtlt"},{"post_id":"cl0werqn10070y0mz2t9rgrom","tag_id":"cl0werqn60096y0mzbdkp3bhv","_id":"cl0werqn6009ay0mzaenucazu"},{"post_id":"cl0werqn2007ky0mzbzxo0nnb","tag_id":"cl0werqn60099y0mz3ycnfz05","_id":"cl0werqn6009cy0mz43i6bhe1"},{"post_id":"cl0werqn3007oy0mzef2mhm5x","tag_id":"cl0werqmj001py0mz3sofdx2w","_id":"cl0werqn6009dy0mz2t67fo2i"},{"post_id":"cl0werqn3007oy0mzef2mhm5x","tag_id":"cl0werqn6009by0mzeghtajje","_id":"cl0werqn6009ey0mzdeg013ew"},{"post_id":"cl124w5sr0000femz4ixobyzm","tag_id":"cl0werqn4008fy0mz3mvifiqx","_id":"cl124w5sv0001femz3k6u2p8e"}],"Tag":[{"name":"前端","_id":"cl0werqma0004y0mz10enh84q"},{"name":"Geb","_id":"cl0werqmb0009y0mzhl4j6hqs"},{"name":"Java","_id":"cl0werqmd000ey0mz5skxfbma"},{"name":"代理","_id":"cl0werqme000ly0mzhz2ebyn6"},{"name":"gradle","_id":"cl0werqmf000sy0mz7nzl6kmj"},{"name":"乱码","_id":"cl0werqmg0010y0mz8k1hd9h1"},{"name":"IntelliJ IDEA","_id":"cl0werqmh0015y0mzc901608a"},{"name":"Linux","_id":"cl0werqmj001py0mz3sofdx2w"},{"name":"IDEA","_id":"cl0werqmj001vy0mz6qebh0oy"},{"name":"MySQL","_id":"cl0werqmk0023y0mz4k8o70a5"},{"name":"教育子女","_id":"cl0werqmk0029y0mz1pwbalj9"},{"name":"PostgreSQL","_id":"cl0werqml002ly0mz2hqgh24z"},{"name":"cas","_id":"cl0werqmv005gy0mz23r35s4p"},{"name":"Vert.x","_id":"cl0werqmw005py0mz7829d9b0"},{"name":"nginx","_id":"cl0werqmw005wy0mz40uh49mb"},{"name":"https","_id":"cl0werqmy0063y0mzhrfk9nlb"},{"name":"深度学习","_id":"cl0werqmz006by0mzfbmb0a8o"},{"name":"GitHub","_id":"cl0werqmz006ky0mzaey9dvz6"},{"name":"Cordova","_id":"cl0werqn0006ry0mz3t33fqu3"},{"name":"Docker","_id":"cl0werqn0006yy0mzbyhr9x94"},{"name":"FastDFS","_id":"cl0werqn10076y0mzh1lw85t4"},{"name":"vue","_id":"cl0werqn2007fy0mz7hqne0gv"},{"name":"Spring","_id":"cl0werqn2007my0mz4etbat9p"},{"name":"groovy","_id":"cl0werqn3007ty0mz6zxb4mpn"},{"name":"ios","_id":"cl0werqn4008cy0mz4fw54h6q"},{"name":"Mac","_id":"cl0werqn4008fy0mz3mvifiqx"},{"name":"WEB","_id":"cl0werqn5008ly0mzh8f9etxj"},{"name":"Kotlin","_id":"cl0werqn5008oy0mzgsnh0ord"},{"name":"UI设计","_id":"cl0werqn5008ty0mzfw3k5key"},{"name":"RESTful","_id":"cl0werqn5008xy0mz4ugsh8co"},{"name":"git","_id":"cl0werqn5008zy0mzfcvhd978"},{"name":"tomcat","_id":"cl0werqn60094y0mzfjqw5q6g"},{"name":"ubuntu","_id":"cl0werqn60096y0mzbdkp3bhv"},{"name":"contributors","_id":"cl0werqn60099y0mz3ycnfz05"},{"name":"vim","_id":"cl0werqn6009by0mzeghtajje"}]}}